{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _round from \"lodash/round\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport GeoJSON from \"ol/format/GeoJSON\";\nexport var MapLayers;\n\n(function (MapLayers) {\n  MapLayers[\"Vessel\"] = \"vessel\";\n  MapLayers[\"Port\"] = \"port\";\n})(MapLayers || (MapLayers = {}));\n\nvar defaultGeojsonObject = {\n  type: \"FeatureCollection\",\n  crs: {\n    type: \"name\",\n    properties: {\n      name: \"EPSG:4326\"\n    }\n  }\n};\nexport function deg2Rad(_degree) {\n  var degree = Number(_degree);\n  return degree ? degree / 180 * Math.PI : 0;\n}\nexport var CONVERT_PROJECTION = {\n  featureProjection: \"EPSG:3857\",\n  dataProjection: \"EPSG:4326\"\n};\nexport var convertCoord2LongLat = function convertCoord2LongLat(data) {\n  return ol.proj.transform(data, 'EPSG:3857', 'EPSG:4326');\n};\nexport var convertLongLat2Coords = function convertLongLat2Coords(data) {\n  return ol.proj.transform(data, 'EPSG:4326', 'EPSG:3857');\n};\nexport function convertHeadingtoDegree(heading) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI / 2;\n  return _round(heading * 180 / Math.PI + offset);\n}\nexport var getHeadingRad = function getHeadingRad(_degree) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI / 2;\n  var degree = deg2Rad(_degree);\n  return degree - offset;\n};\nexport var formatPortFeatures = function formatPortFeatures(features) {\n  var geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features: features\n  });\n\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};\nexport var formatVesselFeatures = function formatVesselFeatures(dataFeatures) {\n  var features = dataFeatures.map(function (feature) {\n    return {\n      properties: feature.properties,\n      geometry: feature.geometry,\n      type: \"Feature\"\n    };\n  });\n\n  var geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features: features\n  });\n\n  debugger;\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/core/model/Map/index.tsx"],"names":["GeoJSON","MapLayers","defaultGeojsonObject","type","crs","properties","name","deg2Rad","_degree","degree","Number","Math","PI","CONVERT_PROJECTION","featureProjection","dataProjection","convertCoord2LongLat","data","ol","proj","transform","convertLongLat2Coords","convertHeadingtoDegree","heading","offset","getHeadingRad","formatPortFeatures","features","geoJson","readFeatures","formatVesselFeatures","dataFeatures","map","feature","geometry"],"mappings":";;;;;;;AACA,OAAOA,OAAP,MAAoB,mBAApB;AAGA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAgBZ,IAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,IAAI,EAAE,mBADqB;AAE3BC,EAAAA,GAAG,EAAE;AACHD,IAAAA,IAAI,EAAE,MADH;AAEHE,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AADI;AAFT;AAFsB,CAA7B;AASA,OAAO,SAASC,OAAT,CAAiBC,OAAjB,EAAuC;AAC5C,MAAMC,MAAM,GAAGC,MAAM,CAACF,OAAD,CAArB;AACA,SAAOC,MAAM,GAAIA,MAAM,GAAG,GAAV,GAAiBE,IAAI,CAACC,EAAzB,GAA8B,CAA3C;AACD;AAED,OAAO,IAAMC,kBAAkB,GAAG;AAChCC,EAAAA,iBAAiB,EAAE,WADa;AAEhCC,EAAAA,cAAc,EAAE;AAFgB,CAA3B;AAKP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAmB;AACrD,SAAOC,EAAE,CAACC,IAAH,CAAQC,SAAR,CAAkBH,IAAlB,EAAwB,WAAxB,EAAqC,WAArC,CAAP;AACD,CAFM;AAGP,OAAO,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACJ,IAAD,EAAoB;AACvD,SAAOC,EAAE,CAACC,IAAH,CAAQC,SAAR,CAAkBH,IAAlB,EAAwB,WAAxB,EAAqC,WAArC,CAAP;AACD,CAFM;AAIP,OAAO,SAASK,sBAAT,CAAgCC,OAAhC,EAAuE;AAAA,MAAtBC,MAAsB,uEAAbb,IAAI,CAACC,EAAL,GAAU,CAAG;AAC5E,SAAO,OAAOW,OAAO,GAAG,GAAX,GAAkBZ,IAAI,CAACC,EAAvB,GAA4BY,MAAlC,CAAP;AACD;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACjB,OAAD,EAAiD;AAAA,MAAlCgB,MAAkC,uEAAzBb,IAAI,CAACC,EAAL,GAAU,CAAe;AAC5E,MAAMH,MAAM,GAAGF,OAAO,CAACC,OAAD,CAAtB;AACA,SAAOC,MAAM,GAAGe,MAAhB;AACD,CAHM;AAKP,OAAO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAiC;AACjE,MAAMC,OAAO,mCAAQ1B,oBAAR;AAA8ByB,IAAAA,QAAQ,EAARA;AAA9B,IAAb;;AACA,SAAO,IAAI3B,OAAJ,CAAYa,kBAAZ,EAAgCgB,YAAhC,CAA6CD,OAA7C,CAAP;AACD,CAHM;AAKP,OAAO,IAAOE,oBAAoB,GAAE,SAAtBA,oBAAsB,CAACC,YAAD,EAAqC;AACvE,MAAMJ,QAAQ,GAAGI,YAAY,CAACC,GAAb,CAAiB,UAACC,OAAD;AAAA,WAAmB;AACnD5B,MAAAA,UAAU,EAAE4B,OAAO,CAAC5B,UAD+B;AAEnD6B,MAAAA,QAAQ,EAAED,OAAO,CAACC,QAFiC;AAGnD/B,MAAAA,IAAI,EAAE;AAH6C,KAAnB;AAAA,GAAjB,CAAjB;;AAMA,MAAMyB,OAAO,mCAAQ1B,oBAAR;AAA8ByB,IAAAA,QAAQ,EAARA;AAA9B,IAAb;;AACA;AACA,SAAO,IAAI3B,OAAJ,CAAYa,kBAAZ,EAAgCgB,YAAhC,CAA6CD,OAA7C,CAAP;AACD,CAVM","sourcesContent":["import produce from \"immer\"\nimport GeoJSON from \"ol/format/GeoJSON\"\nimport { round } from 'lodash';\n\nexport enum MapLayers {\n  Vessel = \"vessel\",\n  Port = \"port\",\n}\n\nexport interface GeometryProfile {\n  type: \"Point\" | string\n  coordinates: Array<number>\n}\n\nexport interface FeaturesProfile {\n  type: \"Feature\"\n  geometry: GeometryProfile\n  properties?: any\n}\n\nconst defaultGeojsonObject = {\n  type: \"FeatureCollection\",\n  crs: {\n    type: \"name\",\n    properties: {\n      name: \"EPSG:4326\",\n    },\n  },\n}\nexport function deg2Rad(_degree: any): number {\n  const degree = Number(_degree)\n  return degree ? (degree / 180) * Math.PI : 0\n}\n\nexport const CONVERT_PROJECTION = {\n  featureProjection: \"EPSG:3857\",\n  dataProjection: \"EPSG:4326\",\n}\n\nexport const convertCoord2LongLat = (data: number[])=> {\n  return ol.proj.transform(data, 'EPSG:3857', 'EPSG:4326');\n}\nexport const convertLongLat2Coords = (data: number[]) => {\n  return ol.proj.transform(data, 'EPSG:4326', 'EPSG:3857');\n}\n\nexport function convertHeadingtoDegree(heading: number, offset = Math.PI / 2) {\n  return round((heading * 180) / Math.PI + offset);\n}\n\nexport const getHeadingRad = (_degree: any, offset = Math.PI / 2): number  => {\n  const degree = deg2Rad(_degree)\n  return degree - offset\n}\n\nexport const formatPortFeatures = (features: FeaturesProfile[]) => {\n  const geoJson = { ...defaultGeojsonObject, features }\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson)\n}\n\nexport const  formatVesselFeatures =(dataFeatures: FeaturesProfile[]) => {\n  const features = dataFeatures.map((feature: any) => ({\n    properties: feature.properties,\n    geometry: feature.geometry,\n    type: \"Feature\"\n\n  }))\n  const geoJson = { ...defaultGeojsonObject, features }\n  debugger\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson)\n}\n"]},"metadata":{},"sourceType":"module"}