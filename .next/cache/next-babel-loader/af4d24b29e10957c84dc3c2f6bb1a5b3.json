{"ast":null,"code":"import _get from \"lodash/get\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport authServices from \"services/auth/api\";\nimport { BaseFunctions, loginFailed, loginSuccess, logoutSuccess, logoutFailed } from \"./actions\";\nimport { AuthActions } from \"./types\";\nexport function* login({\n  payload\n}) {\n  yield put(BaseFunctions.setState({\n    loading: true\n  }));\n\n  try {\n    yield call(authServices.login, payload);\n    yield put(loginSuccess());\n  } catch (e) {\n    _notification.error({\n      message: \"Error\",\n      description: _get(e, \"data.message\")\n    });\n\n    yield put(loginFailed({\n      error: _get(e, \"data.message\")\n    }));\n  }\n}\nexport function* logout() {\n  yield put(BaseFunctions.setState({\n    loading: true\n  }));\n\n  try {\n    yield call(authServices.logout);\n    yield put(logoutSuccess());\n  } catch (e) {\n    _notification.error({\n      message: \"Error\",\n      description: _get(e, \"data.message\")\n    });\n\n    yield put(logoutFailed({\n      error: _get(e, \"data.message\")\n    }));\n  }\n}\nexport function* getCurrentUser() {\n  try {\n    yield put(BaseFunctions.setState({\n      authorizing: true\n    }));\n    const data = yield call(authServices.getCurrentUser);\n    yield put(BaseFunctions.setState({\n      authorizing: false,\n      authorized: true\n    }));\n  } catch (e) {\n    yield put(loginFailed({\n      error: _get(e, \"data.message\")\n    }));\n    yield put(BaseFunctions.setState({\n      authorizing: false,\n      authorized: false\n    }));\n  }\n}\nexport default function* rootSaga() {\n  yield all([takeLatest(AuthActions.LOGIN, login), takeLatest(AuthActions.LOGOUT, logout), takeLatest(AuthActions.GET_CURRENT_USER, getCurrentUser)]);\n}","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/auth/sagas.ts"],"names":["all","call","put","takeLatest","authServices","BaseFunctions","loginFailed","loginSuccess","logoutSuccess","logoutFailed","AuthActions","login","payload","setState","loading","e","error","message","description","logout","getCurrentUser","authorizing","data","authorized","rootSaga","LOGIN","LOGOUT","GET_CURRENT_USER"],"mappings":";;;AACA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,YAArC,EAAmDC,aAAnD,EAAkEC,YAAlE,QAAsF,WAAtF;AACA,SAASC,WAAT,QAA0C,SAA1C;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA2C;AAChD,QAAMV,GAAG,CAACG,aAAa,CAACQ,QAAd,CAAuB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAvB,CAAD,CAAT;;AACA,MAAI;AACF,UAAMb,IAAI,CAACG,YAAY,CAACO,KAAd,EAAqBC,OAArB,CAAV;AACA,UAAMV,GAAG,CAACK,YAAY,EAAb,CAAT;AACD,GAHD,CAGE,OAAOQ,CAAP,EAAU;AACV,kBAAaC,KAAb,CAAmB;AAAEC,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,WAAW,EAAE,KAAIH,CAAJ,EAAO,cAAP;AAAjC,KAAnB;;AACA,UAAMb,GAAG,CAACI,WAAW,CAAC;AAAEU,MAAAA,KAAK,EAAE,KAAID,CAAJ,EAAO,cAAP;AAAT,KAAD,CAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUI,MAAV,GAAmB;AACxB,QAAMjB,GAAG,CAACG,aAAa,CAACQ,QAAd,CAAuB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAvB,CAAD,CAAT;;AACA,MAAI;AACF,UAAMb,IAAI,CAACG,YAAY,CAACe,MAAd,CAAV;AACA,UAAMjB,GAAG,CAACM,aAAa,EAAd,CAAT;AACD,GAHD,CAGE,OAAOO,CAAP,EAAU;AACV,kBAAaC,KAAb,CAAmB;AAAEC,MAAAA,OAAO,EAAE,OAAX;AAAoBC,MAAAA,WAAW,EAAE,KAAIH,CAAJ,EAAO,cAAP;AAAjC,KAAnB;;AACA,UAAMb,GAAG,CAACO,YAAY,CAAC;AAAEO,MAAAA,KAAK,EAAE,KAAID,CAAJ,EAAO,cAAP;AAAT,KAAD,CAAb,CAAT;AACD;AACF;AAED,OAAO,UAAUK,cAAV,GAA2B;AAChC,MAAI;AACF,UAAMlB,GAAG,CAACG,aAAa,CAACQ,QAAd,CAAuB;AAAEQ,MAAAA,WAAW,EAAE;AAAf,KAAvB,CAAD,CAAT;AACA,UAAMC,IAAI,GAAG,MAAMrB,IAAI,CAACG,YAAY,CAACgB,cAAd,CAAvB;AACA,UAAMlB,GAAG,CAACG,aAAa,CAACQ,QAAd,CAAuB;AAAEQ,MAAAA,WAAW,EAAE,KAAf;AAAsBE,MAAAA,UAAU,EAAE;AAAlC,KAAvB,CAAD,CAAT;AACD,GAJD,CAIE,OAAOR,CAAP,EAAU;AACV,UAAMb,GAAG,CAACI,WAAW,CAAC;AAAEU,MAAAA,KAAK,EAAE,KAAID,CAAJ,EAAO,cAAP;AAAT,KAAD,CAAZ,CAAT;AACA,UAAMb,GAAG,CAACG,aAAa,CAACQ,QAAd,CAAuB;AAAEQ,MAAAA,WAAW,EAAE,KAAf;AAAsBE,MAAAA,UAAU,EAAE;AAAlC,KAAvB,CAAD,CAAT;AACD;AACF;AAED,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CACRG,UAAU,CAACO,WAAW,CAACe,KAAb,EAAoBd,KAApB,CADF,EAERR,UAAU,CAACO,WAAW,CAACgB,MAAb,EAAqBP,MAArB,CAFF,EAGRhB,UAAU,CAACO,WAAW,CAACiB,gBAAb,EAA+BP,cAA/B,CAHF,CAAD,CAAT;AAKD","sourcesContent":["import { notification } from \"antd\"\nimport { all, call, put, takeLatest } from \"redux-saga/effects\"\nimport authServices from \"services/auth/api\"\nimport { get } from \"lodash\"\nimport { BaseFunctions, loginFailed, loginSuccess, logoutSuccess, logoutFailed } from \"./actions\"\nimport { AuthActions, ILoginAction } from \"./types\"\n\nexport function* login({ payload }: ILoginAction) {\n  yield put(BaseFunctions.setState({ loading: true }))\n  try {\n    yield call(authServices.login, payload)\n    yield put(loginSuccess())\n  } catch (e) {\n    notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n    yield put(loginFailed({ error: get(e, \"data.message\") }))\n  }\n}\n\nexport function* logout() {\n  yield put(BaseFunctions.setState({ loading: true }))\n  try {\n    yield call(authServices.logout)\n    yield put(logoutSuccess())\n  } catch (e) {\n    notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n    yield put(logoutFailed({ error: get(e, \"data.message\") }))\n  }\n}\n\nexport function* getCurrentUser() {\n  try {\n    yield put(BaseFunctions.setState({ authorizing: true }))\n    const data = yield call(authServices.getCurrentUser)\n    yield put(BaseFunctions.setState({ authorizing: false, authorized: true }))\n  } catch (e) {\n    yield put(loginFailed({ error: get(e, \"data.message\") }))\n    yield put(BaseFunctions.setState({ authorizing: false, authorized: false }))\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeLatest(AuthActions.LOGIN, login),\n    takeLatest(AuthActions.LOGOUT, logout),\n    takeLatest(AuthActions.GET_CURRENT_USER, getCurrentUser),\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}