{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _get from \"lodash/get\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchAll),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport vesselServices from \"services/vessel/api\";\nimport { BaseFunctions, fetchAllSuccess, fetchAllFailed } from \"./actions\";\nimport { VesselActions } from \"./types\";\nexport function fetchAll(_ref) {\n  var payload, onStart, onSuccess, onError, params, allData, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function fetchAll$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          onStart = payload.onStart, onSuccess = payload.onSuccess, onError = payload.onError, params = payload.params;\n          allData = [];\n          onStart();\n          _context.prev = 4;\n          _context.next = 7;\n          return call(vesselServices.fetchAll, params);\n\n        case 7:\n          _yield$call = _context.sent;\n          data = _yield$call.data.data;\n          _context.next = 11;\n          return put(BaseFunctions.setState({\n            data: data\n          }));\n\n        case 11:\n          _context.next = 13;\n          return put(fetchAllSuccess());\n\n        case 13:\n          _context.next = 20;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](4);\n          onError(_context.t0);\n          _context.next = 20;\n          return put(fetchAllFailed({\n            error: _get(_context.t0, \"data.message\")\n          }));\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[4, 15]]);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(VesselActions.FETCH_ALL, fetchAll)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}