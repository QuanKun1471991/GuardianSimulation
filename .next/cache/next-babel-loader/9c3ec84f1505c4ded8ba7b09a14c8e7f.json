{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { stringify } from \"querystring\";\nimport axios from \"services/_base/_axios\";\nimport produce from \"immer\";\n\nclass VesselServices {\n  async fetchAll(params) {\n    const response = await axios.get(`/vessels?${stringify(params)}`);\n    const data = {\n      data: {\n        data: response.data.data.map(record => {\n          const attributes = produce(record.attributes, draft => {\n            draft.properties = _objectSpread(_objectSpread({}, draft), draft.properties);\n            delete draft.properties.geometry;\n          });\n          return attributes;\n        })\n      }\n    };\n    return data;\n  }\n\n  async simulate(_ref) {\n    let {\n      imo\n    } = _ref,\n        params = _objectWithoutProperties(_ref, [\"imo\"]);\n\n    debugger; // return await httpClient.post(`/v1/spires?imos[]=${imo}`, params);\n\n    axios.post(`/v1/spires?imos[]=${imo}`, params);\n  }\n\n}\n\nexport default new VesselServices();","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/vessel/api.ts"],"names":["stringify","axios","produce","VesselServices","fetchAll","params","response","get","data","map","record","attributes","draft","properties","geometry","simulate","imo","post"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,OAApB;;AAEA,MAAMC,cAAN,CAAqB;AACnB,QAAaC,QAAb,CAAsBC,MAAtB,EAAsD;AACpD,UAAMC,QAAQ,GAAI,MAAML,KAAK,CAACM,GAAN,CAAW,YAAWP,SAAS,CAACK,MAAD,CAAS,EAAxC,CAAxB;AAEA,UAAMG,IAAI,GAAG;AACXA,MAAAA,IAAI,EAAE;AACJA,QAAAA,IAAI,EAAEF,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,GAAnB,CAAwBC,MAAD,IAAY;AACvC,gBAAMC,UAAU,GAAGT,OAAO,CAACQ,MAAM,CAACC,UAAR,EAAqBC,KAAD,IAAW;AACvDA,YAAAA,KAAK,CAACC,UAAN,mCAAwBD,KAAxB,GAAkCA,KAAK,CAACC,UAAxC;AACA,mBAAOD,KAAK,CAACC,UAAN,CAAiBC,QAAxB;AACD,WAHyB,CAA1B;AAIA,iBAAOH,UAAP;AACD,SANK;AADF;AADK,KAAb;AAWA,WAAOH,IAAP;AACD;;AAED,QAAaO,QAAb,OAA+C;AAAA,QAAzB;AAAEC,MAAAA;AAAF,KAAyB;AAAA,QAAfX,MAAe;;AAC7C,aAD6C,CAE7C;;AACAJ,IAAAA,KAAK,CAACgB,IAAN,CAAY,qBAAoBD,GAAI,EAApC,EAAuCX,MAAvC;AACD;;AAtBkB;;AAyBrB,eAAe,IAAIF,cAAJ,EAAf","sourcesContent":["import { stringify } from \"querystring\"\nimport axios from \"services/_base/_axios\"\nimport produce from \"immer\"\n\nclass VesselServices {\n  public async fetchAll(params: Record<\"imos\", number>) {\n    const response =  await axios.get(`/vessels?${stringify(params)}`)\n    \n    const data = {\n      data: {\n        data: response.data.data.map((record) => {\n          const attributes = produce(record.attributes, (draft) => {\n            draft.properties = { ...draft, ...draft.properties }\n            delete draft.properties.geometry\n          })\n          return attributes\n        }),\n      },\n    }\n    return data\n  }\n\n  public async simulate({ imo, ...params }: any) {\n    debugger;\n    // return await httpClient.post(`/v1/spires?imos[]=${imo}`, params);\n    axios.post(`/v1/spires?imos[]=${imo}`, params)\n  }\n}\n\nexport default new VesselServices()\n"]},"metadata":{},"sourceType":"module"}