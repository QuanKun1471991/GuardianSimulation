{"ast":null,"code":"import _get from \"lodash/get\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport styles from './styles';\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'; // import update from 'immutability-helper';\n\nimport { BaseFunctions } from \"services/vessel/actions\";\nimport { useDispatch } from 'react-redux';\nimport produce from \"immer\";\nvar useStyles = makeStyles(styles);\n\nfunction Index(_ref) {\n  var selectedVessel = _ref.selectedVessel;\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var simulationRoutes = selectedVessel.simulationRoutes,\n      _selectedVessel$simul = selectedVessel.simulationRoutes,\n      loading = _selectedVessel$simul.loading,\n      data = _selectedVessel$simul.data;\n\n  var _useState = useState(data),\n      rows = _useState[0],\n      setRows = _useState[1];\n\n  useEffect(function () {\n    setRows(data);\n  }, [data]);\n  var handleUpdateRow = useCallback(function (index, key, value) {\n    setRows(function (prevRows) {\n      return produce(prevRows, function (draft) {\n        draft[index][key] = value;\n      });\n    });\n  }, []);\n\n  var handleUpdate = function handleUpdate() {\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, simulationRoutes), {}, {\n        data: rows,\n        update: true\n      })\n    }));\n  };\n\n  var resultData = useCallback(function () {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.tableWrapper\n    }, __jsx(Table, {\n      className: classes.table,\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\"\n    }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n      align: \"center\"\n    }, \"Longitude\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Latitude\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Heading\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Speed\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Timestamp\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Created_at\"), __jsx(TableCell, {\n      align: \"center\"\n    }, rows.length !== 0 && __jsx(React.Fragment, null, __jsx(Button, {\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      disableElevation: true,\n      onClick: function onClick() {\n        return handleUpdate();\n      }\n    }, \"Update\"))))), __jsx(TableBody, null, rows.map(function (row, index) {\n      return __jsx(TableRow, {\n        key: row.id,\n        style: {\n          whiteSpace: 'normal',\n          wordWrap: 'break-word',\n          backgroundColor: 'white'\n        }\n      }, __jsx(TableCell, {\n        className: classes.tableCell,\n        align: \"center\"\n      }, __jsx(TextField, {\n        id: \"standard-basic\",\n        value: _get(row, 'longitude'),\n        onChange: function onChange(e) {\n          return handleUpdateRow(index, 'longitude', e.currentTarget.value);\n        }\n      })), __jsx(TableCell, {\n        className: classes.tableCell,\n        align: \"center\"\n      }, __jsx(TextField, {\n        id: \"standard-basic\",\n        value: _get(row, 'latitude'),\n        onChange: function onChange(e) {\n          return handleUpdateRow(index, 'latitude', e.currentTarget.value);\n        }\n      })), __jsx(TableCell, {\n        className: classes.tableCell,\n        align: \"center\"\n      }, __jsx(TextField, {\n        id: \"standard-basic\",\n        value: _get(row, 'heading'),\n        disabled: true\n      })), __jsx(TableCell, {\n        className: classes.tableCell,\n        align: \"center\"\n      }, __jsx(TextField, {\n        id: \"standard-basic\",\n        value: _get(row, 'speed'),\n        onChange: function onChange(e) {\n          return handleUpdateRow(index, 'speed', e.currentTarget.value);\n        }\n      })), __jsx(TableCell, {\n        className: classes.tableCell,\n        align: \"center\"\n      }, __jsx(TextField, {\n        id: \"standard-basic\",\n        value: _get(row, 'timestamp'),\n        onChange: function onChange(e) {\n          return handleUpdateRow(index, 'timestamp', e.currentTarget.value);\n        }\n      })), __jsx(TableCell, {\n        className: classes.tableCell,\n        align: \"center\"\n      }, __jsx(TextField, {\n        id: \"standard-basic\",\n        value: _get(row, 'created_at'),\n        onChange: function onChange(e) {\n          return handleUpdateRow(index, 'created_at', e.currentTarget.value);\n        }\n      })), __jsx(TableCell, null));\n    }))));\n  }, [simulationRoutes, rows]);\n  return __jsx(React.Fragment, null, !loading && resultData());\n}\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}