{"ast":null,"code":"import _get from \"lodash/get\";\nvar _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/SimulationResults/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport styles from './styles';\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport update from 'immutability-helper';\nimport { BaseFunctions } from \"services/vessel/actions\";\nimport { useDispatch } from 'react-redux';\nconst useStyles = makeStyles(styles);\n\nfunction Index(props) {\n  const classes = useStyles();\n  const {\n    simulationRoutes\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    loading,\n    data\n  } = simulationRoutes;\n  const {\n    0: rows,\n    1: setRows\n  } = useState(data);\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n  const handleUpdateRow = useCallback((index, path) => {\n    setRows(prevRows => update(prevRows, {\n      [index]: path\n    }));\n  }, []);\n\n  const handleUpdate = () => {\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n        update: !update,\n        data: rows\n      })\n    }));\n  };\n\n  const resultData = useCallback(() => {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.tableWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, __jsx(Table, {\n      className: classes.table,\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, __jsx(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, __jsx(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, \"Longitude\"), __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }, \"Latitude\"), __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"Heading\"), __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, \"Speed\"), __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, \"Timestamp\"), __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, \"Created_at\"), __jsx(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, rows.length !== 0 && __jsx(React.Fragment, null, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disableElevation: true,\n      onClick: () => handleUpdate(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, \"Update\"))))), __jsx(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, rows.map((row, index) => __jsx(TableRow, {\n      key: row.id,\n      style: {\n        whiteSpace: 'normal',\n        wordWrap: 'break-word',\n        backgroundColor: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'longitude'),\n      onChange: e => handleUpdateRow(index, {\n        longitude: {\n          $set: e.currentTarget.value\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'latitude'),\n      onChange: e => handleUpdateRow(index, {\n        latitude: {\n          $set: e.currentTarget.value\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'heading'),\n      onChange: e => handleUpdateRow(index, {\n        heading: {\n          $set: e.currentTarget.value\n        }\n      }),\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'speed'),\n      onChange: e => handleUpdateRow(index, {\n        speed: {\n          $set: e.currentTarget.value\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'timestamp'),\n      onChange: e => handleUpdateRow(index, {\n        timestamp: {\n          $set: e.currentTarget.value\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'created_at'),\n      onChange: e => handleUpdateRow(index, {\n        created_at: {\n          $set: e.currentTarget.value\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    })), __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }))))));\n  }, [simulationRoutes, rows]);\n  return __jsx(React.Fragment, null, !loading && resultData());\n}\n\nexport default Index;","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/SimulationResults/index.tsx"],"names":["React","useCallback","useState","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","styles","Grid","Button","TextField","update","BaseFunctions","useDispatch","useStyles","Index","props","classes","simulationRoutes","dispatch","loading","data","rows","setRows","handleUpdateRow","index","path","prevRows","handleUpdate","setState","field","selectedVessel","resultData","tableWrapper","table","length","map","row","id","whiteSpace","wordWrap","backgroundColor","tableCell","e","longitude","$set","currentTarget","value","latitude","heading","speed","timestamp","created_at"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport styles from './styles';\nimport { get } from 'lodash';\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport update from 'immutability-helper';\nimport {BaseFunctions} from \"services/vessel/actions\"\nimport { useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles(styles);\n\nfunction Index(props: any) {\n  const classes = useStyles();\n  const { simulationRoutes } = props;\n  const dispatch = useDispatch()\n\n  const { loading, data } = simulationRoutes;\n\n  const [rows, setRows] = useState(data);\n\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n\n  const handleUpdateRow = useCallback((index: number, path: any) => {\n    setRows((prevRows: any) => update(prevRows, { [index]: path }));\n  }, []);\n\n  const handleUpdate = () => {\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: {\n        ...selectedVessel.simulationRoutes,\n        update: !update,\n        data: rows,\n      },\n    }))\n  };\n\n  const resultData = useCallback(() => {\n    return (\n      <Grid item xs={12} className={classes.tableWrapper}>\n        <Table className={classes.table} stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">\n                Longitude\n              </TableCell>\n              <TableCell align=\"center\">\n                Latitude\n              </TableCell>\n              <TableCell align=\"center\">\n                Heading\n              </TableCell>\n              <TableCell align=\"center\">\n                Speed\n              </TableCell>\n              <TableCell align=\"center\">\n                Timestamp\n              </TableCell>\n              <TableCell align=\"center\">\n                Created_at\n              </TableCell>\n              <TableCell align=\"center\">\n                {rows.length !== 0 && (\n                  <>\n                    <Button variant=\"contained\" color=\"primary\" disableElevation onClick={() => handleUpdate()}>\n                      Update\n                    </Button>\n                  </>\n                )}\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row: any, index: number) => (\n              <TableRow key={row.id} style={{ whiteSpace: 'normal', wordWrap: 'break-word', backgroundColor: 'white' }}>\n                <TableCell className={classes.tableCell} align=\"center\">\n                  <TextField\n                    id=\"standard-basic\"\n                    value={get(row, 'longitude')}\n                    onChange={e => handleUpdateRow(index, { longitude: { $set: e.currentTarget.value } })}\n                  />\n                </TableCell>\n                <TableCell className={classes.tableCell} align=\"center\">\n                  <TextField\n                    id=\"standard-basic\"\n                    value={get(row, 'latitude')}\n                    onChange={e => handleUpdateRow(index, { latitude: { $set: e.currentTarget.value } })}\n                  />\n                </TableCell>\n                <TableCell className={classes.tableCell} align=\"center\">\n                  <TextField\n                    id=\"standard-basic\"\n                    value={get(row, 'heading')}\n                    onChange={e => handleUpdateRow(index, { heading: { $set: e.currentTarget.value } })}\n                    disabled\n                  />\n                </TableCell>\n                <TableCell className={classes.tableCell} align=\"center\">\n                  <TextField\n                    id=\"standard-basic\"\n                    value={get(row, 'speed')}\n                    onChange={e => handleUpdateRow(index, { speed: { $set: e.currentTarget.value } })}\n                  />\n                </TableCell>\n                <TableCell className={classes.tableCell} align=\"center\">\n                  <TextField\n                    id=\"standard-basic\"\n                    value={get(row, 'timestamp')}\n                    onChange={e => handleUpdateRow(index, { timestamp: { $set: e.currentTarget.value } })}\n                  />\n                </TableCell>\n                <TableCell className={classes.tableCell} align=\"center\">\n                  <TextField\n                    id=\"standard-basic\"\n                    value={get(row, 'created_at')}\n                    onChange={e => handleUpdateRow(index, { created_at: { $set: e.currentTarget.value } })}\n                  />\n                </TableCell>\n                <TableCell />\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Grid>\n    );\n  }, [simulationRoutes, rows]);\n\n  return (\n    <>\n      {!loading && resultData()}\n    </>\n  );\n}\n\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}