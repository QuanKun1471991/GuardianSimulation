{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport vesselServices from \"services/vessel/api\";\nimport { get } from \"lodash\";\nimport { BaseFunctions, fetchAllSuccess, fetchAllFailed } from \"./actions\";\nimport { VesselActions } from \"./types\";\nexport function* fetchAll({\n  payload\n}) {\n  const {\n    onStart,\n    onSuccess,\n    onError\n  } = payload;\n  let allData = [];\n  const filter = {\n    page: 1\n  };\n  onStart();\n\n  try {\n    while (true) {\n      const {\n        data: {\n          data,\n          meta,\n          meta: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            pager: {\n              page_size\n            }\n          }\n        }\n      } = yield call(vesselServices.fetchAll, filter);\n      allData = [...allData, ...data];\n      yield put(BaseFunctions.setState({\n        data: allData,\n        meta\n      }));\n\n      if (page_size === 0) {\n        onSuccess();\n        yield put(fetchAllSuccess());\n        break;\n      }\n\n      filter.page += 1;\n    }\n\n    yield put(fetchAllSuccess());\n  } catch (e) {\n    onError(e);\n    yield put(fetchAllFailed({\n      error: get(e, \"data.message\")\n    }));\n  }\n}\nexport default function* rootSaga() {\n  yield all([takeLatest(VesselActions.FETCH_ALL, fetchAll)]);\n}","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/vessel/sagas.ts"],"names":["all","call","put","takeLatest","vesselServices","get","BaseFunctions","fetchAllSuccess","fetchAllFailed","VesselActions","fetchAll","payload","onStart","onSuccess","onError","allData","filter","page","data","meta","pager","page_size","setState","e","error","rootSaga","FETCH_ALL"],"mappings":"AACA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,QAA+D,WAA/D;AACA,SAASC,aAAT,QAA+C,SAA/C;AAEA,OAAO,UAAUC,QAAV,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAAiD;AACtD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAAkCH,OAAxC;AACA,MAAII,OAAO,GAAG,EAAd;AACA,QAAMC,MAAM,GAAG;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAf;AACAL,EAAAA,OAAO;;AACP,MAAI;AACF,WAAO,IAAP,EAAa;AACX,YAAM;AACJM,QAAAA,IAAI,EAAE;AACJA,UAAAA,IADI;AAEJC,UAAAA,IAFI;AAGJA,UAAAA,IAAI,EAAE;AACJ;AACAC,YAAAA,KAAK,EAAE;AAAEC,cAAAA;AAAF;AAFH;AAHF;AADF,UASF,MAAMpB,IAAI,CAACG,cAAc,CAACM,QAAhB,EAA0BM,MAA1B,CATd;AAUAD,MAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAa,GAAGG,IAAhB,CAAV;AACA,YAAMhB,GAAG,CAACI,aAAa,CAACgB,QAAd,CAAuB;AAAEJ,QAAAA,IAAI,EAAEH,OAAR;AAAiBI,QAAAA;AAAjB,OAAvB,CAAD,CAAT;;AACA,UAAIE,SAAS,KAAK,CAAlB,EAAqB;AACnBR,QAAAA,SAAS;AACT,cAAMX,GAAG,CAACK,eAAe,EAAhB,CAAT;AACA;AACD;;AACDS,MAAAA,MAAM,CAACC,IAAP,IAAe,CAAf;AACD;;AAED,UAAMf,GAAG,CAACK,eAAe,EAAhB,CAAT;AACD,GAvBD,CAuBE,OAAOgB,CAAP,EAAU;AACVT,IAAAA,OAAO,CAACS,CAAD,CAAP;AACA,UAAMrB,GAAG,CAACM,cAAc,CAAC;AAAEgB,MAAAA,KAAK,EAAEnB,GAAG,CAACkB,CAAD,EAAI,cAAJ;AAAZ,KAAD,CAAf,CAAT;AACD;AACF;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMzB,GAAG,CAAC,CAACG,UAAU,CAACM,aAAa,CAACiB,SAAf,EAA0BhB,QAA1B,CAAX,CAAD,CAAT;AACD","sourcesContent":["import { notification } from \"antd\"\nimport { all, call, put, takeLatest } from \"redux-saga/effects\"\nimport vesselServices from \"services/vessel/api\"\nimport { get } from \"lodash\"\nimport produce from \"immer\"\nimport { BaseFunctions, fetchAllSuccess, fetchAllFailed } from \"./actions\"\nimport { VesselActions, IFetchAllAction } from \"./types\"\n\nexport function* fetchAll({ payload }: IFetchAllAction) {\n  const { onStart, onSuccess, onError } = payload\n  let allData = []\n  const filter = { page: 1 }\n  onStart()\n  try {\n    while (true) {\n      const {\n        data: {\n          data,\n          meta,\n          meta: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            pager: { page_size },\n          },\n        },\n      } = yield call(vesselServices.fetchAll, filter)\n      allData = [...allData, ...data]\n      yield put(BaseFunctions.setState({ data: allData, meta }))\n      if (page_size === 0) {\n        onSuccess()\n        yield put(fetchAllSuccess())\n        break\n      }\n      filter.page += 1\n    }\n\n    yield put(fetchAllSuccess())\n  } catch (e) {\n    onError(e)\n    yield put(fetchAllFailed({ error: get(e, \"data.message\") }))\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeLatest(VesselActions.FETCH_ALL, fetchAll)])\n}\n"]},"metadata":{},"sourceType":"module"}