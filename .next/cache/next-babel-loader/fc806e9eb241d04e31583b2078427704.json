{"ast":null,"code":"import _conformsTo from \"lodash/conformsTo\";\nimport _isObject from \"lodash/isObject\";\nimport _isFunction from \"lodash/isFunction\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nexport function invariant(cond, error) {\n  if (!cond && false) {\n    throw new Error(error);\n  }\n}\nexport default function checkStore(_ref) {\n  let {\n    dispatch,\n    subscribe\n  } = _ref,\n      store = _objectWithoutProperties(_ref, [\"dispatch\", \"subscribe\"]);\n\n  const shape = {\n    getState: _isFunction,\n    replaceReducer: _isFunction,\n    runSaga: _isFunction,\n    injectedReducers: _isObject,\n    injectedSagas: _isObject\n  };\n  invariant(_conformsTo(dispatch, _isFunction) && _conformsTo(subscribe, _isFunction) && _conformsTo(store, shape), \"Injectors: Expected a valid redux store\");\n}","map":null,"metadata":{},"sourceType":"module"}