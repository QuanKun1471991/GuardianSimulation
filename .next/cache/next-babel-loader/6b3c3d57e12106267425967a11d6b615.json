{"ast":null,"code":"import _round from \"lodash/round\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport GeoJSON from \"ol/format/GeoJSON\";\nexport let MapLayers;\n\n(function (MapLayers) {\n  MapLayers[\"Vessel\"] = \"vessel\";\n  MapLayers[\"Port\"] = \"port\";\n})(MapLayers || (MapLayers = {}));\n\nconst defaultGeojsonObject = {\n  type: \"FeatureCollection\",\n  crs: {\n    type: \"name\",\n    properties: {\n      name: \"EPSG:4326\"\n    }\n  }\n};\nexport function deg2Rad(_degree) {\n  const degree = Number(_degree);\n  return degree ? degree / 180 * Math.PI : 0;\n}\nexport const CONVERT_PROJECTION = {\n  featureProjection: \"EPSG:3857\",\n  dataProjection: \"EPSG:4326\"\n};\nexport const convertCoord2LongLat = data => {\n  return ol.proj.transform(data, 'EPSG:3857', 'EPSG:4326');\n};\nexport const convertLongLat2Coords = data => {\n  return ol.proj.transform(data, 'EPSG:4326', 'EPSG:3857');\n};\nexport function convertHeadingtoDegree(heading, offset = Math.PI / 2) {\n  return _round(heading * 180 / Math.PI + offset);\n}\nexport const getHeadingRad = (_degree, offset = Math.PI / 2) => {\n  const degree = deg2Rad(_degree);\n  return degree - offset;\n};\nexport const formatPortFeatures = features => {\n  const geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features\n  });\n\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};\nexport const formatVesselFeatures = dataFeatures => {\n  const features = dataFeatures.map(feature => ({\n    properties: feature.properties,\n    geometry: feature.geometry,\n    type: \"Feature\"\n  }));\n\n  const geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features\n  });\n\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};","map":null,"metadata":{},"sourceType":"module"}