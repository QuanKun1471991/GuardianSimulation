{"ast":null,"code":"import _get from \"lodash/get\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { memo, useCallback, useEffect, useState } from \"react\";\nimport \"assets/styles/dashboard.scss\";\nimport { useInjectReducer } from \"core/hooks/useInjectReducer\";\nimport useInjectSaga from \"core/hooks/useInjectSaga\";\nimport vesselReducer from \"services/vessel/reducers\";\nimport portReducer from \"services/port/reducers\";\nimport vesselSaga from \"services/vessel/sagas\";\nimport portSaga from \"services/port/sagas\";\nimport { SagaInjectionModes } from \"core/constants/common\";\nimport { VesselSelector } from \"services/vessel/selectors\";\nimport { PortSelector } from \"services/port/selectors\";\nimport { fetchAll as fetchAllVessel } from \"services/vessel/actions\";\nimport { fetchAll as fetchAllPort } from \"services/port/actions\";\nimport Drawer from \"components/Drawer\";\nimport dynamic from \"next/dynamic\";\nimport { LayoutSelector } from \"../../services/layout/selectors\";\nimport { BaseFunctions } from \"services/vessel/actions\";\nvar BaseMap = dynamic(function () {\n  return import(\"components/BaseMap\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/BaseMap\")];\n    },\n    modules: [\"components/BaseMap\"]\n  }\n});\nvar VesselLayer = dynamic(function () {\n  return import(\"components/Layers/Vessel\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/Vessel\")];\n    },\n    modules: [\"components/Layers/Vessel\"]\n  }\n});\nvar PortLayer = dynamic(function () {\n  return import(\"components/Layers/Port\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/Port\")];\n    },\n    modules: [\"components/Layers/Port\"]\n  }\n});\nvar SelectedLayer = dynamic(function () {\n  return import(\"components/Layers/SelectedFeature\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/SelectedFeature\")];\n    },\n    modules: [\"components/Layers/SelectedFeature\"]\n  }\n});\nvar SimulationRoutesLayer = dynamic(function () {\n  return import(\"components/Layers/SimulationRoutes\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/SimulationRoutes\")];\n    },\n    modules: [\"components/Layers/SimulationRoutes\"]\n  }\n});\nvar SimulationReSult = dynamic(function () {\n  return import(\"components/SimulationResults\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/SimulationResults\")];\n    },\n    modules: [\"components/SimulationResults\"]\n  }\n});\nvar VesselSettings = dynamic(function () {\n  return import(\"components/VesselSettings\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/VesselSettings\")];\n    },\n    modules: [\"components/VesselSettings\"]\n  }\n});\nvar errorMessage = {\n  vessel: {\n    fetching: \"Fetching Cargo Data \",\n    fetched: \"Fetched Cargo Data successfully\"\n  },\n  port: {\n    fetching: \"Fetching Port Data\",\n    fetched: \"Fetched Port Data successfully\"\n  }\n};\n\nvar Dashboard = function Dashboard() {\n  useInjectReducer({\n    key: \"vessel\",\n    reducer: vesselReducer\n  });\n  useInjectSaga({\n    key: \"vessel\",\n    saga: vesselSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n  useInjectReducer({\n    key: \"port\",\n    reducer: portReducer\n  });\n  useInjectSaga({\n    key: \"port\",\n    saga: portSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n\n  var _useSelector = useSelector(VesselSelector),\n      veselList = _useSelector.data,\n      selectedVessel = _useSelector.selectedVessel;\n\n  var _useSelector2 = useSelector(PortSelector),\n      portList = _useSelector2.data;\n\n  var _useSelector3 = useSelector(LayoutSelector),\n      isCollapsed = _useSelector3.isCollapsed;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(null),\n      guardianMap = _useState[0],\n      setGuardianMap = _useState[1];\n\n  var _useState2 = useState(null),\n      selectedFeature = _useState2[0],\n      setSelectedFeature = _useState2[1];\n\n  var _useState3 = useState(false),\n      isShowVesselInfo = _useState3[0],\n      setIsShowVesselInfo = _useState3[1];\n\n  var name = selectedVessel.name,\n      show = selectedVessel.simulationRoutes.show;\n  var zoomAfterClick = useCallback(function (coordinates) {\n    var view = guardianMap.getView();\n    var zoom = view.getZoom();\n    view.animate({\n      zoom: zoom >= 6.5 ? zoom : 6.5,\n      center: coordinates,\n      duration: 600\n    });\n  }, [guardianMap]);\n  useEffect(function () {\n    dispatch(fetchAllVessel({\n      onStart: function onStart() {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.vessel.fetching\n        });\n      },\n      onSuccess: function onSuccess() {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.vessel.fetched\n        });\n      },\n      onError: function onError(e) {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n    dispatch(fetchAllPort({\n      onStart: function onStart() {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.port.fetching\n        });\n      },\n      onSuccess: function onSuccess() {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.port.fetched\n        });\n      },\n      onError: function onError(e) {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n  }, [dispatch]);\n  useEffect(function () {\n    var handleClickMap = function handleClickMap(e) {\n      var pixel = e.pixel;\n      var features = guardianMap.getFeaturesAtPixel(pixel);\n      var featureClicked = features[0];\n\n      if (featureClicked) {\n        if (featureClicked.get(\"click_disabled\") || !featureClicked.get(\"name\")) {\n          return null;\n        }\n\n        zoomAfterClick(e.coordinate);\n        setSelectedFeature(featureClicked);\n        setIsShowVesselInfo(true);\n        debugger;\n        dispatch(BaseFunctions.setState({\n          field: \"selectedVessel\",\n          name: featureClicked.get('name'),\n          imo: featureClicked.get('imo'),\n          mmsi: featureClicked.get('mmsi')\n        }));\n      } else {\n        setIsShowVesselInfo(false);\n      }\n    };\n\n    if (guardianMap) {\n      guardianMap.on(\"click\", handleClickMap);\n    }\n  }, [guardianMap, zoomAfterClick]);\n\n  var _handleClickSimulation = function handleClickSimulation() {\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: {\n        data: [],\n        loading: false,\n        update: false,\n        error: null,\n        show: !show\n      }\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"root\"\n  }, __jsx(\"div\", {\n    id: \"screenshot\"\n  }, __jsx(BaseMap, {\n    guardianMap: guardianMap,\n    onSetMap: setGuardianMap\n  }), __jsx(Drawer, {\n    isCollapsed: isCollapsed,\n    placement: \"bottom\",\n    visible: isShowVesselInfo,\n    title: \"Simulation Points\"\n  }, __jsx(SimulationReSult, {\n    selectedVessel: selectedVessel\n  }))), guardianMap && __jsx(React.Fragment, null, __jsx(VesselLayer, {\n    selectedVessel: null,\n    vesselList: veselList,\n    guardianMap: guardianMap\n  }), __jsx(PortLayer, {\n    selectedPort: null,\n    portList: portList,\n    guardianMap: guardianMap\n  }), __jsx(SelectedLayer, {\n    selectedFeature: selectedFeature,\n    guardianMap: guardianMap\n  }), __jsx(SimulationRoutesLayer, {\n    guardianMap: guardianMap,\n    selectedVessel: selectedVessel\n  }), __jsx(VesselSettings, {\n    show: name,\n    handleClickSimulation: function handleClickSimulation() {\n      return _handleClickSimulation();\n    }\n  })));\n};\n\nexport default /*#__PURE__*/memo(Dashboard);","map":null,"metadata":{},"sourceType":"module"}