{"ast":null,"code":"import _compact from \"lodash/compact\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SimulationRoutes/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport SimulationSettings from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map';\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { simulationFormatMessage, aisFakeMessage } from 'core/model/Vessel';\nimport { BaseFunctions } from \"services/vessel/actions\";\nvar vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON()\n});\n\nvar getRotation = function getRotation(startPoint, endPoint) {\n  var dx = endPoint[0] - startPoint[0];\n  var dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nvar styleFunction = function styleFunction(feature) {\n  var geometry = feature.getGeometry();\n  var styles = [// linestring\n  new ol.style.Style({\n    stroke: new ol.style.Stroke({\n      color: '#ffcc33',\n      width: 2\n    })\n  })];\n  geometry.forEachSegment(function (start, end) {\n    var rotation = getRotation(start, end);\n    console.log('rotation' + rotation); // arrows\n\n    styles.push(new ol.style.Style({\n      geometry: new ol.geom.Point(end),\n      image: new ol.style.Icon({\n        src: 'icons/arrow.png',\n        anchor: [0.75, 0.5],\n        rotateWithView: true,\n        rotation: rotation\n      })\n    }));\n  });\n  return styles;\n};\n\nfunction Index(_ref) {\n  _s();\n\n  var guardianMap = _ref.guardianMap,\n      selectedVessel = _ref.selectedVessel;\n  var dispatch = useDispatch();\n\n  var _useState = useState(new ol.Feature()),\n      currentFeature = _useState[0],\n      setCurrentFeature = _useState[1];\n\n  var _useState2 = useState(null),\n      firstCoord = _useState2[0],\n      setFirstCoord = _useState2[1];\n\n  var _selectedVessel$simul = selectedVessel.simulationRoutes,\n      update = _selectedVessel$simul.update,\n      SimulationRoutesData = _selectedVessel$simul.data;\n  var showSimulationRoutes = true;\n  var createdAtTime = moment().toString();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      openDialog = _React$useState2[0],\n      setOpenDialog = _React$useState2[1];\n\n  var draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString'\n  });\n  var simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction\n  });\n  useEffect(function () {\n    var increaseMinutes = 0;\n\n    if (showSimulationRoutes && selectedVessel.name) {\n      guardianMap.addLayer(simulationLayer);\n      guardianMap.addInteraction(draw);\n    }\n\n    if (!showSimulationRoutes) {\n      guardianMap.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      guardianMap.removeLayer(simulationLayer);\n    }\n\n    draw.on('drawend', function (evt) {\n      var feature = evt.feature;\n      var coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      var simulationData = coords.map(function (coordinate, index) {\n        if (index !== 0) {\n          var heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          var longLatCoord = convertCoord2LongLat(coordinate);\n          var timeStamp = formatDateTimeUTC(moment(createdAtTime).add(increaseMinutes, 'minutes').toString(), YYYY_MM_DD_HH_MM_SS);\n          var message = simulationFormatMessage({\n            heading: heading,\n            longLatCoord: longLatCoord,\n            timeStamp: timeStamp\n          });\n          increaseMinutes += 5;\n          return message;\n        }\n      });\n      dispatch(BaseFunctions.setState({\n        field: \"selectedVessel\",\n        simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n          data: _compact(simulationData)\n        })\n      }));\n      setCurrentFeature(feature);\n    });\n  }, [showSimulationRoutes, selectedVessel.name]);\n  useEffect(function () {\n    if (currentFeature && update) {\n      var source = simulationLayer.getSource();\n      var coords = SimulationRoutesData.map(function (record) {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      var updateCoords = [firstCoord].concat(coords);\n      var geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n      var simulationData = geometry.getCoordinates().map(function (coordinate, index) {\n        if (index !== 0) {\n          var heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          var longLatCoord = convertCoord2LongLat(coordinate);\n          var timeStamp = SimulationRoutesData[index - 1].timestamp;\n          var speed = SimulationRoutesData[index - 1].speed;\n          var created_at = SimulationRoutesData[index - 1].created_at;\n          var message = simulationFormatMessage({\n            heading: heading,\n            longLatCoord: longLatCoord,\n            timeStamp: timeStamp,\n            speed: speed,\n            created_at: created_at\n          });\n          return message;\n        }\n      });\n      dispatch(BaseFunctions.setState({\n        field: \"selectedVessel\",\n        simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n          update: !update,\n          data: _compact(simulationData)\n        })\n      }));\n    }\n  }, [update]);\n\n  var handleClickClearDraw = function handleClickClearDraw() {\n    debugger;\n    guardianMap.getInteractions().pop();\n    guardianMap.addInteraction(draw);\n  };\n\n  var handleClickClearDrawLayer = function handleClickClearDrawLayer() {\n    debugger;\n    simulationLayer.getSource().clear();\n    guardianMap.removeLayer(simulationLayer);\n    guardianMap.addLayer(simulationLayer);\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n        data: []\n      })\n    }));\n  };\n\n  var handleClickSend = function handleClickSend() {\n    simulationLayer.getSource().clear();\n    guardianMap.removeLayer(simulationLayer);\n    guardianMap.addLayer(simulationLayer);\n    console.log(JSON.stringify(aisFakeMessage(SimulationRoutesData)));\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n        data: []\n      })\n    })); // dispatch({\n    //   type: SIMULATE,\n    //   payload: {\n    //     imo: \"123456\",\n    //     SimulationRoutesData,\n    //   },\n    // });\n\n    setOpenDialog(false);\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setOpenDialog(false);\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    setOpenDialog(true);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(SimulationSettings, {\n    handleClickClearDraw: handleClickClearDraw,\n    handleClickClearDrawLayer: handleClickClearDrawLayer,\n    handleClickSend: handleOpenDialog,\n    show: showSimulationRoutes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }), __jsx(Dialog, {\n    open: openDialog,\n    onClose: handleCloseDialog,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, __jsx(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, 'Create Simulation Data Confirmation?'), __jsx(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, __jsx(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, \"Please be aware that this simulation data will effect to voyage of current vessel, it is recommended to use on a fake vessel which is not belong to our customer, will you continue?\")), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: handleCloseDialog,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    onClick: handleClickSend,\n    color: \"primary\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\n_s(Index, \"lVAerELfP+CVgKPmWT7t3yvwGnI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SimulationRoutes/index.tsx"],"names":["useDispatch","useEffect","useState","React","SimulationSettings","convertCoord2LongLat","convertHeadingtoDegree","convertLongLat2Coords","formatDateTimeUTC","YYYY_MM_DD_HH_MM_SS","moment","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","simulationFormatMessage","aisFakeMessage","BaseFunctions","vectorSource","ol","source","Vector","format","GeoJSON","getRotation","startPoint","endPoint","dx","dy","Math","atan2","styleFunction","feature","geometry","getGeometry","styles","style","Style","stroke","Stroke","color","width","forEachSegment","start","end","rotation","console","log","push","geom","Point","image","Icon","src","anchor","rotateWithView","Index","guardianMap","selectedVessel","dispatch","Feature","currentFeature","setCurrentFeature","firstCoord","setFirstCoord","simulationRoutes","update","SimulationRoutesData","data","showSimulationRoutes","createdAtTime","toString","openDialog","setOpenDialog","draw","interaction","Draw","type","simulationLayer","layer","increaseMinutes","name","addLayer","addInteraction","getInteractions","pop","getSource","clear","removeLayer","on","evt","coords","getCoordinates","simulationData","map","coordinate","index","heading","longLatCoord","timeStamp","add","message","setState","field","record","longitude","latitude","updateCoords","concat","setCoordinates","addFeature","timestamp","speed","created_at","handleClickClearDraw","handleClickClearDrawLayer","handleClickSend","JSON","stringify","handleCloseDialog","handleOpenDialog"],"mappings":"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","sourcesContent":["import { connect, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport { flowRight, compact } from 'lodash';\nimport SimulationSettings from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map';\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { simulationFormatMessage, aisFakeMessage } from 'core/model/Vessel';\nimport Map from \"ol/Map\"\nimport {BaseFunctions} from \"services/vessel/actions\"\n\n\nconst vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON(),\n});\n\nconst getRotation = (startPoint: any, endPoint: any) => {\n  const dx = endPoint[0] - startPoint[0];\n  const dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nconst styleFunction = (feature: any) => {\n  const geometry = feature.getGeometry();\n  const styles = [\n    // linestring\n    new ol.style.Style({\n      stroke: new ol.style.Stroke({\n        color: '#ffcc33',\n        width: 2,\n      }),\n    }),\n  ];\n\n  geometry.forEachSegment(function(start: any, end: any) {\n    const rotation = getRotation(start, end);\n    console.log('rotation' + rotation);\n    // arrows\n    styles.push(\n      new ol.style.Style({\n        geometry: new ol.geom.Point(end),\n        image: new ol.style.Icon({\n          src: 'icons/arrow.png',\n          anchor: [0.75, 0.5],\n          rotateWithView: true,\n          rotation: rotation,\n        }),\n      }),\n    );\n  });\n\n  return styles;\n};\n\ninterface simulationRoutesProps {\n  guardianMap: Map\n  selectedVessel: any\n}\n\nfunction Index({guardianMap , selectedVessel }: simulationRoutesProps) {\n  const dispatch = useDispatch()\n  const [currentFeature, setCurrentFeature] = useState(new ol.Feature());\n  const [firstCoord, setFirstCoord] = useState(null);\n  const {\n    simulationRoutes: { update, data: SimulationRoutesData },\n  } = selectedVessel;\n  const showSimulationRoutes = true\n  const createdAtTime = moment().toString();\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString',\n  });\n\n  const simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction,\n  });\n\n  useEffect(() => {\n    let increaseMinutes = 0;\n    if (showSimulationRoutes && selectedVessel.name) {\n      guardianMap.addLayer(simulationLayer);\n      guardianMap.addInteraction(draw);\n    }\n    if (!showSimulationRoutes) {\n      guardianMap.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      guardianMap.removeLayer(simulationLayer);\n    }\n\n    draw.on('drawend', function(evt: any) {\n      const feature = evt.feature;\n      const coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      const simulationData = coords.map((coordinate: any, index: number) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = formatDateTimeUTC(\n            moment(createdAtTime)\n              .add(increaseMinutes, 'minutes')\n              .toString(),\n            YYYY_MM_DD_HH_MM_SS,\n          );\n          const message = simulationFormatMessage({ heading, longLatCoord, timeStamp });\n          increaseMinutes += 5;\n\n          return message;\n        }\n      });\n\n      dispatch(BaseFunctions.setState({\n        field: \"selectedVessel\",\n        simulationRoutes: {\n          ...selectedVessel.simulationRoutes,\n          data: compact(simulationData),\n        },\n      }))\n\n      setCurrentFeature(feature);\n    });\n  }, [showSimulationRoutes, selectedVessel.name]);\n\n  useEffect(() => {\n    if (currentFeature && update) {\n      const source = simulationLayer.getSource();\n      const coords = SimulationRoutesData.map((record: any) => {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      const updateCoords = [firstCoord].concat(coords);\n      const geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n\n      const simulationData = geometry.getCoordinates().map((coordinate: any, index: number) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = SimulationRoutesData[index - 1].timestamp;\n          const speed = SimulationRoutesData[index - 1].speed;\n          const created_at = SimulationRoutesData[index - 1].created_at;\n          const message = simulationFormatMessage({ heading, longLatCoord, timeStamp, speed, created_at });\n\n          return message;\n        }\n      });\n\n      dispatch(BaseFunctions.setState({\n        field: \"selectedVessel\",\n        simulationRoutes: {\n          ...selectedVessel.simulationRoutes,\n          update: !update,\n          data: compact(simulationData),\n        },\n      }))\n\n    }\n  }, [update]);\n\n  const handleClickClearDraw = () => {\n    debugger\n    guardianMap.getInteractions().pop();\n    guardianMap.addInteraction(draw);\n  };\n\n  const handleClickClearDrawLayer = () => {\n    debugger\n    simulationLayer.getSource().clear();\n    guardianMap.removeLayer(simulationLayer);\n    guardianMap.addLayer(simulationLayer);\n\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: {\n        ...selectedVessel.simulationRoutes,\n        data: [],\n      },\n    }))\n  };\n\n  const handleClickSend = () => {\n    simulationLayer.getSource().clear();\n    guardianMap.removeLayer(simulationLayer);\n    guardianMap.addLayer(simulationLayer);\n    console.log(JSON.stringify(aisFakeMessage(SimulationRoutesData)));\n  \n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: {\n        ...selectedVessel.simulationRoutes,\n        data: [],\n      },\n    }))\n    // dispatch({\n    //   type: SIMULATE,\n    //   payload: {\n    //     imo: \"123456\",\n    //     SimulationRoutesData,\n    //   },\n    // });\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n  \n  return (\n    <>\n      <SimulationSettings\n        handleClickClearDraw={handleClickClearDraw}\n        handleClickClearDrawLayer={handleClickClearDrawLayer}\n        handleClickSend={handleOpenDialog}\n        show={showSimulationRoutes}\n      />\n      <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{'Create Simulation Data Confirmation?'}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Please be aware that this simulation data will effect to voyage of current vessel, it is recommended to use\n            on a fake vessel which is not belong to our customer, will you continue?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClickSend} color=\"primary\" autoFocus>\n            Send\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}