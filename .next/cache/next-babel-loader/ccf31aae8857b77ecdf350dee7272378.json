{"ast":null,"code":"import _get from \"lodash/get\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nvar _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/pages/dashboard/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { memo, useCallback, useEffect, useState } from \"react\";\nimport \"assets/styles/dashboard.scss\";\nimport { useInjectReducer } from \"core/hooks/useInjectReducer\";\nimport useInjectSaga from \"core/hooks/useInjectSaga\";\nimport vesselReducer from \"services/vessel/reducers\";\nimport portReducer from \"services/port/reducers\";\nimport vesselSaga from \"services/vessel/sagas\";\nimport portSaga from \"services/port/sagas\";\nimport { SagaInjectionModes } from \"core/constants/common\";\nimport { VesselSelector } from \"services/vessel/selectors\";\nimport { PortSelector } from \"services/port/selectors\";\nimport { fetchAll as fetchAllVessel } from \"services/vessel/actions\";\nimport { fetchAll as fetchAllPort } from \"services/port/actions\";\nimport Drawer from \"components/Drawer\";\nimport dynamic from \"next/dynamic\";\nimport { LayoutSelector } from \"../../services/layout/selectors\";\nconst BaseMap = dynamic(() => import(\"components/BaseMap\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/BaseMap\")],\n    modules: [\"components/BaseMap\"]\n  }\n});\nconst VesselLayer = dynamic(() => import(\"components/Layers/Vessel\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/Vessel\")],\n    modules: [\"components/Layers/Vessel\"]\n  }\n});\nconst PortLayer = dynamic(() => import(\"components/Layers/Port\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/Port\")],\n    modules: [\"components/Layers/Port\"]\n  }\n});\nconst SelectedLayer = dynamic(() => import(\"components/Layers/SelectedFeature\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/SelectedFeature\")],\n    modules: [\"components/Layers/SelectedFeature\"]\n  }\n});\nconst errorMessage = {\n  vessel: {\n    fetching: \"Fetching Cargo Data \",\n    fetched: \"Fetched Cargo Data successfully\"\n  },\n  port: {\n    fetching: \"Fetching Port Data\",\n    fetched: \"Fetched Port Data successfully\"\n  }\n};\n\nconst Dashboard = () => {\n  useInjectReducer({\n    key: \"vessel\",\n    reducer: vesselReducer\n  });\n  useInjectSaga({\n    key: \"vessel\",\n    saga: vesselSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n  useInjectReducer({\n    key: \"port\",\n    reducer: portReducer\n  });\n  useInjectSaga({\n    key: \"port\",\n    saga: portSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n  const {\n    data: veselList\n  } = useSelector(VesselSelector);\n  const {\n    data: portList\n  } = useSelector(PortSelector);\n  const {\n    isCollapsed\n  } = useSelector(LayoutSelector);\n  const dispatch = useDispatch();\n  const {\n    0: guardianMap,\n    1: setGuardianMap\n  } = useState(null);\n  const {\n    0: selectedFeature,\n    1: setSelectedFeature\n  } = useState(null);\n  const {\n    0: isShowVesselInfo,\n    1: setIsShowVesselInfo\n  } = useState(false);\n  const zoomAfterClick = useCallback(coordinates => {\n    const view = guardianMap.getView();\n    const zoom = view.getZoom();\n    view.animate({\n      zoom: zoom >= 6.5 ? zoom : 6.5,\n      center: coordinates,\n      duration: 600\n    });\n  }, [guardianMap]);\n  useEffect(() => {\n    dispatch(fetchAllVessel({\n      onStart: () => {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.vessel.fetching\n        });\n      },\n      onSuccess: () => {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.vessel.fetched\n        });\n      },\n      onError: e => {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n    dispatch(fetchAllPort({\n      onStart: () => {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.port.fetching\n        });\n      },\n      onSuccess: () => {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.port.fetched\n        });\n      },\n      onError: e => {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n  }, [dispatch]);\n  useEffect(() => {\n    const handleClickMap = e => {\n      const {\n        pixel\n      } = e;\n      const features = guardianMap.getFeaturesAtPixel(pixel);\n      const featureClicked = features[0];\n\n      if (featureClicked) {\n        if (featureClicked.get(\"click_disabled\")) {\n          return null;\n        }\n\n        zoomAfterClick(e.coordinate);\n        setSelectedFeature(featureClicked);\n        setIsShowVesselInfo(true);\n      } else {\n        setIsShowVesselInfo(false);\n      }\n    };\n\n    if (guardianMap) {\n      guardianMap.on(\"click\", handleClickMap);\n    }\n  }, [guardianMap, zoomAfterClick]);\n  return __jsx(\"div\", {\n    className: \"root\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    id: \"screenshot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, __jsx(BaseMap, {\n    guardianMap: guardianMap,\n    onSetMap: setGuardianMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), __jsx(Drawer, {\n    isCollapsed: isCollapsed,\n    placement: \"bottom\",\n    visible: isShowVesselInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })), guardianMap && __jsx(React.Fragment, null, __jsx(VesselLayer, {\n    vesselList: veselList,\n    guardianMap: guardianMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }), __jsx(PortLayer, {\n    portList: portList,\n    guardianMap: guardianMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }), __jsx(SelectedLayer, {\n    selectedFeature: selectedFeature,\n    guardianMap: guardianMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default /*#__PURE__*/memo(Dashboard);","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/pages/dashboard/index.tsx"],"names":["useDispatch","useSelector","memo","useCallback","useEffect","useState","useInjectReducer","useInjectSaga","vesselReducer","portReducer","vesselSaga","portSaga","SagaInjectionModes","VesselSelector","PortSelector","fetchAll","fetchAllVessel","fetchAllPort","Drawer","dynamic","LayoutSelector","BaseMap","ssr","VesselLayer","PortLayer","SelectedLayer","errorMessage","vessel","fetching","fetched","port","Dashboard","key","reducer","saga","mode","RESTART_ON_REMOUNT","data","veselList","portList","isCollapsed","dispatch","guardianMap","setGuardianMap","selectedFeature","setSelectedFeature","isShowVesselInfo","setIsShowVesselInfo","zoomAfterClick","coordinates","view","getView","zoom","getZoom","animate","center","duration","onStart","info","message","description","onSuccess","success","onError","e","error","handleClickMap","pixel","features","getFeaturesAtPixel","featureClicked","get","coordinate","on"],"mappings":"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","sourcesContent":["import { NextPage } from \"next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { memo, useCallback, useEffect, useState } from \"react\"\nimport { getCurrentUser } from \"services/auth/actions\"\nimport \"assets/styles/dashboard.scss\"\nimport { useInjectReducer } from \"core/hooks/useInjectReducer\"\nimport useInjectSaga from \"core/hooks/useInjectSaga\"\nimport vesselReducer from \"services/vessel/reducers\"\nimport portReducer from \"services/port/reducers\"\nimport vesselSaga from \"services/vessel/sagas\"\nimport portSaga from \"services/port/sagas\"\nimport { SagaInjectionModes } from \"core/constants/common\"\nimport { VesselSelector } from \"services/vessel/selectors\"\nimport { PortSelector } from \"services/port/selectors\"\nimport { fetchAll as fetchAllVessel } from \"services/vessel/actions\"\nimport { fetchAll as fetchAllPort } from \"services/port/actions\"\nimport { notification } from \"antd\"\nimport { get } from \"lodash\"\nimport Drawer from \"components/Drawer\"\nimport dynamic from \"next/dynamic\"\nimport { LayoutSelector } from \"../../services/layout/selectors\"\n\nconst BaseMap = dynamic(() => import(\"components/BaseMap\"), { ssr: false })\nconst VesselLayer = dynamic(() => import(\"components/Layers/Vessel\"), { ssr: false })\nconst PortLayer = dynamic(() => import(\"components/Layers/Port\"), { ssr: false })\nconst SelectedLayer = dynamic(() => import(\"components/Layers/SelectedFeature\"), { ssr: false })\n\nconst errorMessage = {\n  vessel: {\n    fetching: \"Fetching Cargo Data \",\n    fetched: \"Fetched Cargo Data successfully\",\n  },\n  port: {\n    fetching: \"Fetching Port Data\",\n    fetched: \"Fetched Port Data successfully\",\n  },\n}\n\nconst Dashboard: NextPage = () => {\n  useInjectReducer({ key: \"vessel\", reducer: vesselReducer })\n  useInjectSaga({ key: \"vessel\", saga: vesselSaga, mode: SagaInjectionModes.RESTART_ON_REMOUNT })\n  useInjectReducer({ key: \"port\", reducer: portReducer })\n  useInjectSaga({ key: \"port\", saga: portSaga, mode: SagaInjectionModes.RESTART_ON_REMOUNT })\n\n  const { data: veselList } = useSelector(VesselSelector)\n  const { data: portList } = useSelector(PortSelector)\n  const { isCollapsed } = useSelector(LayoutSelector)\n  const dispatch = useDispatch()\n  const [guardianMap, setGuardianMap] = useState(null)\n  const [selectedFeature, setSelectedFeature] = useState(null)\n  const [isShowVesselInfo, setIsShowVesselInfo] = useState(false)\n\n  const zoomAfterClick = useCallback(\n    (coordinates: []) => {\n      const view = guardianMap.getView()\n      const zoom = view.getZoom()\n      view.animate({ zoom: zoom >= 6.5 ? zoom : 6.5, center: coordinates, duration: 600 })\n    },\n    [guardianMap]\n  )\n\n  useEffect(() => {\n    dispatch(\n      fetchAllVessel({\n        onStart: () => {\n          notification.info({\n            message: \"Info\",\n            description: errorMessage.vessel.fetching,\n          })\n        },\n        onSuccess: () => {\n          notification.success({\n            message: \"Success\",\n            description: errorMessage.vessel.fetched,\n          })\n        },\n        onError: (e) => {\n          notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n        },\n      })\n    )\n    dispatch(\n      fetchAllPort({\n        onStart: () => {\n          notification.info({\n            message: \"Info\",\n            description: errorMessage.port.fetching,\n          })\n        },\n        onSuccess: () => {\n          notification.success({\n            message: \"Success\",\n            description: errorMessage.port.fetched,\n          })\n        },\n        onError: (e) => {\n          notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n        },\n      })\n    )\n  }, [dispatch])\n  useEffect(() => {\n    const handleClickMap = (e) => {\n      const { pixel } = e\n      const features = guardianMap.getFeaturesAtPixel(pixel)\n      const featureClicked = features[0]\n      if (featureClicked) {\n        if (featureClicked.get(\"click_disabled\")) {\n          return null\n        }\n        zoomAfterClick(e.coordinate)\n        setSelectedFeature(featureClicked)\n        setIsShowVesselInfo(true)\n      } else {\n        setIsShowVesselInfo(false)\n      }\n    }\n    if (guardianMap) {\n      guardianMap.on(\"click\", handleClickMap)\n    }\n  }, [guardianMap, zoomAfterClick])\n  return (\n    <div className=\"root\">\n      <div id=\"screenshot\">\n        <BaseMap guardianMap={guardianMap} onSetMap={setGuardianMap} />\n        <Drawer isCollapsed={isCollapsed} placement=\"bottom\" visible={isShowVesselInfo} />\n        {/* <Drawer isCollapsed={isCollapsed} placement=\"right\" visible={isShowVesselInfo} /> */}\n      </div>\n      {guardianMap && (\n        <>\n          <VesselLayer vesselList={veselList} guardianMap={guardianMap} />\n          <PortLayer portList={portList} guardianMap={guardianMap} />\n          <SelectedLayer selectedFeature={selectedFeature} guardianMap={guardianMap} />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default memo(Dashboard)\n"]},"metadata":{},"sourceType":"module"}