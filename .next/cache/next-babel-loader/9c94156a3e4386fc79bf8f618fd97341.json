{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getCurrentUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { notification } from \"antd\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport authServices from \"services/auth/api\";\nimport { get } from \"lodash\";\nimport { BaseFunctions, loginFailed, loginSuccess, logoutSuccess, logoutFailed } from \"./actions\";\nimport { AuthActions } from \"./types\";\nexport function login(_ref) {\n  var payload;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.next = 3;\n          return put(BaseFunctions.setState({\n            loading: true\n          }));\n\n        case 3:\n          _context.prev = 3;\n          _context.next = 6;\n          return call(authServices.login, payload);\n\n        case 6:\n          _context.next = 8;\n          return put(loginSuccess());\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](3);\n          notification.error({\n            message: \"Error\",\n            description: get(_context.t0, \"data.message\")\n          });\n          _context.next = 15;\n          return put(loginFailed({\n            error: get(_context.t0, \"data.message\")\n          }));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 10]]);\n}\nexport function logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(BaseFunctions.setState({\n            loading: true\n          }));\n\n        case 2:\n          _context2.prev = 2;\n          _context2.next = 5;\n          return call(authServices.logout);\n\n        case 5:\n          _context2.next = 7;\n          return put(logoutSuccess());\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](2);\n          notification.error({\n            message: \"Error\",\n            description: get(_context2.t0, \"data.message\")\n          });\n          _context2.next = 14;\n          return put(logoutFailed({\n            error: get(_context2.t0, \"data.message\")\n          }));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 9]]);\n}\nexport function getCurrentUser() {\n  var data;\n  return _regeneratorRuntime.wrap(function getCurrentUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return put(BaseFunctions.setState({\n            authorizing: true\n          }));\n\n        case 3:\n          _context3.next = 5;\n          return call(authServices.getCurrentUser);\n\n        case 5:\n          data = _context3.sent;\n          _context3.next = 8;\n          return put(BaseFunctions.setState({\n            authorizing: false,\n            authorized: true\n          }));\n\n        case 8:\n          _context3.next = 16;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put(loginFailed({\n            error: get(_context3.t0, \"data.message\")\n          }));\n\n        case 14:\n          _context3.next = 16;\n          return put(BaseFunctions.setState({\n            authorizing: false,\n            authorized: false\n          }));\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeLatest(AuthActions.LOGIN, login), takeLatest(AuthActions.LOGOUT, logout), takeLatest(AuthActions.GET_CURRENT_USER, getCurrentUser)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/auth/sagas.ts"],"names":["login","logout","getCurrentUser","rootSaga","notification","all","call","put","takeLatest","authServices","get","BaseFunctions","loginFailed","loginSuccess","logoutSuccess","logoutFailed","AuthActions","payload","setState","loading","error","message","description","authorizing","data","authorized","LOGIN","LOGOUT","GET_CURRENT_USER"],"mappings":"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","sourcesContent":["import { notification } from \"antd\"\nimport { all, call, put, takeLatest } from \"redux-saga/effects\"\nimport authServices from \"services/auth/api\"\nimport { get } from \"lodash\"\nimport { BaseFunctions, loginFailed, loginSuccess, logoutSuccess, logoutFailed } from \"./actions\"\nimport { AuthActions, ILoginAction } from \"./types\"\n\nexport function* login({ payload }: ILoginAction) {\n  yield put(BaseFunctions.setState({ loading: true }))\n  try {\n    yield call(authServices.login, payload)\n    yield put(loginSuccess())\n  } catch (e) {\n    notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n    yield put(loginFailed({ error: get(e, \"data.message\") }))\n  }\n}\n\nexport function* logout() {\n  yield put(BaseFunctions.setState({ loading: true }))\n  try {\n    yield call(authServices.logout)\n    yield put(logoutSuccess())\n  } catch (e) {\n    notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n    yield put(logoutFailed({ error: get(e, \"data.message\") }))\n  }\n}\n\nexport function* getCurrentUser() {\n  try {\n    yield put(BaseFunctions.setState({ authorizing: true }))\n    const data = yield call(authServices.getCurrentUser)\n    yield put(BaseFunctions.setState({ authorizing: false, authorized: true }))\n  } catch (e) {\n    yield put(loginFailed({ error: get(e, \"data.message\") }))\n    yield put(BaseFunctions.setState({ authorizing: false, authorized: false }))\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeLatest(AuthActions.LOGIN, login),\n    takeLatest(AuthActions.LOGOUT, logout),\n    takeLatest(AuthActions.GET_CURRENT_USER, getCurrentUser),\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}