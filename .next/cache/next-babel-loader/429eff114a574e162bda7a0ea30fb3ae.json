{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport authSagas from \"services/auth/sagas\";\nimport createReducer from \"services/reducers\";\n\nfunction createInjectorsEnhancer(params) {\n  return function (createInjectorStore) {\n    return function () {\n      var store = createInjectorStore.apply(void 0, arguments);\n      return _objectSpread(_objectSpread({}, store), {}, {\n        createReducer: params.createReducer,\n        runSaga: params.runSaga,\n        injectedReducers: {},\n        // Reducer registry\n        injectedSagas: {} // Saga registry\n\n      });\n    };\n  };\n}\n\nfunction forceReducerReload(_ref) {\n  var injectedReducers = _ref.injectedReducers,\n      replaceReducer = _ref.replaceReducer;\n  replaceReducer(createReducer(injectedReducers));\n}\n\nvar makeStore = function makeStore() {\n  var composeEnhancers = compose;\n  var sagaMiddleware = createSagaMiddleware();\n  var composeMiddleware = false || !true ? compose(applyMiddleware(sagaMiddleware)) : compose(applyMiddleware(sagaMiddleware), applyMiddleware(logger));\n  var runSaga = sagaMiddleware.run;\n  var enhancers = [composeMiddleware, createInjectorsEnhancer({\n    createReducer: createReducer,\n    runSaga: runSaga\n  })];\n  var store = createStore(createReducer(), composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {\n    auth: {\n      task: store.runSaga(authSagas, {})\n    } // vessel: { task: store.runSaga(vesslSagas, {}) },\n\n  }; // Saga registry\n\n  if (module.hot) {\n    module.hot.accept(\"services/reducers\", function () {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n};\n\nexport var ReduxWrapper = createWrapper(makeStore, {\n  debug: process.env.REDUX_DEBUG === \"true\"\n});","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/store.ts"],"names":["createWrapper","applyMiddleware","compose","createStore","logger","createSagaMiddleware","authSagas","createReducer","createInjectorsEnhancer","params","createInjectorStore","store","runSaga","injectedReducers","injectedSagas","forceReducerReload","replaceReducer","makeStore","composeEnhancers","sagaMiddleware","composeMiddleware","run","enhancers","auth","task","module","hot","accept","ReduxWrapper","debug","process","env","REDUX_DEBUG"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAAyC,oBAAzC;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAA6D,OAA7D;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiD,YAAjD;AACA,OAAOC,SAAP,MAA0C,qBAA1C;AAEA,OAAOC,aAAP,MAA0B,mBAA1B;;AAUA,SAASC,uBAAT,CAAiCC,MAAjC,EAA8C;AAC5C,SAAO,UAACC,mBAAD;AAAA,WAA8B,YAAoB;AACvD,UAAMC,KAAK,GAAGD,mBAAmB,MAAnB,mBAAd;AAEA,6CACKC,KADL;AAEEJ,QAAAA,aAAa,EAAEE,MAAM,CAACF,aAFxB;AAGEK,QAAAA,OAAO,EAAEH,MAAM,CAACG,OAHlB;AAIEC,QAAAA,gBAAgB,EAAE,EAJpB;AAIwB;AACtBC,QAAAA,aAAa,EAAE,EALjB,CAKqB;;AALrB;AAOD,KAVM;AAAA,GAAP;AAWD;;AAED,SAASC,kBAAT,OAAiF;AAAA,MAAnDF,gBAAmD,QAAnDA,gBAAmD;AAAA,MAAjCG,cAAiC,QAAjCA,cAAiC;AAC/EA,EAAAA,cAAc,CAACT,aAAa,CAACM,gBAAD,CAAd,CAAd;AACD;;AAED,IAAMI,SAA+B,GAAG,SAAlCA,SAAkC,GAAM;AAC5C,MAAMC,gBAAgB,GAAGhB,OAAzB;AAEA,MAAMiB,cAAc,GAAGd,oBAAoB,EAA3C;AAEA,MAAMe,iBAAiB,GACrB,SAAyC,KAAzC,GACIlB,OAAO,CAACD,eAAe,CAACkB,cAAD,CAAhB,CADX,GAEIjB,OAAO,CAACD,eAAe,CAACkB,cAAD,CAAhB,EAAkClB,eAAe,CAACG,MAAD,CAAjD,CAHb;AAL4C,MAU/BQ,OAV+B,GAUnBO,cAVmB,CAUpCE,GAVoC;AAY5C,MAAMC,SAAS,GAAG,CAChBF,iBADgB,EAEhBZ,uBAAuB,CAAC;AACtBD,IAAAA,aAAa,EAAbA,aADsB;AAEtBK,IAAAA,OAAO,EAAPA;AAFsB,GAAD,CAFP,CAAlB;AAQA,MAAMD,KAAgB,GAAGR,WAAW,CAACI,aAAa,EAAd,EAAkBW,gBAAgB,MAAhB,SAAoBI,SAApB,CAAlB,CAApC,CApB4C,CAsB5C;;AACAX,EAAAA,KAAK,CAACC,OAAN,GAAgBO,cAAc,CAACE,GAA/B;AACAV,EAAAA,KAAK,CAACE,gBAAN,GAAyB,EAAzB,CAxB4C,CAwBhB;;AAC5BF,EAAAA,KAAK,CAACG,aAAN,GAAsB;AACpBS,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAEb,KAAK,CAACC,OAAN,CAAcN,SAAd,EAAyB,EAAzB;AAAR,KADc,CAEpB;;AAFoB,GAAtB,CAzB4C,CA4B1C;;AAEF,MAAImB,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,mBAAlB,EAAuC,YAAM;AAC3CZ,MAAAA,kBAAkB,CAACJ,KAAD,CAAlB;AACD,KAFD;AAGD;;AAED,SAAOA,KAAP;AACD,CArCD;;AAuCA,OAAO,IAAMiB,YAAY,GAAG5B,aAAa,CAAYiB,SAAZ,EAAuB;AAC9DY,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,WAAZ,KAA4B;AAD2B,CAAvB,CAAlC","sourcesContent":["import { createWrapper, MakeStore } from \"next-redux-wrapper\"\nimport { applyMiddleware, compose, createStore, Store } from \"redux\"\nimport { logger } from \"redux-logger\"\nimport createSagaMiddleware, { Saga, Task } from \"redux-saga\"\nimport authSagas, { getCurrentUser } from \"services/auth/sagas\"\nimport vesslSagas from \"services/vessel/sagas\"\nimport createReducer from \"services/reducers\"\nimport { IAppState, InjectedStore } from \"types/redux\"\n\nexport interface SagaStore extends Store {\n  sagaTask?: Task\n  injectedReducers?: any\n  injectedSagas?: any\n  runSaga?(saga: Saga<any[]> | undefined, args: any | undefined): any\n}\n\nfunction createInjectorsEnhancer(params: any) {\n  return (createInjectorStore: any) => (...args: any[]) => {\n    const store = createInjectorStore(...args)\n\n    return {\n      ...store,\n      createReducer: params.createReducer,\n      runSaga: params.runSaga,\n      injectedReducers: {}, // Reducer registry\n      injectedSagas: {}, // Saga registry\n    }\n  }\n}\n\nfunction forceReducerReload({ injectedReducers, replaceReducer }: InjectedStore) {\n  replaceReducer(createReducer(injectedReducers))\n}\n\nconst makeStore: MakeStore<IAppState> = () => {\n  const composeEnhancers = compose\n\n  const sagaMiddleware = createSagaMiddleware()\n\n  const composeMiddleware =\n    process.env.NODE_ENV === \"production\" || !process.browser\n      ? compose(applyMiddleware(sagaMiddleware))\n      : compose(applyMiddleware(sagaMiddleware), applyMiddleware(logger))\n\n  const { run: runSaga } = sagaMiddleware\n\n  const enhancers = [\n    composeMiddleware,\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ]\n\n  const store: SagaStore = createStore(createReducer(), composeEnhancers(...enhancers))\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run\n  store.injectedReducers = {} // Reducer registry\n  store.injectedSagas = {\n    auth: { task: store.runSaga(authSagas, {}) },\n    // vessel: { task: store.runSaga(vesslSagas, {}) },\n  } // Saga registry\n\n  if (module.hot) {\n    module.hot.accept(\"services/reducers\", () => {\n      forceReducerReload(store)\n    })\n  }\n\n  return store\n}\n\nexport const ReduxWrapper = createWrapper<IAppState>(makeStore, {\n  debug: process.env.REDUX_DEBUG === \"true\",\n})\n"]},"metadata":{},"sourceType":"module"}