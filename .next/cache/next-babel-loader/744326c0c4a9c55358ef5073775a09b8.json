{"ast":null,"code":"import _flowRight from \"lodash/flowRight\";\nimport _compact from \"lodash/compact\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SimulationRoutes/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport { SimulationSettings } from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map';\nimport { SET_STATE, SIMULATE } from 'redux/cargoMap/actions';\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment'; // import Button from '@material-ui/core/Button';\n// import Dialog from '@material-ui/core/Dialog';\n// import DialogActions from '@material-ui/core/DialogActions';\n// import DialogContent from '@material-ui/core/DialogContent';\n// import DialogContentText from '@material-ui/core/DialogContentText';\n// import DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { simulationFormatMessage, aisFakeMessage } from 'core/model/Vessel';\nvar vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON()\n});\n\nvar getRotation = function getRotation(startPoint, endPoint) {\n  var dx = endPoint[0] - startPoint[0];\n  var dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nvar styleFunction = function styleFunction(feature) {\n  var geometry = feature.getGeometry();\n  var styles = [// linestring\n  new ol.style.Style({\n    stroke: new ol.style.Stroke({\n      color: '#ffcc33',\n      width: 2\n    })\n  })];\n  geometry.forEachSegment(function (start, end) {\n    var rotation = getRotation(start, end);\n    console.log('rotation' + rotation); // arrows\n\n    styles.push(new ol.style.Style({\n      geometry: new ol.geom.Point(end),\n      image: new ol.style.Icon({\n        src: 'resources/icons/arrow.png',\n        anchor: [0.75, 0.5],\n        rotateWithView: true,\n        rotation: rotation\n      })\n    }));\n  });\n  return styles;\n};\n\nfunction Index(_ref) {\n  _s();\n\n  var map = _ref.map,\n      t = _ref.t,\n      dispatch = _ref.dispatch,\n      simulationRoutes = _ref.simulationRoutes,\n      props = _objectWithoutProperties(_ref, [\"map\", \"t\", \"dispatch\", \"simulationRoutes\"]);\n\n  var cargoMap = props.cargoMap,\n      latestCargoInfosData = props.latestCargoInfosData;\n  var selectedCargo = cargoMap.selectedCargo;\n\n  var _useState = useState(new ol.Feature()),\n      currentFeature = _useState[0],\n      setCurrentFeature = _useState[1];\n\n  var _useState2 = useState(null),\n      firstCoord = _useState2[0],\n      setFirstCoord = _useState2[1];\n\n  var _selectedCargo$simula = selectedCargo.simulationRoutes,\n      update = _selectedCargo$simula.update,\n      showSimulationRoutes = _selectedCargo$simula.show,\n      SimulationRoutesData = _selectedCargo$simula.data;\n  var createdAtTime = moment().toString();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      openDialog = _React$useState2[0],\n      setOpenDialog = _React$useState2[1];\n\n  var draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString'\n  });\n  var simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction\n  });\n  useEffect(function () {\n    var increaseMinutes = 0;\n\n    if (showSimulationRoutes && selectedCargo.id) {\n      map.addLayer(simulationLayer);\n      map.addInteraction(draw);\n    }\n\n    if (!showSimulationRoutes) {\n      map.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      map.removeLayer(simulationLayer);\n    }\n\n    draw.on('drawend', function (evt) {\n      var feature = evt.feature;\n      var coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      var simulationData = coords.map(function (coordinate, index) {\n        if (index !== 0) {\n          var heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          var longLatCoord = convertCoord2LongLat(coordinate);\n          var timeStamp = formatDateTimeUTC(moment(createdAtTime).add(increaseMinutes, 'minutes').toString(), YYYY_MM_DD_HH_MM_SS);\n          var message = simulationFormatMessage({\n            heading: heading,\n            longLatCoord: longLatCoord,\n            timeStamp: timeStamp\n          });\n          increaseMinutes += 5;\n          return message;\n        }\n      });\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          selectedCargo: {\n            simulationRoutes: {\n              data: {\n                $push: _compact(simulationData)\n              }\n            }\n          }\n        }\n      });\n      setCurrentFeature(feature);\n    });\n  }, [showSimulationRoutes, selectedCargo.id]);\n  useEffect(function () {\n    if (currentFeature && update) {\n      var source = simulationLayer.getSource();\n      var coords = SimulationRoutesData.map(function (record) {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      var updateCoords = [firstCoord].concat(coords);\n      var geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n      var simulationData = geometry.getCoordinates().map(function (coordinate, index) {\n        if (index !== 0) {\n          var heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          var longLatCoord = convertCoord2LongLat(coordinate);\n          var timeStamp = SimulationRoutesData[index - 1].timestamp;\n          var speed = SimulationRoutesData[index - 1].speed;\n          var created_at = SimulationRoutesData[index - 1].created_at;\n          var message = simulationFormatMessage({\n            heading: heading,\n            longLatCoord: longLatCoord,\n            timeStamp: timeStamp,\n            speed: speed,\n            created_at: created_at\n          });\n          return message;\n        }\n      });\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          selectedCargo: {\n            simulationRoutes: {\n              data: {\n                $push: _compact(simulationData)\n              }\n            }\n          }\n        }\n      });\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          selectedCargo: {\n            simulationRoutes: {\n              update: {\n                $set: !update\n              },\n              data: {\n                $set: _compact(simulationData)\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [update]);\n\n  var handleClickClearDraw = function handleClickClearDraw() {\n    map.getInteractions().pop();\n    map.addInteraction(draw);\n  };\n\n  var handleClickClearDrawLayer = function handleClickClearDrawLayer() {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    dispatch({\n      type: SET_STATE,\n      payload: {\n        selectedCargo: {\n          simulationRoutes: {\n            data: {\n              $set: []\n            }\n          }\n        }\n      }\n    });\n  };\n\n  var handleClickSend = function handleClickSend() {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    console.log(JSON.stringify(aisFakeMessage(SimulationRoutesData)));\n    dispatch({\n      type: SET_STATE,\n      payload: {\n        selectedCargo: {\n          simulationRoutes: {\n            data: {\n              $set: []\n            }\n          }\n        }\n      }\n    });\n    dispatch({\n      type: SIMULATE,\n      payload: {\n        imo: \"123456\",\n        SimulationRoutesData: SimulationRoutesData\n      }\n    });\n    setOpenDialog(false);\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setOpenDialog(false);\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    setOpenDialog(true);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(SimulationSettings, {\n    handleClickClearDraw: handleClickClearDraw,\n    handleClickClearDrawLayer: handleClickClearDrawLayer,\n    handleClickSend: handleOpenDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(Index, \"gmiqAiI9fvz1hibpXyxXRxnvwVs=\");\n\n_c = Index;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cargoMap: state.cargoMap,\n    latestCargoInfosData: state.cargoes.latestCargoInfos.data,\n    simulationRoutes: state.cargoMap.selectedCargo.simulationRoutes\n  };\n};\n\nvar enhance = _flowRight([connect(mapStateToProps)]);\n\nexport var SimulationRoutesLayer = enhance(Index);\n_c2 = SimulationRoutesLayer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"SimulationRoutesLayer\");","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SimulationRoutes/index.tsx"],"names":["connect","useEffect","useState","React","SimulationSettings","convertCoord2LongLat","convertHeadingtoDegree","convertLongLat2Coords","SET_STATE","SIMULATE","formatDateTimeUTC","YYYY_MM_DD_HH_MM_SS","moment","simulationFormatMessage","aisFakeMessage","vectorSource","ol","source","Vector","format","GeoJSON","getRotation","startPoint","endPoint","dx","dy","Math","atan2","styleFunction","feature","geometry","getGeometry","styles","style","Style","stroke","Stroke","color","width","forEachSegment","start","end","rotation","console","log","push","geom","Point","image","Icon","src","anchor","rotateWithView","Index","map","t","dispatch","simulationRoutes","props","cargoMap","latestCargoInfosData","selectedCargo","Feature","currentFeature","setCurrentFeature","firstCoord","setFirstCoord","update","showSimulationRoutes","show","SimulationRoutesData","data","createdAtTime","toString","openDialog","setOpenDialog","draw","interaction","Draw","type","simulationLayer","layer","increaseMinutes","id","addLayer","addInteraction","getInteractions","pop","getSource","clear","removeLayer","on","evt","coords","getCoordinates","simulationData","coordinate","index","heading","longLatCoord","timeStamp","add","message","payload","$push","record","longitude","latitude","updateCoords","concat","setCoordinates","addFeature","timestamp","speed","created_at","$set","handleClickClearDraw","handleClickClearDrawLayer","handleClickSend","JSON","stringify","imo","handleCloseDialog","handleOpenDialog","mapStateToProps","state","cargoes","latestCargoInfos","enhance","SimulationRoutesLayer"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,qBAAvD,QAAoF,gBAApF;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,wBAApC;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,qBAAvD;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,EAAkCC,cAAlC,QAAwD,mBAAxD;AAEA,IAAMC,YAAY,GAAG,IAAIC,EAAE,CAACC,MAAH,CAAUC,MAAd,CAAqB;AACxCC,EAAAA,MAAM,EAAE,IAAIH,EAAE,CAACG,MAAH,CAAUC,OAAd;AADgC,CAArB,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAkBC,QAAlB,EAAoC;AACtD,MAAMC,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAnC;AACA,MAAMG,EAAE,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAcD,UAAU,CAAC,CAAD,CAAnC;AACA,SAAO,CAACI,IAAI,CAACC,KAAL,CAAWF,EAAX,EAAeD,EAAf,CAAR;AACD,CAJD;;AAMA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAkB;AACtC,MAAMC,QAAQ,GAAGD,OAAO,CAACE,WAAR,EAAjB;AACA,MAAMC,MAAM,GAAG,CACb;AACA,MAAIhB,EAAE,CAACiB,KAAH,CAASC,KAAb,CAAmB;AACjBC,IAAAA,MAAM,EAAE,IAAInB,EAAE,CAACiB,KAAH,CAASG,MAAb,CAAoB;AAC1BC,MAAAA,KAAK,EAAE,SADmB;AAE1BC,MAAAA,KAAK,EAAE;AAFmB,KAApB;AADS,GAAnB,CAFa,CAAf;AAUAR,EAAAA,QAAQ,CAACS,cAAT,CAAwB,UAASC,KAAT,EAAqBC,GAArB,EAA+B;AACrD,QAAMC,QAAQ,GAAGrB,WAAW,CAACmB,KAAD,EAAQC,GAAR,CAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,QAAzB,EAFqD,CAGrD;;AACAV,IAAAA,MAAM,CAACa,IAAP,CACE,IAAI7B,EAAE,CAACiB,KAAH,CAASC,KAAb,CAAmB;AACjBJ,MAAAA,QAAQ,EAAE,IAAId,EAAE,CAAC8B,IAAH,CAAQC,KAAZ,CAAkBN,GAAlB,CADO;AAEjBO,MAAAA,KAAK,EAAE,IAAIhC,EAAE,CAACiB,KAAH,CAASgB,IAAb,CAAkB;AACvBC,QAAAA,GAAG,EAAE,2BADkB;AAEvBC,QAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,GAAP,CAFe;AAGvBC,QAAAA,cAAc,EAAE,IAHO;AAIvBV,QAAAA,QAAQ,EAAEA;AAJa,OAAlB;AAFU,KAAnB,CADF;AAWD,GAfD;AAiBA,SAAOV,MAAP;AACD,CA9BD;;AAgCA,SAASqB,KAAT,OAAsE;AAAA;;AAAA,MAArDC,GAAqD,QAArDA,GAAqD;AAAA,MAAhDC,CAAgD,QAAhDA,CAAgD;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AAAA,MAAnCC,gBAAmC,QAAnCA,gBAAmC;AAAA,MAAdC,KAAc;;AAAA,MAC5DC,QAD4D,GACzBD,KADyB,CAC5DC,QAD4D;AAAA,MAClDC,oBADkD,GACzBF,KADyB,CAClDE,oBADkD;AAAA,MAE5DC,aAF4D,GAE1CF,QAF0C,CAE5DE,aAF4D;;AAAA,kBAGxB3D,QAAQ,CAAC,IAAIc,EAAE,CAAC8C,OAAP,EAAD,CAHgB;AAAA,MAG7DC,cAH6D;AAAA,MAG7CC,iBAH6C;;AAAA,mBAIhC9D,QAAQ,CAAC,IAAD,CAJwB;AAAA,MAI7D+D,UAJ6D;AAAA,MAIjDC,aAJiD;;AAAA,8BAOhEL,aAPgE,CAMlEJ,gBANkE;AAAA,MAM9CU,MAN8C,yBAM9CA,MAN8C;AAAA,MAMhCC,oBANgC,yBAMtCC,IANsC;AAAA,MAMJC,oBANI,yBAMVC,IANU;AAQpE,MAAMC,aAAa,GAAG5D,MAAM,GAAG6D,QAAT,EAAtB;;AARoE,wBAShCtE,KAAK,CAACD,QAAN,CAAe,KAAf,CATgC;AAAA;AAAA,MAS7DwE,UAT6D;AAAA,MASjDC,aATiD;;AAWpE,MAAMC,IAAI,GAAG,IAAI5D,EAAE,CAAC6D,WAAH,CAAeC,IAAnB,CAAwB;AACnC7D,IAAAA,MAAM,EAAEF,YAD2B;AAEnCgE,IAAAA,IAAI,EAAE;AAF6B,GAAxB,CAAb;AAKA,MAAMC,eAAe,GAAG,IAAIhE,EAAE,CAACiE,KAAH,CAAS/D,MAAb,CAAoB;AAC1CD,IAAAA,MAAM,EAAEF,YADkC;AAE1CkB,IAAAA,KAAK,EAAEL;AAFmC,GAApB,CAAxB;AAKA3B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIiF,eAAe,GAAG,CAAtB;;AACA,QAAId,oBAAoB,IAAIP,aAAa,CAACsB,EAA1C,EAA8C;AAC5C7B,MAAAA,GAAG,CAAC8B,QAAJ,CAAaJ,eAAb;AACA1B,MAAAA,GAAG,CAAC+B,cAAJ,CAAmBT,IAAnB;AACD;;AACD,QAAI,CAACR,oBAAL,EAA2B;AACzBd,MAAAA,GAAG,CAACgC,eAAJ,GAAsBC,GAAtB;AACAP,MAAAA,eAAe,CAACQ,SAAhB,GAA4BC,KAA5B;AACAnC,MAAAA,GAAG,CAACoC,WAAJ,CAAgBV,eAAhB;AACD;;AACDJ,IAAAA,IAAI,CAACe,EAAL,CAAQ,SAAR,EAAmB,UAASC,GAAT,EAAmB;AACpC,UAAM/D,OAAO,GAAG+D,GAAG,CAAC/D,OAApB;AACA,UAAMgE,MAAM,GAAGhE,OAAO,CAACE,WAAR,GAAsB+D,cAAtB,EAAf;AACA5B,MAAAA,aAAa,CAAC2B,MAAM,CAAC,CAAD,CAAP,CAAb;AACA,UAAME,cAAc,GAAGF,MAAM,CAACvC,GAAP,CAAW,UAAC0C,UAAD,EAAkBC,KAAlB,EAAoC;AACpE,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,cAAMC,OAAO,GAAG5F,sBAAsB,CAACe,WAAW,CAACwE,MAAM,CAACI,KAAK,GAAG,CAAT,CAAP,EAAoBD,UAApB,CAAZ,CAAtC;AACA,cAAMG,YAAY,GAAG9F,oBAAoB,CAAC2F,UAAD,CAAzC;AACA,cAAMI,SAAS,GAAG1F,iBAAiB,CACjCE,MAAM,CAAC4D,aAAD,CAAN,CACG6B,GADH,CACOnB,eADP,EACwB,SADxB,EAEGT,QAFH,EADiC,EAIjC9D,mBAJiC,CAAnC;AAMA,cAAM2F,OAAO,GAAGzF,uBAAuB,CAAC;AAAEqF,YAAAA,OAAO,EAAPA,OAAF;AAAWC,YAAAA,YAAY,EAAZA,YAAX;AAAyBC,YAAAA,SAAS,EAATA;AAAzB,WAAD,CAAvC;AACAlB,UAAAA,eAAe,IAAI,CAAnB;AAEA,iBAAOoB,OAAP;AACD;AACF,OAfsB,CAAvB;AAiBA9C,MAAAA,QAAQ,CAAC;AACPuB,QAAAA,IAAI,EAAEvE,SADC;AAEP+F,QAAAA,OAAO,EAAE;AACP1C,UAAAA,aAAa,EAAE;AACbJ,YAAAA,gBAAgB,EAAE;AAChBc,cAAAA,IAAI,EAAE;AAAEiC,gBAAAA,KAAK,EAAE,SAAQT,cAAR;AAAT;AADU;AADL;AADR;AAFF,OAAD,CAAR;AAWA/B,MAAAA,iBAAiB,CAACnC,OAAD,CAAjB;AACD,KAjCD;AAkCD,GA7CQ,EA6CN,CAACuC,oBAAD,EAAuBP,aAAa,CAACsB,EAArC,CA7CM,CAAT;AA+CAlF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI8D,cAAc,IAAII,MAAtB,EAA8B;AAC5B,UAAMlD,MAAM,GAAG+D,eAAe,CAACQ,SAAhB,EAAf;AACA,UAAMK,MAAM,GAAGvB,oBAAoB,CAAChB,GAArB,CAAyB,UAACmD,MAAD,EAAiB;AACvD,eAAOlG,qBAAqB,CAAC,CAACkG,MAAM,CAACC,SAAR,EAAmBD,MAAM,CAACE,QAA1B,CAAD,CAA5B;AACD,OAFc,CAAf;AAGA,UAAMC,YAAY,GAAG,CAAC3C,UAAD,EAAa4C,MAAb,CAAoBhB,MAApB,CAArB;AACA,UAAM/D,QAAQ,GAAGiC,cAAc,CAAChC,WAAf,EAAjB;AACAD,MAAAA,QAAQ,CAACgF,cAAT,CAAwBF,YAAxB;AACA3F,MAAAA,MAAM,CAACwE,KAAP;AACAxE,MAAAA,MAAM,CAAC8F,UAAP,CAAkBhD,cAAlB;AAEA,UAAMgC,cAAc,GAAGjE,QAAQ,CAACgE,cAAT,GAA0BxC,GAA1B,CAA8B,UAAC0C,UAAD,EAAkBC,KAAlB,EAAoC;AACvF,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,cAAMC,OAAO,GAAG5F,sBAAsB,CAACe,WAAW,CAACuF,YAAY,CAACX,KAAK,GAAG,CAAT,CAAb,EAA0BD,UAA1B,CAAZ,CAAtC;AACA,cAAMG,YAAY,GAAG9F,oBAAoB,CAAC2F,UAAD,CAAzC;AACA,cAAMI,SAAS,GAAG9B,oBAAoB,CAAC2B,KAAK,GAAG,CAAT,CAApB,CAAgCe,SAAlD;AACA,cAAMC,KAAK,GAAG3C,oBAAoB,CAAC2B,KAAK,GAAG,CAAT,CAApB,CAAgCgB,KAA9C;AACA,cAAMC,UAAU,GAAG5C,oBAAoB,CAAC2B,KAAK,GAAG,CAAT,CAApB,CAAgCiB,UAAnD;AACA,cAAMZ,OAAO,GAAGzF,uBAAuB,CAAC;AAAEqF,YAAAA,OAAO,EAAPA,OAAF;AAAWC,YAAAA,YAAY,EAAZA,YAAX;AAAyBC,YAAAA,SAAS,EAATA,SAAzB;AAAoCa,YAAAA,KAAK,EAALA,KAApC;AAA2CC,YAAAA,UAAU,EAAVA;AAA3C,WAAD,CAAvC;AAEA,iBAAOZ,OAAP;AACD;AACF,OAXsB,CAAvB;AAaA9C,MAAAA,QAAQ,CAAC;AACPuB,QAAAA,IAAI,EAAEvE,SADC;AAEP+F,QAAAA,OAAO,EAAE;AACP1C,UAAAA,aAAa,EAAE;AACbJ,YAAAA,gBAAgB,EAAE;AAChBc,cAAAA,IAAI,EAAE;AAAEiC,gBAAAA,KAAK,EAAE,SAAQT,cAAR;AAAT;AADU;AADL;AADR;AAFF,OAAD,CAAR;AAUAvC,MAAAA,QAAQ,CAAC;AACPuB,QAAAA,IAAI,EAAEvE,SADC;AAEP+F,QAAAA,OAAO,EAAE;AACP1C,UAAAA,aAAa,EAAE;AACbJ,YAAAA,gBAAgB,EAAE;AAChBU,cAAAA,MAAM,EAAE;AAAEgD,gBAAAA,IAAI,EAAE,CAAChD;AAAT,eADQ;AAEhBI,cAAAA,IAAI,EAAE;AAAE4C,gBAAAA,IAAI,EAAE,SAAQpB,cAAR;AAAR;AAFU;AADL;AADR;AAFF,OAAD,CAAR;AAWD;AACF,GA/CQ,EA+CN,CAAC5B,MAAD,CA/CM,CAAT;;AAiDA,MAAMiD,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC9D,IAAAA,GAAG,CAACgC,eAAJ,GAAsBC,GAAtB;AACAjC,IAAAA,GAAG,CAAC+B,cAAJ,CAAmBT,IAAnB;AACD,GAHD;;AAKA,MAAMyC,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtCrC,IAAAA,eAAe,CAACQ,SAAhB,GAA4BC,KAA5B;AACAnC,IAAAA,GAAG,CAACoC,WAAJ,CAAgBV,eAAhB;AACA1B,IAAAA,GAAG,CAAC8B,QAAJ,CAAaJ,eAAb;AACAxB,IAAAA,QAAQ,CAAC;AACPuB,MAAAA,IAAI,EAAEvE,SADC;AAEP+F,MAAAA,OAAO,EAAE;AACP1C,QAAAA,aAAa,EAAE;AACbJ,UAAAA,gBAAgB,EAAE;AAChBc,YAAAA,IAAI,EAAE;AAAE4C,cAAAA,IAAI,EAAE;AAAR;AADU;AADL;AADR;AAFF,KAAD,CAAR;AAUD,GAdD;;AAgBA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BtC,IAAAA,eAAe,CAACQ,SAAhB,GAA4BC,KAA5B;AACAnC,IAAAA,GAAG,CAACoC,WAAJ,CAAgBV,eAAhB;AACA1B,IAAAA,GAAG,CAAC8B,QAAJ,CAAaJ,eAAb;AACArC,IAAAA,OAAO,CAACC,GAAR,CAAY2E,IAAI,CAACC,SAAL,CAAe1G,cAAc,CAACwD,oBAAD,CAA7B,CAAZ;AACAd,IAAAA,QAAQ,CAAC;AACPuB,MAAAA,IAAI,EAAEvE,SADC;AAEP+F,MAAAA,OAAO,EAAE;AACP1C,QAAAA,aAAa,EAAE;AACbJ,UAAAA,gBAAgB,EAAE;AAChBc,YAAAA,IAAI,EAAE;AAAE4C,cAAAA,IAAI,EAAE;AAAR;AADU;AADL;AADR;AAFF,KAAD,CAAR;AAUA3D,IAAAA,QAAQ,CAAC;AACPuB,MAAAA,IAAI,EAAEtE,QADC;AAEP8F,MAAAA,OAAO,EAAE;AACPkB,QAAAA,GAAG,EAAE,QADE;AAEPnD,QAAAA,oBAAoB,EAApBA;AAFO;AAFF,KAAD,CAAR;AAOAK,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAvBD;;AAyBA,MAAM+C,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B/C,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAFD;;AAGA,MAAMgD,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BhD,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAFD;;AAIA,SACE,4BACE,MAAC,kBAAD;AACE,IAAA,oBAAoB,EAAEyC,oBADxB;AAEE,IAAA,yBAAyB,EAAEC,yBAF7B;AAGE,IAAA,eAAe,EAAEM,gBAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA+BD;;GAzMQtE,K;;KAAAA,K;;AA0MT,IAAMuE,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAiB;AACvClE,IAAAA,QAAQ,EAAEkE,KAAK,CAAClE,QADuB;AAEvCC,IAAAA,oBAAoB,EAAEiE,KAAK,CAACC,OAAN,CAAcC,gBAAd,CAA+BxD,IAFd;AAGvCd,IAAAA,gBAAgB,EAAEoE,KAAK,CAAClE,QAAN,CAAeE,aAAf,CAA6BJ;AAHR,GAAjB;AAAA,CAAxB;;AAKA,IAAMuE,OAAO,GAAG,WAAU,CAAChI,OAAO,CAAC4H,eAAD,CAAR,CAAV,CAAhB;;AAEA,OAAO,IAAMK,qBAAqB,GAAGD,OAAO,CAAC3E,KAAD,CAArC;MAAM4E,qB","sourcesContent":["import { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport { flowRight, compact } from 'lodash';\nimport { SimulationSettings } from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map';\nimport { SET_STATE, SIMULATE } from 'redux/cargoMap/actions';\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment';\n// import Button from '@material-ui/core/Button';\n// import Dialog from '@material-ui/core/Dialog';\n// import DialogActions from '@material-ui/core/DialogActions';\n// import DialogContent from '@material-ui/core/DialogContent';\n// import DialogContentText from '@material-ui/core/DialogContentText';\n// import DialogTitle from '@material-ui/core/DialogTitle';\nimport { simulationFormatMessage, aisFakeMessage } from 'core/model/Vessel';\n\nconst vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON(),\n});\n\nconst getRotation = (startPoint: any, endPoint: any) => {\n  const dx = endPoint[0] - startPoint[0];\n  const dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nconst styleFunction = (feature: any) => {\n  const geometry = feature.getGeometry();\n  const styles = [\n    // linestring\n    new ol.style.Style({\n      stroke: new ol.style.Stroke({\n        color: '#ffcc33',\n        width: 2,\n      }),\n    }),\n  ];\n\n  geometry.forEachSegment(function(start: any, end: any) {\n    const rotation = getRotation(start, end);\n    console.log('rotation' + rotation);\n    // arrows\n    styles.push(\n      new ol.style.Style({\n        geometry: new ol.geom.Point(end),\n        image: new ol.style.Icon({\n          src: 'resources/icons/arrow.png',\n          anchor: [0.75, 0.5],\n          rotateWithView: true,\n          rotation: rotation,\n        }),\n      }),\n    );\n  });\n\n  return styles;\n};\n\nfunction Index({ map, t, dispatch, simulationRoutes, ...props }: any) {\n  const { cargoMap, latestCargoInfosData } = props;\n  const { selectedCargo } = cargoMap;\n  const [currentFeature, setCurrentFeature] = useState(new ol.Feature());\n  const [firstCoord, setFirstCoord] = useState(null);\n  const {\n    simulationRoutes: { update, show: showSimulationRoutes, data: SimulationRoutesData },\n  } = selectedCargo;\n  const createdAtTime = moment().toString();\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString',\n  });\n\n  const simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction,\n  });\n\n  useEffect(() => {\n    let increaseMinutes = 0;\n    if (showSimulationRoutes && selectedCargo.id) {\n      map.addLayer(simulationLayer);\n      map.addInteraction(draw);\n    }\n    if (!showSimulationRoutes) {\n      map.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      map.removeLayer(simulationLayer);\n    }\n    draw.on('drawend', function(evt: any) {\n      const feature = evt.feature;\n      const coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      const simulationData = coords.map((coordinate: any, index: number) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = formatDateTimeUTC(\n            moment(createdAtTime)\n              .add(increaseMinutes, 'minutes')\n              .toString(),\n            YYYY_MM_DD_HH_MM_SS,\n          );\n          const message = simulationFormatMessage({ heading, longLatCoord, timeStamp });\n          increaseMinutes += 5;\n\n          return message;\n        }\n      });\n\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          selectedCargo: {\n            simulationRoutes: {\n              data: { $push: compact(simulationData) },\n            },\n          },\n        },\n      });\n\n      setCurrentFeature(feature);\n    });\n  }, [showSimulationRoutes, selectedCargo.id]);\n\n  useEffect(() => {\n    if (currentFeature && update) {\n      const source = simulationLayer.getSource();\n      const coords = SimulationRoutesData.map((record: any) => {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      const updateCoords = [firstCoord].concat(coords);\n      const geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n\n      const simulationData = geometry.getCoordinates().map((coordinate: any, index: number) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = SimulationRoutesData[index - 1].timestamp;\n          const speed = SimulationRoutesData[index - 1].speed;\n          const created_at = SimulationRoutesData[index - 1].created_at;\n          const message = simulationFormatMessage({ heading, longLatCoord, timeStamp, speed, created_at });\n\n          return message;\n        }\n      });\n\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          selectedCargo: {\n            simulationRoutes: {\n              data: { $push: compact(simulationData) },\n            },\n          },\n        },\n      });\n      dispatch({\n        type: SET_STATE,\n        payload: {\n          selectedCargo: {\n            simulationRoutes: {\n              update: { $set: !update },\n              data: { $set: compact(simulationData) },\n            },\n          },\n        },\n      });\n    }\n  }, [update]);\n\n  const handleClickClearDraw = () => {\n    map.getInteractions().pop();\n    map.addInteraction(draw);\n  };\n\n  const handleClickClearDrawLayer = () => {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    dispatch({\n      type: SET_STATE,\n      payload: {\n        selectedCargo: {\n          simulationRoutes: {\n            data: { $set: [] },\n          },\n        },\n      },\n    });\n  };\n\n  const handleClickSend = () => {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    console.log(JSON.stringify(aisFakeMessage(SimulationRoutesData)));\n    dispatch({\n      type: SET_STATE,\n      payload: {\n        selectedCargo: {\n          simulationRoutes: {\n            data: { $set: [] },\n          },\n        },\n      },\n    });\n    dispatch({\n      type: SIMULATE,\n      payload: {\n        imo: \"123456\",\n        SimulationRoutesData,\n      },\n    });\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  return (\n    <>\n      <SimulationSettings\n        handleClickClearDraw={handleClickClearDraw}\n        handleClickClearDrawLayer={handleClickClearDrawLayer}\n        handleClickSend={handleOpenDialog}\n      />\n      {/* <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{'Create Simulation Data Confirmation?'}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Please be aware that this simulation data will effect to voyage of current vessel, it is recommended to use\n            on a fake vessel which is not belong to our customer, will you continue?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClickSend} color=\"primary\" autoFocus>\n            Send\n          </Button>\n        </DialogActions>\n      </Dialog> */}\n    </>\n  );\n}\nconst mapStateToProps = (state: any) => ({\n  cargoMap: state.cargoMap,\n  latestCargoInfosData: state.cargoes.latestCargoInfos.data,\n  simulationRoutes: state.cargoMap.selectedCargo.simulationRoutes,\n});\nconst enhance = flowRight([connect(mapStateToProps)]);\n\nexport const SimulationRoutesLayer = enhance(Index);\n"]},"metadata":{},"sourceType":"module"}