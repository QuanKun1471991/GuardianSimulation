{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _round from \"lodash/round\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport GeoJSON from \"ol/format/GeoJSON\";\nexport var MapLayers;\n\n(function (MapLayers) {\n  MapLayers[\"Vessel\"] = \"vessel\";\n  MapLayers[\"Port\"] = \"port\";\n})(MapLayers || (MapLayers = {}));\n\nvar defaultGeojsonObject = {\n  type: \"FeatureCollection\",\n  crs: {\n    type: \"name\",\n    properties: {\n      name: \"EPSG:4326\"\n    }\n  }\n};\nexport function deg2Rad(_degree) {\n  var degree = Number(_degree);\n  return degree ? degree / 180 * Math.PI : 0;\n}\nexport var CONVERT_PROJECTION = {\n  featureProjection: \"EPSG:3857\",\n  dataProjection: \"EPSG:4326\"\n};\nexport var convertCoord2LongLat = function convertCoord2LongLat(data) {\n  return ol.proj.transform(data, 'EPSG:3857', 'EPSG:4326');\n};\nexport var convertLongLat2Coords = function convertLongLat2Coords(data) {\n  return ol.proj.transform(data, 'EPSG:4326', 'EPSG:3857');\n};\nexport function convertHeadingtoDegree(heading) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI / 2;\n  return _round(heading * 180 / Math.PI + offset);\n}\nexport var getHeadingRad = function getHeadingRad(_degree) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI / 2;\n  var degree = deg2Rad(_degree);\n  return degree - offset;\n};\nexport var formatPortFeatures = function formatPortFeatures(features) {\n  var geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features: features\n  });\n\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};\nexport var formatVesselFeatures = function formatVesselFeatures(dataFeatures) {\n  var features = dataFeatures.map(function (feature) {\n    return {\n      properties: feature.properties,\n      geometry: feature.geometry,\n      type: \"Feature\"\n    };\n  });\n\n  var geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features: features\n  });\n\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};","map":null,"metadata":{},"sourceType":"module"}