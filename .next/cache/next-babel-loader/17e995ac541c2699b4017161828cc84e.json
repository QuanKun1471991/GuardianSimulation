{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _get from \"lodash/get\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchAll),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport portServices from \"services/port/api\";\nimport { BaseFunctions, fetchAllSuccess, fetchAllFailed } from \"./actions\";\nimport { PortActions } from \"./types\";\nexport function fetchAll(_ref) {\n  var payload, onStart, onSuccess, onError, allData, filter, _yield$call, _yield$call$data, data, meta, page_size;\n\n  return _regeneratorRuntime.wrap(function fetchAll$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          onStart = payload.onStart, onSuccess = payload.onSuccess, onError = payload.onError;\n          allData = [];\n          filter = {\n            page: 1\n          };\n          onStart();\n          _context.prev = 5;\n          _context.next = 8;\n          return call(portServices.fetchAll, filter);\n\n        case 8:\n          _yield$call = _context.sent;\n          _yield$call$data = _yield$call.data;\n          data = _yield$call$data.data;\n          meta = _yield$call$data.meta;\n          page_size = _yield$call$data.meta.pager.page_size;\n          allData = [].concat(_toConsumableArray(allData), _toConsumableArray(data));\n          _context.next = 16;\n          return put(BaseFunctions.setState({\n            data: allData,\n            meta: meta\n          }));\n\n        case 16:\n          _context.next = 18;\n          return put(fetchAllSuccess());\n\n        case 18:\n          _context.next = 25;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](5);\n          onError(_context.t0);\n          _context.next = 25;\n          return put(fetchAllFailed({\n            error: _get(_context.t0, \"data.message\")\n          }));\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[5, 20]]);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(PortActions.FETCH_ALL, fetchAll)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/port/sagas.ts"],"names":["fetchAll","rootSaga","all","call","put","takeLatest","portServices","BaseFunctions","fetchAllSuccess","fetchAllFailed","PortActions","payload","onStart","onSuccess","onError","allData","filter","page","data","meta","page_size","pager","setState","error","FETCH_ALL"],"mappings":";;;;oDAQiBA,Q;qDA0BQC,Q;;AAjCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAGA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,QAA+D,WAA/D;AACA,SAASC,WAAT,QAA6C,SAA7C;AAEA,OAAO,SAAUV,QAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAqBW,UAAAA,OAArB,QAAqBA,OAArB;AACGC,UAAAA,OADH,GACmCD,OADnC,CACGC,OADH,EACYC,SADZ,GACmCF,OADnC,CACYE,SADZ,EACuBC,OADvB,GACmCH,OADnC,CACuBG,OADvB;AAEDC,UAAAA,OAFC,GAES,EAFT;AAGCC,UAAAA,MAHD,GAGU;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAHV;AAILL,UAAAA,OAAO;AAJF;AAAA;AAeC,iBAAMT,IAAI,CAACG,YAAY,CAACN,QAAd,EAAwBgB,MAAxB,CAAV;;AAfD;AAAA;AAAA,yCAODE,IAPC;AAQCA,UAAAA,IARD,oBAQCA,IARD;AASCC,UAAAA,IATD,oBASCA,IATD;AAYYC,UAAAA,SAZZ,oBAUCD,IAVD,CAYGE,KAZH,CAYYD,SAZZ;AAgBHL,UAAAA,OAAO,gCAAOA,OAAP,sBAAmBG,IAAnB,EAAP;AAhBG;AAiBH,iBAAMd,GAAG,CAACG,aAAa,CAACe,QAAd,CAAuB;AAAEJ,YAAAA,IAAI,EAAEH,OAAR;AAAiBI,YAAAA,IAAI,EAAJA;AAAjB,WAAvB,CAAD,CAAT;;AAjBG;AAAA;AAmBH,iBAAMf,GAAG,CAACI,eAAe,EAAhB,CAAT;;AAnBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBHM,UAAAA,OAAO,aAAP;AArBG;AAsBH,iBAAMV,GAAG,CAACK,cAAc,CAAC;AAAEc,YAAAA,KAAK,EAAE,kBAAO,cAAP;AAAT,WAAD,CAAf,CAAT;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BP,eAAe,SAAUtB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,UAAU,CAACK,WAAW,CAACc,SAAb,EAAwBxB,QAAxB,CAAX,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { notification } from \"antd\"\nimport { all, call, put, takeLatest } from \"redux-saga/effects\"\nimport portServices from \"services/port/api\"\nimport { get } from \"lodash\"\nimport produce from \"immer\"\nimport { BaseFunctions, fetchAllSuccess, fetchAllFailed } from \"./actions\"\nimport { PortActions, IFetchAllAction } from \"./types\"\n\nexport function* fetchAll({ payload }: IFetchAllAction) {\n  const { onStart, onSuccess, onError } = payload\n  let allData = []\n  const filter = { page: 1 }\n  onStart()\n  try {\n    const {\n      data: {\n        data,\n        meta,\n        meta: {\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          pager: { page_size },\n        },\n      },\n    } = yield call(portServices.fetchAll, filter)\n    allData = [...allData, ...data]\n    yield put(BaseFunctions.setState({ data: allData, meta }))\n\n    yield put(fetchAllSuccess())\n  } catch (e) {\n    onError(e)\n    yield put(fetchAllFailed({ error: get(e, \"data.message\") }))\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeLatest(PortActions.FETCH_ALL, fetchAll)])\n}\n"]},"metadata":{},"sourceType":"module"}