{"ast":null,"code":"import { forEach } from \"core/utils/enum\";\nvar ACTIONS = {\n  SET_STATE: \"set state\",\n  RESET_STATE: \"reset state\"\n};\nvar ActionFunctionName;\n\n(function (ActionFunctionName) {\n  ActionFunctionName[\"SET_STATE\"] = \"setState\";\n  ActionFunctionName[\"RESET_STATE\"] = \"resetState\";\n})(ActionFunctionName || (ActionFunctionName = {}));\n\nvar genActions = function genActions(prefix) {\n  var funcs = {};\n  var types = {};\n  forEach(ActionFunctionName, function (_ref) {\n    var key = _ref.key,\n        value = _ref.value;\n    var hasKey = Reflect.has(funcs, value);\n\n    if (!hasKey) {\n      var dispatchType = \"\".concat(prefix, \" \").concat(ACTIONS[key]);\n      types[key] = dispatchType;\n\n      funcs[value] = function (payload) {\n        return {\n          type: dispatchType,\n          payload: payload\n        };\n      };\n    }\n  });\n  return {\n    funcs: funcs,\n    types: types\n  };\n};\n\nexport default genActions;","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/_base/actions.ts"],"names":["forEach","ACTIONS","SET_STATE","RESET_STATE","ActionFunctionName","genActions","prefix","funcs","types","key","value","hasKey","Reflect","has","dispatchType","payload","type"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAOA,IAAMC,OAAiB,GAAG;AACxBC,EAAAA,SAAS,EAAE,WADa;AAExBC,EAAAA,WAAW,EAAE;AAFW,CAA1B;IAKKC,kB;;WAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAeL,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAA2BC,MAA3B,EAAkE;AACnF,MAAMC,KAAuC,GAAG,EAAhD;AACA,MAAMC,KAAK,GAAG,EAAd;AAEAR,EAAAA,OAAO,CAACI,kBAAD,EAAqB,gBAAoB;AAAA,QAAjBK,GAAiB,QAAjBA,GAAiB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AAC9C,QAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmBG,KAAnB,CAAf;;AACA,QAAI,CAACC,MAAL,EAAa;AACX,UAAMG,YAAY,aAAMR,MAAN,cAAgBL,OAAO,CAACQ,GAAD,CAAvB,CAAlB;AAEAD,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaK,YAAb;;AAEAP,MAAAA,KAAK,CAACG,KAAD,CAAL,GAAe,UAAUK,OAAV;AAAA,eAAgC;AAC7CC,UAAAA,IAAI,EAAEF,YADuC;AAE7CC,UAAAA,OAAO,EAAPA;AAF6C,SAAhC;AAAA,OAAf;AAID;AACF,GAZM,CAAP;AAcA,SAAO;AAAER,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,KAAK,EAALA;AAAT,GAAP;AACD,CAnBD;;AAqBA,eAAeH,UAAf","sourcesContent":["import { forEach } from \"core/utils/enum\"\n\nexport interface IActions {\n  SET_STATE: string\n  RESET_STATE: string\n}\n\nconst ACTIONS: IActions = {\n  SET_STATE: \"set state\",\n  RESET_STATE: \"reset state\",\n}\n\nenum ActionFunctionName {\n  SET_STATE = \"setState\",\n  RESET_STATE = \"resetState\",\n}\n\ntype ReturnCommonFunction<T extends keyof IActions> = Record<\n  ActionFunctionName,\n  <Payload>(payload?: Payload) => { type: IActions[T]; payload: Payload }\n>\n\ntype GenActionReturn<T extends keyof IActions> = {\n  funcs: ReturnCommonFunction<T>\n  types: { [key in T]: string }\n}\n\nconst genActions = <T extends keyof IActions>(prefix: string): GenActionReturn<T> => {\n  const funcs: Partial<ReturnCommonFunction<T>> = {}\n  const types = {}\n\n  forEach(ActionFunctionName, ({ key, value }) => {\n    const hasKey = Reflect.has(funcs, value)\n    if (!hasKey) {\n      const dispatchType = `${prefix} ${ACTIONS[key]}`\n\n      types[key] = dispatchType\n\n      funcs[value] = <Payload>(payload: Payload) => ({\n        type: dispatchType,\n        payload,\n      })\n    }\n  })\n\n  return { funcs, types } as GenActionReturn<T>\n}\n\nexport default genActions\n"]},"metadata":{},"sourceType":"module"}