{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isString from \"lodash/isString\";\nimport checkStore, { invariant } from \"core/utils/redux\";\nimport produce from \"immer\";\nimport createReducer from \"services/reducers\";\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    var _store$injectedReduce;\n\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    invariant(_isString(key) && !_isEmpty(key) && _isFunction(reducer), \"(app/utils...) injectReducer: Expected `reducer` to be a reducer function\");\n\n    if (Reflect.has((store === null || store === void 0 ? void 0 : store.injectedReducers) || {}, key) && ((_store$injectedReduce = store.injectedReducers) === null || _store$injectedReduce === void 0 ? void 0 : _store$injectedReduce[key]) === reducer) {\n      return;\n    }\n\n    var newStore = produce(store, function (draft) {\n      draft.injectedReducers[key] = reducer;\n    });\n    newStore.replaceReducer(createReducer(newStore.injectedReducers));\n  };\n}\nexport default function getInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}