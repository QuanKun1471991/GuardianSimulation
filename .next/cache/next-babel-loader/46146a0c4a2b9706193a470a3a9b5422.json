{"ast":null,"code":"import _flowRight from \"lodash/flowRight\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SimulationRoutes/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport { SimulationSettings } from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map'; // import { SET_STATE, SIMULATE } from 'redux/cargoMap/actions';\n\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { simulationFormatMessage, aisFakeMessage } from 'core/model/Vessel';\nvar vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON()\n});\n\nvar getRotation = function getRotation(startPoint, endPoint) {\n  var dx = endPoint[0] - startPoint[0];\n  var dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nvar styleFunction = function styleFunction(feature) {\n  var geometry = feature.getGeometry();\n  var styles = [// linestring\n  new ol.style.Style({\n    stroke: new ol.style.Stroke({\n      color: '#ffcc33',\n      width: 2\n    })\n  })];\n  geometry.forEachSegment(function (start, end) {\n    var rotation = getRotation(start, end);\n    console.log('rotation' + rotation); // arrows\n\n    styles.push(new ol.style.Style({\n      geometry: new ol.geom.Point(end),\n      image: new ol.style.Icon({\n        src: 'resources/icons/arrow.png',\n        anchor: [0.75, 0.5],\n        rotateWithView: true,\n        rotation: rotation\n      })\n    }));\n  });\n  return styles;\n};\n\nfunction Index(_ref) {\n  _s();\n\n  var map = _ref.map,\n      t = _ref.t,\n      dispatch = _ref.dispatch,\n      simulationRoutes = _ref.simulationRoutes,\n      props = _objectWithoutProperties(_ref, [\"map\", \"t\", \"dispatch\", \"simulationRoutes\"]);\n\n  var cargoMap = props.cargoMap;\n  var selectedCargo = cargoMap.selectedCargo;\n\n  var _useState = useState(new ol.Feature()),\n      currentFeature = _useState[0],\n      setCurrentFeature = _useState[1];\n\n  var _useState2 = useState(null),\n      firstCoord = _useState2[0],\n      setFirstCoord = _useState2[1];\n\n  var _selectedCargo$simula = selectedCargo.simulationRoutes,\n      update = _selectedCargo$simula.update,\n      showSimulationRoutes = _selectedCargo$simula.show,\n      SimulationRoutesData = _selectedCargo$simula.data;\n  var createdAtTime = moment().toString();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      openDialog = _React$useState2[0],\n      setOpenDialog = _React$useState2[1];\n\n  var draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString'\n  });\n  var simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction\n  });\n  useEffect(function () {\n    var increaseMinutes = 0;\n\n    if (showSimulationRoutes && selectedCargo.id) {\n      map.addLayer(simulationLayer);\n      map.addInteraction(draw);\n    }\n\n    if (!showSimulationRoutes) {\n      map.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      map.removeLayer(simulationLayer);\n    }\n\n    draw.on('drawend', function (evt) {\n      var feature = evt.feature;\n      var coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      var simulationData = coords.map(function (coordinate, index) {\n        if (index !== 0) {\n          var heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          var longLatCoord = convertCoord2LongLat(coordinate);\n          var timeStamp = formatDateTimeUTC(moment(createdAtTime).add(increaseMinutes, 'minutes').toString(), YYYY_MM_DD_HH_MM_SS);\n          var message = simulationFormatMessage({\n            heading: heading,\n            longLatCoord: longLatCoord,\n            timeStamp: timeStamp\n          });\n          increaseMinutes += 5;\n          return message;\n        }\n      }); // dispatch({\n      //   type: SET_STATE,\n      //   payload: {\n      //     selectedCargo: {\n      //       simulationRoutes: {\n      //         data: { $push: compact(simulationData) },\n      //       },\n      //     },\n      //   },\n      // });\n\n      setCurrentFeature(feature);\n    });\n  }, [showSimulationRoutes, selectedCargo.id]);\n  useEffect(function () {\n    if (currentFeature && update) {\n      var source = simulationLayer.getSource();\n      var coords = SimulationRoutesData.map(function (record) {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      var updateCoords = [firstCoord].concat(coords);\n      var geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n      var simulationData = geometry.getCoordinates().map(function (coordinate, index) {\n        if (index !== 0) {\n          var heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          var longLatCoord = convertCoord2LongLat(coordinate);\n          var timeStamp = SimulationRoutesData[index - 1].timestamp;\n          var speed = SimulationRoutesData[index - 1].speed;\n          var created_at = SimulationRoutesData[index - 1].created_at;\n          var message = simulationFormatMessage({\n            heading: heading,\n            longLatCoord: longLatCoord,\n            timeStamp: timeStamp,\n            speed: speed,\n            created_at: created_at\n          });\n          return message;\n        }\n      }); // dispatch({\n      //   type: SET_STATE,\n      //   payload: {\n      //     selectedCargo: {\n      //       simulationRoutes: {\n      //         data: { $push: compact(simulationData) },\n      //       },\n      //     },\n      //   },\n      // });\n      // dispatch({\n      //   type: SET_STATE,\n      //   payload: {\n      //     selectedCargo: {\n      //       simulationRoutes: {\n      //         update: { $set: !update },\n      //         data: { $set: compact(simulationData) },\n      //       },\n      //     },\n      //   },\n      // });\n    }\n  }, [update]);\n\n  var handleClickClearDraw = function handleClickClearDraw() {\n    map.getInteractions().pop();\n    map.addInteraction(draw);\n  };\n\n  var handleClickClearDrawLayer = function handleClickClearDrawLayer() {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer); // dispatch({\n    //   type: SET_STATE,\n    //   payload: {\n    //     selectedCargo: {\n    //       simulationRoutes: {\n    //         data: { $set: [] },\n    //       },\n    //     },\n    //   },\n    // });\n  };\n\n  var handleClickSend = function handleClickSend() {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    console.log(JSON.stringify(aisFakeMessage(SimulationRoutesData))); // dispatch({\n    //   type: SET_STATE,\n    //   payload: {\n    //     selectedCargo: {\n    //       simulationRoutes: {\n    //         data: { $set: [] },\n    //       },\n    //     },\n    //   },\n    // });\n    // dispatch({\n    //   type: SIMULATE,\n    //   payload: {\n    //     imo: \"123456\",\n    //     SimulationRoutesData,\n    //   },\n    // });\n\n    setOpenDialog(false);\n  };\n\n  var handleCloseDialog = function handleCloseDialog() {\n    setOpenDialog(false);\n  };\n\n  var handleOpenDialog = function handleOpenDialog() {\n    setOpenDialog(true);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(SimulationSettings, {\n    handleClickClearDraw: handleClickClearDraw,\n    handleClickClearDrawLayer: handleClickClearDrawLayer,\n    handleClickSend: handleOpenDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }), __jsx(Dialog, {\n    open: openDialog,\n    onClose: handleCloseDialog,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }\n  }, __jsx(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, 'Create Simulation Data Confirmation?'), __jsx(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, __jsx(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }, \"Please be aware that this simulation data will effect to voyage of current vessel, it is recommended to use on a fake vessel which is not belong to our customer, will you continue?\")), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: handleCloseDialog,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    onClick: handleClickSend,\n    color: \"primary\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n}\n\n_s(Index, \"gmiqAiI9fvz1hibpXyxXRxnvwVs=\");\n\n_c = Index;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cargoMap: state.cargoMap,\n    simulationRoutes: state.cargoMap.selectedCargo.simulationRoutes\n  };\n};\n\nvar enhance = _flowRight([connect(mapStateToProps)]);\n\nexport default _c2 = enhance(Index);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SimulationRoutes/index.tsx"],"names":["connect","useEffect","useState","React","SimulationSettings","convertCoord2LongLat","convertHeadingtoDegree","convertLongLat2Coords","formatDateTimeUTC","YYYY_MM_DD_HH_MM_SS","moment","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","simulationFormatMessage","aisFakeMessage","vectorSource","ol","source","Vector","format","GeoJSON","getRotation","startPoint","endPoint","dx","dy","Math","atan2","styleFunction","feature","geometry","getGeometry","styles","style","Style","stroke","Stroke","color","width","forEachSegment","start","end","rotation","console","log","push","geom","Point","image","Icon","src","anchor","rotateWithView","Index","map","t","dispatch","simulationRoutes","props","cargoMap","selectedCargo","Feature","currentFeature","setCurrentFeature","firstCoord","setFirstCoord","update","showSimulationRoutes","show","SimulationRoutesData","data","createdAtTime","toString","openDialog","setOpenDialog","draw","interaction","Draw","type","simulationLayer","layer","increaseMinutes","id","addLayer","addInteraction","getInteractions","pop","getSource","clear","removeLayer","on","evt","coords","getCoordinates","simulationData","coordinate","index","heading","longLatCoord","timeStamp","add","message","record","longitude","latitude","updateCoords","concat","setCoordinates","addFeature","timestamp","speed","created_at","handleClickClearDraw","handleClickClearDrawLayer","handleClickSend","JSON","stringify","handleCloseDialog","handleOpenDialog","mapStateToProps","state","enhance"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport { flowRight, compact } from 'lodash';\nimport { SimulationSettings } from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map';\n// import { SET_STATE, SIMULATE } from 'redux/cargoMap/actions';\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { simulationFormatMessage, aisFakeMessage } from 'core/model/Vessel';\n\nconst vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON(),\n});\n\nconst getRotation = (startPoint: any, endPoint: any) => {\n  const dx = endPoint[0] - startPoint[0];\n  const dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nconst styleFunction = (feature: any) => {\n  const geometry = feature.getGeometry();\n  const styles = [\n    // linestring\n    new ol.style.Style({\n      stroke: new ol.style.Stroke({\n        color: '#ffcc33',\n        width: 2,\n      }),\n    }),\n  ];\n\n  geometry.forEachSegment(function(start: any, end: any) {\n    const rotation = getRotation(start, end);\n    console.log('rotation' + rotation);\n    // arrows\n    styles.push(\n      new ol.style.Style({\n        geometry: new ol.geom.Point(end),\n        image: new ol.style.Icon({\n          src: 'resources/icons/arrow.png',\n          anchor: [0.75, 0.5],\n          rotateWithView: true,\n          rotation: rotation,\n        }),\n      }),\n    );\n  });\n\n  return styles;\n};\n\nfunction Index({ map, t, dispatch, simulationRoutes, ...props }: any) {\n  const { cargoMap } = props;\n  const { selectedCargo } = cargoMap;\n  const [currentFeature, setCurrentFeature] = useState(new ol.Feature());\n  const [firstCoord, setFirstCoord] = useState(null);\n  const {\n    simulationRoutes: { update, show: showSimulationRoutes, data: SimulationRoutesData },\n  } = selectedCargo;\n  const createdAtTime = moment().toString();\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString',\n  });\n\n  const simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction,\n  });\n\n  useEffect(() => {\n    let increaseMinutes = 0;\n    if (showSimulationRoutes && selectedCargo.id) {\n      map.addLayer(simulationLayer);\n      map.addInteraction(draw);\n    }\n    if (!showSimulationRoutes) {\n      map.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      map.removeLayer(simulationLayer);\n    }\n    draw.on('drawend', function(evt: any) {\n      const feature = evt.feature;\n      const coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      const simulationData = coords.map((coordinate: any, index: number) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = formatDateTimeUTC(\n            moment(createdAtTime)\n              .add(increaseMinutes, 'minutes')\n              .toString(),\n            YYYY_MM_DD_HH_MM_SS,\n          );\n          const message = simulationFormatMessage({ heading, longLatCoord, timeStamp });\n          increaseMinutes += 5;\n\n          return message;\n        }\n      });\n\n      // dispatch({\n      //   type: SET_STATE,\n      //   payload: {\n      //     selectedCargo: {\n      //       simulationRoutes: {\n      //         data: { $push: compact(simulationData) },\n      //       },\n      //     },\n      //   },\n      // });\n\n      setCurrentFeature(feature);\n    });\n  }, [showSimulationRoutes, selectedCargo.id]);\n\n  useEffect(() => {\n    if (currentFeature && update) {\n      const source = simulationLayer.getSource();\n      const coords = SimulationRoutesData.map((record: any) => {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      const updateCoords = [firstCoord].concat(coords);\n      const geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n\n      const simulationData = geometry.getCoordinates().map((coordinate: any, index: number) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = SimulationRoutesData[index - 1].timestamp;\n          const speed = SimulationRoutesData[index - 1].speed;\n          const created_at = SimulationRoutesData[index - 1].created_at;\n          const message = simulationFormatMessage({ heading, longLatCoord, timeStamp, speed, created_at });\n\n          return message;\n        }\n      });\n\n      // dispatch({\n      //   type: SET_STATE,\n      //   payload: {\n      //     selectedCargo: {\n      //       simulationRoutes: {\n      //         data: { $push: compact(simulationData) },\n      //       },\n      //     },\n      //   },\n      // });\n      // dispatch({\n      //   type: SET_STATE,\n      //   payload: {\n      //     selectedCargo: {\n      //       simulationRoutes: {\n      //         update: { $set: !update },\n      //         data: { $set: compact(simulationData) },\n      //       },\n      //     },\n      //   },\n      // });\n    }\n  }, [update]);\n\n  const handleClickClearDraw = () => {\n    map.getInteractions().pop();\n    map.addInteraction(draw);\n  };\n\n  const handleClickClearDrawLayer = () => {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    // dispatch({\n    //   type: SET_STATE,\n    //   payload: {\n    //     selectedCargo: {\n    //       simulationRoutes: {\n    //         data: { $set: [] },\n    //       },\n    //     },\n    //   },\n    // });\n  };\n\n  const handleClickSend = () => {\n    simulationLayer.getSource().clear();\n    map.removeLayer(simulationLayer);\n    map.addLayer(simulationLayer);\n    console.log(JSON.stringify(aisFakeMessage(SimulationRoutesData)));\n    // dispatch({\n    //   type: SET_STATE,\n    //   payload: {\n    //     selectedCargo: {\n    //       simulationRoutes: {\n    //         data: { $set: [] },\n    //       },\n    //     },\n    //   },\n    // });\n    // dispatch({\n    //   type: SIMULATE,\n    //   payload: {\n    //     imo: \"123456\",\n    //     SimulationRoutesData,\n    //   },\n    // });\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  return (\n    <>\n      <SimulationSettings\n        handleClickClearDraw={handleClickClearDraw}\n        handleClickClearDrawLayer={handleClickClearDrawLayer}\n        handleClickSend={handleOpenDialog}\n      />\n      <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{'Create Simulation Data Confirmation?'}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Please be aware that this simulation data will effect to voyage of current vessel, it is recommended to use\n            on a fake vessel which is not belong to our customer, will you continue?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClickSend} color=\"primary\" autoFocus>\n            Send\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\nconst mapStateToProps = (state: any) => ({\n  cargoMap: state.cargoMap,\n  simulationRoutes: state.cargoMap.selectedCargo.simulationRoutes,\n});\nconst enhance = flowRight([connect(mapStateToProps)]);\n\nexport default enhance(Index);\n"]},"metadata":{},"sourceType":"module"}