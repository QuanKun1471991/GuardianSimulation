{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\n\nconst styles = theme => {\n  return {\n    vesselSetting: {\n      position: 'absolute',\n      top: 50,\n      left: -10\n    }\n  };\n};\n\nconst useStyles = makeStyles(styles);\n\nfunction Index(_ref) {\n  let {\n    handleClickSimulation,\n    show\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"handleClickSimulation\", \"show\"]);\n\n  const classes = useStyles();\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  return __jsx(React.Fragment, null, show && __jsx(\"div\", {\n    className: classes.vesselSetting\n  }, __jsx(\"div\", {\n    onClick: handleClickSimulation\n  }, __jsx(IconButton, null, __jsx(AccountTreeIcon, {\n    color: isOpen ? \"primary\" : \"inherit\",\n    onClick: () => setIsOpen(previous => !previous)\n  })))));\n}\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}