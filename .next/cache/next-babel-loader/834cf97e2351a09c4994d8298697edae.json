{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { produce } from \"immer\";\nimport { stringify } from \"querystring\";\nimport axios from \"services/_base/_axios\";\n\nclass PortServices {\n  async fetchAll(params) {\n    const response = await axios.get(`/ports/cargo_related_ports?${stringify(params)}`);\n    const data = {\n      data: {\n        data: response.data.data.map(record => {\n          const attributes = produce(record.attributes, draft => {\n            draft.properties = _objectSpread(_objectSpread({}, draft), draft.properties);\n            delete draft.properties.geometry;\n          });\n          return attributes;\n        }),\n        meta: response.data.meta\n      }\n    };\n    return data;\n  }\n\n}\n\nexport default new PortServices();","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/port/api.ts"],"names":["produce","stringify","axios","PortServices","fetchAll","params","response","get","data","map","record","attributes","draft","properties","geometry","meta"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,MAAMC,YAAN,CAAmB;AACjB,QAAaC,QAAb,CAAsBC,MAAtB,EAAsD;AACpD,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,8BAA6BN,SAAS,CAACI,MAAD,CAAS,EAA1D,CAAvB;AAEA,UAAMG,IAAI,GAAG;AACXA,MAAAA,IAAI,EAAE;AACJA,QAAAA,IAAI,EAAEF,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,GAAnB,CAAwBC,MAAD,IAAY;AACvC,gBAAMC,UAAU,GAAGX,OAAO,CAACU,MAAM,CAACC,UAAR,EAAqBC,KAAD,IAAW;AACvDA,YAAAA,KAAK,CAACC,UAAN,mCAAwBD,KAAxB,GAAkCA,KAAK,CAACC,UAAxC;AACA,mBAAOD,KAAK,CAACC,UAAN,CAAiBC,QAAxB;AACD,WAHyB,CAA1B;AAIA,iBAAOH,UAAP;AACD,SANK,CADF;AAQJI,QAAAA,IAAI,EAAET,QAAQ,CAACE,IAAT,CAAcO;AARhB;AADK,KAAb;AAaA,WAAOP,IAAP;AACD;;AAlBgB;;AAqBnB,eAAe,IAAIL,YAAJ,EAAf","sourcesContent":["import { produce } from \"immer\"\nimport { stringify } from \"querystring\"\nimport axios from \"services/_base/_axios\"\n\nclass PortServices {\n  public async fetchAll(params: Record<\"page\", number>) {\n    const response = await axios.get(`/ports/cargo_related_ports?${stringify(params)}`)\n\n    const data = {\n      data: {\n        data: response.data.data.map((record) => {\n          const attributes = produce(record.attributes, (draft) => {\n            draft.properties = { ...draft, ...draft.properties }\n            delete draft.properties.geometry\n          })\n          return attributes\n        }),\n        meta: response.data.meta,\n      },\n    }\n\n    return data\n  }\n}\n\nexport default new PortServices()\n"]},"metadata":{},"sourceType":"module"}