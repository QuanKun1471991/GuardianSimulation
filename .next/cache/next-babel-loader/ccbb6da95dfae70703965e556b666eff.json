{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport VectorSource from \"ol/source/Vector\";\nimport { Icon, Text, Fill, Stroke, Style, Circle } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport LayerGroup from \"ol/layer/Group\";\nimport { formatPortFeatures } from \"core/model/Map\";\nimport produce from \"immer\";\nconst labelLayerDisplayZoomLevel = 5;\nconst labelLayerScaleZoomLevel = 5;\nconst portLayerScaleZoomLevel = 5;\nconst portForecastStyle = new Style({\n  image: new Icon({\n    src: \"/icons/com_icons.png\",\n    size: [29, 29],\n    offset: [123, 12],\n    scale: 0.2\n  })\n});\nconst portNonForecastStyle = new Style({\n  image: new Circle({\n    radius: 2,\n    fill: new Fill({\n      color: [63, 144, 255]\n    })\n  })\n});\nconst labelStyle = new Style({\n  text: new Text({\n    textAlign: \"center\",\n    textBaseline: \"bottom\",\n    font: \"Bold 15px/3 arial\",\n    fill: new Fill({\n      color: \"white\"\n    }),\n    backgroundFill: new Fill({\n      color: [63, 144, 255]\n    }),\n    backgroundStroke: new Stroke({\n      color: \"white\"\n    }),\n    padding: [0, 5, 0, 5],\n    offsetY: -15\n  })\n});\nconst portLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  })\n});\nconst labelLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  })\n});\nconst layer = new LayerGroup({\n  layers: [portLayer, labelLayer]\n});\n\nconst Index = ({\n  portList,\n  guardianMap\n}) => {\n  const {\n    0: currentZoom,\n    1: setCurrentZoom\n  } = useState(guardianMap.getView().getZoom());\n  useEffect(() => {\n    if (portList.length === 0) {\n      return;\n    }\n\n    const portSource = portLayer.getSource();\n    const labelSource = labelLayer.getSource();\n    const portDataFeatures = selectedPort ? portList.filter(({\n      properties: {\n        id\n      }\n    }) => id === selectedPort.id) : portList;\n    const labelDataFeatures = portDataFeatures.map(item => produce(item, draft => {\n      draft.properties.click_disabled = true;\n    }));\n    portSource.addFeatures(formatPortFeatures(portDataFeatures));\n    labelSource.addFeatures(formatPortFeatures(labelDataFeatures)); // eslint-disable-next-line consistent-return\n\n    return function clearUp() {\n      portSource.clear();\n      labelSource.clear();\n    };\n  }, [selectedPort, portList]);\n\n  const reStylesPortLayer = () => {\n    const source = portLayer.getSource();\n    const features = source.getFeatures();\n    features.map(feature => {\n      const zoom = guardianMap.getView().getZoom();\n      const scale = zoom > portLayerScaleZoomLevel ? 0.5 : 0.4;\n      const newPortForecastStyle = portForecastStyle.clone();\n      newPortForecastStyle.getImage().setScale(scale);\n      const newPortNonForecastStyle = portNonForecastStyle.clone();\n      feature.setStyle(feature.get(\"has_port_forecast\") ? newPortForecastStyle : newPortNonForecastStyle);\n    });\n  };\n\n  const reStylesLabelLayer = () => {\n    const labelSource = labelLayer.getSource();\n    const features = labelSource.getFeatures();\n    features.map(feature => {\n      const zoom = guardianMap.getView().getZoom();\n      const scale = zoom > labelLayerScaleZoomLevel ? 0.4 : 0.2;\n      const newLabelStyle = labelStyle.clone();\n      const text = newLabelStyle.getText();\n      text.setText(zoom > labelLayerDisplayZoomLevel ? feature.getProperties().name : \"\");\n      text.setScale(scale * 1.5);\n      feature.setStyle(newLabelStyle);\n    });\n  };\n\n  useEffect(() => {\n    reStylesPortLayer();\n  }, [portList, guardianMap, reStylesPortLayer]);\n  useEffect(() => {\n    reStylesLabelLayer();\n  }, [portList, guardianMap]);\n  guardianMap.on(\"moveend\", () => {\n    const zoom = guardianMap.getView().getZoom();\n\n    if (zoom > labelLayerDisplayZoomLevel && currentZoom < labelLayerDisplayZoomLevel || zoom < labelLayerDisplayZoomLevel && currentZoom > labelLayerDisplayZoomLevel) {\n      reStylesLabelLayer();\n    }\n\n    setCurrentZoom(zoom);\n  });\n  useEffect(() => {\n    guardianMap.addLayer(layer);\n  }, [guardianMap]);\n  return null;\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/Port/index.tsx"],"names":["useEffect","useState","VectorSource","Icon","Text","Fill","Stroke","Style","Circle","GeoJSON","VectorLayer","LayerGroup","formatPortFeatures","produce","labelLayerDisplayZoomLevel","labelLayerScaleZoomLevel","portLayerScaleZoomLevel","portForecastStyle","image","src","size","offset","scale","portNonForecastStyle","radius","fill","color","labelStyle","text","textAlign","textBaseline","font","backgroundFill","backgroundStroke","padding","offsetY","portLayer","source","format","labelLayer","layer","layers","Index","portList","guardianMap","currentZoom","setCurrentZoom","getView","getZoom","length","portSource","getSource","labelSource","portDataFeatures","selectedPort","filter","properties","id","labelDataFeatures","map","item","draft","click_disabled","addFeatures","clearUp","clear","reStylesPortLayer","features","getFeatures","feature","zoom","newPortForecastStyle","clone","getImage","setScale","newPortNonForecastStyle","setStyle","get","reStylesLabelLayer","newLabelStyle","getText","setText","getProperties","name","on","addLayer"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\"\nimport Map from \"ol/Map\"\nimport VectorSource from \"ol/source/Vector\"\nimport { Icon, Text, Fill, Stroke, Style, Circle } from \"ol/style\"\nimport GeoJSON from \"ol/format/GeoJSON\"\nimport VectorLayer from \"ol/layer/Vector\"\nimport LayerGroup from \"ol/layer/Group\"\nimport { formatPortFeatures, FeaturesProfile } from \"core/model/Map\"\nimport produce from \"immer\"\nimport { Feature } from \"ol\"\n\nconst labelLayerDisplayZoomLevel = 5\nconst labelLayerScaleZoomLevel = 5\nconst portLayerScaleZoomLevel = 5\n\nconst portForecastStyle = new Style({\n  image: new Icon({\n    src: \"/icons/com_icons.png\",\n    size: [29, 29],\n    offset: [123, 12],\n    scale: 0.2,\n  }),\n})\nconst portNonForecastStyle = new Style({\n  image: new Circle({\n    radius: 2,\n    fill: new Fill({ color: [63, 144, 255] }),\n  }),\n})\n\nconst labelStyle = new Style({\n  text: new Text({\n    textAlign: \"center\",\n    textBaseline: \"bottom\",\n    font: \"Bold 15px/3 arial\",\n    fill: new Fill({ color: \"white\" }),\n    backgroundFill: new Fill({ color: [63, 144, 255] }),\n    backgroundStroke: new Stroke({ color: \"white\" }),\n    padding: [0, 5, 0, 5],\n    offsetY: -15,\n  }),\n})\n\nconst portLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON(),\n  }),\n})\n\nconst labelLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON(),\n  }),\n})\nconst layer = new LayerGroup({\n  layers: [portLayer, labelLayer],\n})\n\ninterface PortLayerProps {\n  guardianMap: Map\n  portList: []\n}\n\nconst Index = ({ portList, guardianMap }: PortLayerProps) => {\n  const [currentZoom, setCurrentZoom] = useState(guardianMap.getView().getZoom())\n  useEffect(() => {\n    if (portList.length === 0) {\n      return\n    }\n\n    const portSource = portLayer.getSource()\n    const labelSource = labelLayer.getSource()\n\n    const portDataFeatures = selectedPort\n      ? portList.filter(({ properties: { id } }: any) => id === selectedPort.id)\n      : portList\n\n    const labelDataFeatures = portDataFeatures.map((item: FeaturesProfile) =>\n      produce(item, (draft) => {\n        draft.properties.click_disabled = true\n      })\n    )\n\n    portSource.addFeatures(formatPortFeatures(portDataFeatures))\n    labelSource.addFeatures(formatPortFeatures(labelDataFeatures))\n\n    // eslint-disable-next-line consistent-return\n    return function clearUp() {\n      portSource.clear()\n      labelSource.clear()\n    }\n  }, [selectedPort, portList])\n\n  const reStylesPortLayer = () => {\n    const source = portLayer.getSource()\n    const features = source.getFeatures()\n    features.map((feature) => {\n      const zoom = guardianMap.getView().getZoom()\n      const scale = zoom > portLayerScaleZoomLevel ? 0.5 : 0.4\n      const newPortForecastStyle = portForecastStyle.clone()\n      newPortForecastStyle.getImage().setScale(scale)\n      const newPortNonForecastStyle = portNonForecastStyle.clone()\n      feature.setStyle(\n        feature.get(\"has_port_forecast\") ? newPortForecastStyle : newPortNonForecastStyle\n      )\n    })\n  }\n\n  const reStylesLabelLayer = () => {\n    const labelSource = labelLayer.getSource()\n    const features = labelSource.getFeatures()\n    features.map((feature) => {\n      const zoom = guardianMap.getView().getZoom()\n      const scale = zoom > labelLayerScaleZoomLevel ? 0.4 : 0.2\n      const newLabelStyle = labelStyle.clone()\n      const text = newLabelStyle.getText()\n      text.setText(zoom > labelLayerDisplayZoomLevel ? feature.getProperties().name : \"\")\n      text.setScale(scale * 1.5)\n      feature.setStyle(newLabelStyle)\n    })\n  }\n\n  useEffect(() => {\n    reStylesPortLayer()\n  }, [portList, guardianMap, reStylesPortLayer])\n\n  useEffect(() => {\n    reStylesLabelLayer()\n  }, [portList, guardianMap])\n\n  guardianMap.on(\"moveend\", () => {\n    const zoom = guardianMap.getView().getZoom()\n    if (\n      (zoom > labelLayerDisplayZoomLevel && currentZoom < labelLayerDisplayZoomLevel) ||\n      (zoom < labelLayerDisplayZoomLevel && currentZoom > labelLayerDisplayZoomLevel)\n    ) {\n      reStylesLabelLayer()\n    }\n    setCurrentZoom(zoom)\n  })\n\n  useEffect(() => {\n    guardianMap.addLayer(layer)\n  }, [guardianMap])\n\n  return null\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}