{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport GeoJSON from \"ol/format/GeoJSON\";\nexport let MapLayers;\n\n(function (MapLayers) {\n  MapLayers[\"Vessel\"] = \"vessel\";\n  MapLayers[\"Port\"] = \"port\";\n})(MapLayers || (MapLayers = {}));\n\nconst defaultGeojsonObject = {\n  type: \"FeatureCollection\",\n  crs: {\n    type: \"name\",\n    properties: {\n      name: \"EPSG:4326\"\n    }\n  }\n};\nexport function deg2Rad(_degree) {\n  const degree = Number(_degree);\n  return degree ? degree / 180 * Math.PI : 0;\n}\nexport const CONVERT_PROJECTION = {\n  featureProjection: \"EPSG:3857\",\n  dataProjection: \"EPSG:4326\"\n};\nexport const convertCoord2LongLat = data => {\n  return ol.proj.transform(data, 'EPSG:3857', 'EPSG:4326');\n};\nexport const convertLongLat2Coords = data => {\n  return ol.proj.transform(data, 'EPSG:4326', 'EPSG:3857');\n};\nexport const getHeadingRad = (_degree, offset = Math.PI / 2) => {\n  const degree = deg2Rad(_degree);\n  return degree - offset;\n};\nexport const formatPortFeatures = features => {\n  const geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features\n  });\n\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};\nexport const formatVesselFeatures = dataFeatures => {\n  const features = dataFeatures.map(feature => ({\n    properties: feature.properties,\n    geometry: feature.geometry,\n    type: \"Feature\"\n  }));\n\n  const geoJson = _objectSpread(_objectSpread({}, defaultGeojsonObject), {}, {\n    features\n  });\n\n  debugger;\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson);\n};","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/core/model/Map/index.tsx"],"names":["GeoJSON","MapLayers","defaultGeojsonObject","type","crs","properties","name","deg2Rad","_degree","degree","Number","Math","PI","CONVERT_PROJECTION","featureProjection","dataProjection","convertCoord2LongLat","data","ol","proj","transform","convertLongLat2Coords","getHeadingRad","offset","formatPortFeatures","features","geoJson","readFeatures","formatVesselFeatures","dataFeatures","map","feature","geometry"],"mappings":";;;;;;AACA,OAAOA,OAAP,MAAoB,mBAApB;AAEA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAgBZ,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,IAAI,EAAE,mBADqB;AAE3BC,EAAAA,GAAG,EAAE;AACHD,IAAAA,IAAI,EAAE,MADH;AAEHE,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AADI;AAFT;AAFsB,CAA7B;AASA,OAAO,SAASC,OAAT,CAAiBC,OAAjB,EAAuC;AAC5C,QAAMC,MAAM,GAAGC,MAAM,CAACF,OAAD,CAArB;AACA,SAAOC,MAAM,GAAIA,MAAM,GAAG,GAAV,GAAiBE,IAAI,CAACC,EAAzB,GAA8B,CAA3C;AACD;AAED,OAAO,MAAMC,kBAAkB,GAAG;AAChCC,EAAAA,iBAAiB,EAAE,WADa;AAEhCC,EAAAA,cAAc,EAAE;AAFgB,CAA3B;AAKP,OAAO,MAAMC,oBAAoB,GAAIC,IAAD,IAAmB;AACrD,SAAOC,EAAE,CAACC,IAAH,CAAQC,SAAR,CAAkBH,IAAlB,EAAwB,WAAxB,EAAqC,WAArC,CAAP;AACD,CAFM;AAGP,OAAO,MAAMI,qBAAqB,GAAIJ,IAAD,IAAoB;AACvD,SAAOC,EAAE,CAACC,IAAH,CAAQC,SAAR,CAAkBH,IAAlB,EAAwB,WAAxB,EAAqC,WAArC,CAAP;AACD,CAFM;AAKP,OAAO,MAAMK,aAAa,GAAG,CAACd,OAAD,EAAee,MAAM,GAAGZ,IAAI,CAACC,EAAL,GAAU,CAAlC,KAAiD;AAC5E,QAAMH,MAAM,GAAGF,OAAO,CAACC,OAAD,CAAtB;AACA,SAAOC,MAAM,GAAGc,MAAhB;AACD,CAHM;AAKP,OAAO,MAAMC,kBAAkB,GAAIC,QAAD,IAAiC;AACjE,QAAMC,OAAO,mCAAQxB,oBAAR;AAA8BuB,IAAAA;AAA9B,IAAb;;AACA,SAAO,IAAIzB,OAAJ,CAAYa,kBAAZ,EAAgCc,YAAhC,CAA6CD,OAA7C,CAAP;AACD,CAHM;AAKP,OAAO,MAAOE,oBAAoB,GAAGC,YAAD,IAAqC;AACvE,QAAMJ,QAAQ,GAAGI,YAAY,CAACC,GAAb,CAAkBC,OAAD,KAAmB;AACnD1B,IAAAA,UAAU,EAAE0B,OAAO,CAAC1B,UAD+B;AAEnD2B,IAAAA,QAAQ,EAAED,OAAO,CAACC,QAFiC;AAGnD7B,IAAAA,IAAI,EAAE;AAH6C,GAAnB,CAAjB,CAAjB;;AAMA,QAAMuB,OAAO,mCAAQxB,oBAAR;AAA8BuB,IAAAA;AAA9B,IAAb;;AACA;AACA,SAAO,IAAIzB,OAAJ,CAAYa,kBAAZ,EAAgCc,YAAhC,CAA6CD,OAA7C,CAAP;AACD,CAVM","sourcesContent":["import produce from \"immer\"\nimport GeoJSON from \"ol/format/GeoJSON\"\n\nexport enum MapLayers {\n  Vessel = \"vessel\",\n  Port = \"port\",\n}\n\nexport interface GeometryProfile {\n  type: \"Point\" | string\n  coordinates: Array<number>\n}\n\nexport interface FeaturesProfile {\n  type: \"Feature\"\n  geometry: GeometryProfile\n  properties?: any\n}\n\nconst defaultGeojsonObject = {\n  type: \"FeatureCollection\",\n  crs: {\n    type: \"name\",\n    properties: {\n      name: \"EPSG:4326\",\n    },\n  },\n}\nexport function deg2Rad(_degree: any): number {\n  const degree = Number(_degree)\n  return degree ? (degree / 180) * Math.PI : 0\n}\n\nexport const CONVERT_PROJECTION = {\n  featureProjection: \"EPSG:3857\",\n  dataProjection: \"EPSG:4326\",\n}\n\nexport const convertCoord2LongLat = (data: number[])=> {\n  return ol.proj.transform(data, 'EPSG:3857', 'EPSG:4326');\n}\nexport const convertLongLat2Coords = (data: number[]) => {\n  return ol.proj.transform(data, 'EPSG:4326', 'EPSG:3857');\n}\n\n\nexport const getHeadingRad = (_degree: any, offset = Math.PI / 2): number  => {\n  const degree = deg2Rad(_degree)\n  return degree - offset\n}\n\nexport const formatPortFeatures = (features: FeaturesProfile[]) => {\n  const geoJson = { ...defaultGeojsonObject, features }\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson)\n}\n\nexport const  formatVesselFeatures =(dataFeatures: FeaturesProfile[]) => {\n  const features = dataFeatures.map((feature: any) => ({\n    properties: feature.properties,\n    geometry: feature.geometry,\n    type: \"Feature\"\n\n  }))\n  const geoJson = { ...defaultGeojsonObject, features }\n  debugger\n  return new GeoJSON(CONVERT_PROJECTION).readFeatures(geoJson)\n}\n"]},"metadata":{},"sourceType":"module"}