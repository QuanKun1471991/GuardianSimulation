{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport produce from \"immer\";\n\nconst genReducers = (initialState, actions) => {\n  const reducer = (state = initialState, action) => {\n    return produce(state, draft => {\n      switch (action.type) {\n        case actions.SET_STATE:\n          {\n            const _action$payload = action.payload,\n                  {\n              field\n            } = _action$payload,\n                  newState = _objectWithoutProperties(_action$payload, [\"field\"]);\n\n            const prevState = state[field];\n\n            if (field) {\n              draft[field] = _objectSpread(_objectSpread({}, prevState), newState);\n              return draft;\n            }\n\n            return _objectSpread(_objectSpread({}, state), newState);\n          }\n\n        case actions.RESET_STATE:\n          {\n            const _ref = action.payload || {},\n                  {\n              field\n            } = _ref,\n                  rest = _objectWithoutProperties(_ref, [\"field\"]);\n\n            if (field) {\n              draft[field] = _objectSpread(_objectSpread({}, initialState[field]), rest);\n              return draft;\n            }\n\n            return initialState;\n          }\n\n        default:\n          {\n            return state;\n          }\n      }\n    });\n  };\n\n  return reducer;\n};\n\nexport default genReducers;","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/_base/reducers.ts"],"names":["produce","genReducers","initialState","actions","reducer","state","action","draft","type","SET_STATE","payload","field","newState","prevState","RESET_STATE","rest"],"mappings":";;;;;;;;;;AAAA;AACA,OAAOA,OAAP,MAA+B,OAA/B;;AAOA,MAAMC,WAAW,GAAG,CAClBC,YADkB,EAElBC,OAFkB,KAGQ;AAC1B,QAAMC,OAAO,GAAG,CACdC,KAAK,GAAGH,YADM,EAEdI,MAFc,KAGX;AACH,WAAON,OAAO,CAAeK,KAAf,EAAuBE,KAAD,IAET;AACzB,cAAQD,MAAM,CAACE,IAAf;AACE,aAAKL,OAAO,CAACM,SAAb;AAAwB;AACtB,oCAA+BH,MAAM,CAACI,OAAtC;AAAA,kBAAM;AAAEC,cAAAA;AAAF,aAAN;AAAA,kBAAkBC,QAAlB;;AACA,kBAAMC,SAAS,GAAGR,KAAK,CAACM,KAAD,CAAvB;;AAEA,gBAAIA,KAAJ,EAAW;AACTJ,cAAAA,KAAK,CAACI,KAAD,CAAL,mCAAoBE,SAApB,GAAkCD,QAAlC;AAEA,qBAAOL,KAAP;AACD;;AAED,mDAAYF,KAAZ,GAAsBO,QAAtB;AACD;;AAED,aAAKT,OAAO,CAACW,WAAb;AAA0B;AACxB,yBAA2BR,MAAM,CAACI,OAAP,IAAkB,EAA7C;AAAA,kBAAM;AAAEC,cAAAA;AAAF,aAAN;AAAA,kBAAkBI,IAAlB;;AAEA,gBAAIJ,KAAJ,EAAW;AACTJ,cAAAA,KAAK,CAACI,KAAD,CAAL,mCAAoBT,YAAY,CAACS,KAAD,CAAhC,GAA4CI,IAA5C;AAEA,qBAAOR,KAAP;AACD;;AAED,mBAAOL,YAAP;AACD;;AAED;AAAS;AACP,mBAAOG,KAAP;AACD;AA5BH;AA8BD,KAjCa,CAAd;AAkCD,GAtCD;;AAuCA,SAAOD,OAAP;AACD,CA5CD;;AA8CA,eAAeH,WAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport produce, { Draft } from \"immer\"\nimport { Reducer } from \"redux\"\n\ninterface AnyActions {\n  [key: string]: string\n}\n\nconst genReducers = <InitialState, Actions extends AnyActions>(\n  initialState: InitialState,\n  actions: Actions\n): Reducer<InitialState> => {\n  const reducer = (\n    state = initialState,\n    action: { type: keyof Actions; payload: Record<string, any> }\n  ) => {\n    return produce<InitialState>(state, (draft: Draft<InitialState>):\n      | InitialState\n      | Draft<InitialState> => {\n      switch (action.type) {\n        case actions.SET_STATE: {\n          const { field, ...newState } = action.payload\n          const prevState = state[field]\n\n          if (field) {\n            draft[field] = { ...prevState, ...newState }\n\n            return draft\n          }\n\n          return { ...state, ...newState }\n        }\n\n        case actions.RESET_STATE: {\n          const { field, ...rest } = action.payload || {}\n\n          if (field) {\n            draft[field] = { ...initialState[field], ...rest }\n\n            return draft\n          }\n\n          return initialState\n        }\n\n        default: {\n          return state\n        }\n      }\n    })\n  }\n  return reducer\n}\n\nexport default genReducers\n"]},"metadata":{},"sourceType":"module"}