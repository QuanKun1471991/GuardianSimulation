{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport VectorSource from \"ol/source/Vector\";\nimport { Icon, Text, Fill, Stroke, Style, Circle } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport LayerGroup from \"ol/layer/Group\";\nimport { formatPortFeatures } from \"core/model/Map\";\nimport produce from \"immer\";\nconst labelLayerDisplayZoomLevel = 5;\nconst labelLayerScaleZoomLevel = 5;\nconst portLayerScaleZoomLevel = 5;\nconst portForecastStyle = new Style({\n  image: new Icon({\n    src: \"/icons/com_icons.png\",\n    size: [29, 29],\n    offset: [123, 12],\n    scale: 0.2\n  })\n});\nconst portNonForecastStyle = new Style({\n  image: new Circle({\n    radius: 2,\n    fill: new Fill({\n      color: [63, 144, 255]\n    })\n  })\n});\nconst labelStyle = new Style({\n  text: new Text({\n    textAlign: \"center\",\n    textBaseline: \"bottom\",\n    font: \"Bold 15px/3 arial\",\n    fill: new Fill({\n      color: \"white\"\n    }),\n    backgroundFill: new Fill({\n      color: [63, 144, 255]\n    }),\n    backgroundStroke: new Stroke({\n      color: \"white\"\n    }),\n    padding: [0, 5, 0, 5],\n    offsetY: -15\n  })\n});\nconst portLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  })\n});\nconst labelLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  })\n});\nconst layer = new LayerGroup({\n  layers: [portLayer, labelLayer]\n});\n\nconst Index = ({\n  selectedPort,\n  portList,\n  guardianMap\n}) => {\n  const {\n    0: currentZoom,\n    1: setCurrentZoom\n  } = useState(guardianMap.getView().getZoom());\n  useEffect(() => {\n    if (portList.length === 0) {\n      return;\n    }\n\n    const portSource = portLayer.getSource();\n    const labelSource = labelLayer.getSource();\n    const portDataFeatures = selectedPort ? portList.filter(({\n      properties: {\n        id\n      }\n    }) => id === selectedPort.id) : portList;\n    const labelDataFeatures = portDataFeatures.map(item => produce(item, draft => {\n      draft.properties.click_disabled = true;\n    }));\n    portSource.addFeatures(formatPortFeatures(portDataFeatures));\n    labelSource.addFeatures(formatPortFeatures(labelDataFeatures)); // eslint-disable-next-line consistent-return\n\n    return function clearUp() {\n      portSource.clear();\n      labelSource.clear();\n    };\n  }, [selectedPort, portList]);\n\n  const reStylesPortLayer = () => {\n    const source = portLayer.getSource();\n    const features = source.getFeatures();\n    features.map(feature => {\n      const zoom = guardianMap.getView().getZoom();\n      const scale = zoom > portLayerScaleZoomLevel ? 0.5 : 0.4;\n      const newPortForecastStyle = portForecastStyle.clone();\n      newPortForecastStyle.getImage().setScale(scale);\n      const newPortNonForecastStyle = portNonForecastStyle.clone();\n      feature.setStyle(feature.get(\"has_port_forecast\") ? newPortForecastStyle : newPortNonForecastStyle);\n    });\n  };\n\n  const reStylesLabelLayer = () => {\n    const labelSource = labelLayer.getSource();\n    const features = labelSource.getFeatures();\n    features.map(feature => {\n      const zoom = guardianMap.getView().getZoom();\n      const scale = zoom > labelLayerScaleZoomLevel ? 0.4 : 0.2;\n      const newLabelStyle = labelStyle.clone();\n      const text = newLabelStyle.getText();\n      text.setText(zoom > labelLayerDisplayZoomLevel ? feature.getProperties().name : \"\");\n      text.setScale(scale * 1.5);\n      feature.setStyle(newLabelStyle);\n    });\n  };\n\n  useEffect(() => {\n    reStylesPortLayer();\n  }, [portList, guardianMap, reStylesPortLayer]);\n  useEffect(() => {\n    reStylesLabelLayer();\n  }, [portList, guardianMap]);\n  guardianMap.on(\"moveend\", () => {\n    const zoom = guardianMap.getView().getZoom();\n\n    if (zoom > labelLayerDisplayZoomLevel && currentZoom < labelLayerDisplayZoomLevel || zoom < labelLayerDisplayZoomLevel && currentZoom > labelLayerDisplayZoomLevel) {\n      reStylesLabelLayer();\n    }\n\n    setCurrentZoom(zoom);\n  });\n  useEffect(() => {\n    guardianMap.addLayer(layer);\n  }, [guardianMap]);\n  return null;\n};\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}