{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isString from \"lodash/isString\";\nimport checkStore, { invariant } from \"core/utils/redux\";\nimport produce from \"immer\";\nimport createReducer from \"services/reducers\";\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    var _store$injectedReduce;\n\n    if (!isValid) {\n      checkStore(store);\n    }\n\n    invariant(_isString(key) && !_isEmpty(key) && _isFunction(reducer), \"(app/utils...) injectReducer: Expected `reducer` to be a reducer function\");\n\n    if (Reflect.has((store === null || store === void 0 ? void 0 : store.injectedReducers) || {}, key) && ((_store$injectedReduce = store.injectedReducers) === null || _store$injectedReduce === void 0 ? void 0 : _store$injectedReduce[key]) === reducer) {\n      return;\n    }\n\n    const newStore = produce(store, draft => {\n      draft.injectedReducers[key] = reducer;\n    });\n    newStore.replaceReducer(createReducer(newStore.injectedReducers));\n  };\n}\nexport default function getInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/_base/injectReducers.ts"],"names":["checkStore","invariant","produce","createReducer","injectReducerFactory","store","isValid","injectReducer","key","reducer","Reflect","has","injectedReducers","newStore","draft","replaceReducer","getInjectors"],"mappings":";;;AAAA,OAAOA,UAAP,IAAqBC,SAArB,QAAsC,kBAAtC;AACA,OAAOC,OAAP,MAAoB,OAApB;AAGA,OAAOC,aAAP,MAA0B,mBAA1B;AAGA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAoDC,OAApD,EAAsE;AAC3E,SAAO,SAASC,aAAT,CAAuBC,GAAvB,EAAsDC,OAAtD,EAAwE;AAAA;;AAC7E,QAAI,CAACH,OAAL,EAAc;AACZN,MAAAA,UAAU,CAACK,KAAD,CAAV;AACD;;AAEDJ,IAAAA,SAAS,CACP,UAASO,GAAT,KAAiB,CAAC,SAAQA,GAAR,CAAlB,IAAkC,YAAWC,OAAX,CAD3B,EAEP,2EAFO,CAAT;;AAKA,QACEC,OAAO,CAACC,GAAR,CAAY,CAAAN,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEO,gBAAP,KAA2B,EAAvC,EAA2CJ,GAA3C,KACA,0BAAAH,KAAK,CAACO,gBAAN,gFAAyBJ,GAAzB,OAAkCC,OAFpC,EAGE;AACA;AACD;;AAED,UAAMI,QAAQ,GAAGX,OAAO,CAACG,KAAD,EAASS,KAAD,IAAW;AACzCA,MAAAA,KAAK,CAACF,gBAAN,CAAuBJ,GAAvB,IAA8BC,OAA9B;AACD,KAFuB,CAAxB;AAIAI,IAAAA,QAAQ,CAACE,cAAT,CAAwBZ,aAAa,CAACU,QAAQ,CAACD,gBAAV,CAArC;AACD,GAtBD;AAuBD;AAED,eAAe,SAASI,YAAT,CAAsBX,KAAtB,EAA4C;AACzDL,EAAAA,UAAU,CAACK,KAAD,CAAV;AAEA,SAAO;AACLE,IAAAA,aAAa,EAAEH,oBAAoB,CAACC,KAAD,EAAQ,IAAR;AAD9B,GAAP;AAGD","sourcesContent":["import checkStore, { invariant } from \"core/utils/redux\"\nimport produce from \"immer\"\nimport { isEmpty, isFunction, isString } from \"lodash\"\nimport { Reducer } from \"redux\"\nimport createReducer from \"services/reducers\"\nimport { InjectedStore } from \"types/redux\"\n\nexport function injectReducerFactory(store: InjectedStore, isValid: boolean) {\n  return function injectReducer(key: string | number | symbol, reducer: Reducer) {\n    if (!isValid) {\n      checkStore(store)\n    }\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      \"(app/utils...) injectReducer: Expected `reducer` to be a reducer function\"\n    )\n\n    if (\n      Reflect.has(store?.injectedReducers || {}, key) &&\n      store.injectedReducers?.[key] === reducer\n    ) {\n      return\n    }\n\n    const newStore = produce(store, (draft) => {\n      draft.injectedReducers[key] = reducer\n    })\n\n    newStore.replaceReducer(createReducer(newStore.injectedReducers))\n  }\n}\n\nexport default function getInjectors(store: InjectedStore) {\n  checkStore(store)\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}