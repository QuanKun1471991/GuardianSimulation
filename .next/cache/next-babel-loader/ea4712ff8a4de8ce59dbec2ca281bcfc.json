{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport VectorSource from \"ol/source/Vector\";\nimport { Icon, Text, Fill, Stroke, Style, Circle } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport LayerGroup from \"ol/layer/Group\";\nimport { formatPortFeatures } from \"core/model/Map\";\nimport produce from \"immer\";\nvar labelLayerDisplayZoomLevel = 5;\nvar labelLayerScaleZoomLevel = 5;\nvar portLayerScaleZoomLevel = 5;\nvar portForecastStyle = new Style({\n  image: new Icon({\n    src: \"/icons/com_icons.png\",\n    size: [29, 29],\n    offset: [123, 12],\n    scale: 0.2\n  })\n});\nvar portNonForecastStyle = new Style({\n  image: new Circle({\n    radius: 2,\n    fill: new Fill({\n      color: [63, 144, 255]\n    })\n  })\n});\nvar labelStyle = new Style({\n  text: new Text({\n    textAlign: \"center\",\n    textBaseline: \"bottom\",\n    font: \"Bold 15px/3 arial\",\n    fill: new Fill({\n      color: \"white\"\n    }),\n    backgroundFill: new Fill({\n      color: [63, 144, 255]\n    }),\n    backgroundStroke: new Stroke({\n      color: \"white\"\n    }),\n    padding: [0, 5, 0, 5],\n    offsetY: -15\n  })\n});\nvar portLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  })\n});\nvar labelLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  })\n});\nvar layer = new LayerGroup({\n  layers: [portLayer, labelLayer]\n});\n\nvar Index = function Index(_ref) {\n  var selectedPort = _ref.selectedPort,\n      portList = _ref.portList,\n      guardianMap = _ref.guardianMap;\n\n  var _useState = useState(guardianMap.getView().getZoom()),\n      currentZoom = _useState[0],\n      setCurrentZoom = _useState[1];\n\n  useEffect(function () {\n    if (portList.length === 0) {\n      return;\n    }\n\n    var portSource = portLayer.getSource();\n    var labelSource = labelLayer.getSource();\n    var portDataFeatures = selectedPort ? portList.filter(function (_ref2) {\n      var id = _ref2.properties.id;\n      return id === selectedPort.id;\n    }) : portList;\n    var labelDataFeatures = portDataFeatures.map(function (item) {\n      return produce(item, function (draft) {\n        draft.properties.click_disabled = true;\n      });\n    });\n    portSource.addFeatures(formatPortFeatures(portDataFeatures));\n    labelSource.addFeatures(formatPortFeatures(labelDataFeatures)); // eslint-disable-next-line consistent-return\n\n    return function clearUp() {\n      portSource.clear();\n      labelSource.clear();\n    };\n  }, [selectedPort, portList]);\n\n  var reStylesPortLayer = function reStylesPortLayer() {\n    var source = portLayer.getSource();\n    var features = source.getFeatures();\n    features.map(function (feature) {\n      var zoom = guardianMap.getView().getZoom();\n      var scale = zoom > portLayerScaleZoomLevel ? 0.5 : 0.4;\n      var newPortForecastStyle = portForecastStyle.clone();\n      newPortForecastStyle.getImage().setScale(scale);\n      var newPortNonForecastStyle = portNonForecastStyle.clone();\n      feature.setStyle(feature.get(\"has_port_forecast\") ? newPortForecastStyle : newPortNonForecastStyle);\n    });\n  };\n\n  var reStylesLabelLayer = function reStylesLabelLayer() {\n    var labelSource = labelLayer.getSource();\n    var features = labelSource.getFeatures();\n    features.map(function (feature) {\n      var zoom = guardianMap.getView().getZoom();\n      var scale = zoom > labelLayerScaleZoomLevel ? 0.4 : 0.2;\n      var newLabelStyle = labelStyle.clone();\n      var text = newLabelStyle.getText();\n      text.setText(zoom > labelLayerDisplayZoomLevel ? feature.getProperties().name : \"\");\n      text.setScale(scale * 1.5);\n      feature.setStyle(newLabelStyle);\n    });\n  };\n\n  useEffect(function () {\n    reStylesPortLayer();\n  }, [portList, guardianMap, reStylesPortLayer]);\n  useEffect(function () {\n    reStylesLabelLayer();\n  }, [portList, guardianMap]);\n  guardianMap.on(\"moveend\", function () {\n    var zoom = guardianMap.getView().getZoom();\n\n    if (zoom > labelLayerDisplayZoomLevel && currentZoom < labelLayerDisplayZoomLevel || zoom < labelLayerDisplayZoomLevel && currentZoom > labelLayerDisplayZoomLevel) {\n      reStylesLabelLayer();\n    }\n\n    setCurrentZoom(zoom);\n  });\n  useEffect(function () {\n    guardianMap.addLayer(layer);\n  }, [guardianMap]);\n  return null;\n};\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}