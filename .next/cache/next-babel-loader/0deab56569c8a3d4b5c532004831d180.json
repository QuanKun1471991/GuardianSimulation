{"ast":null,"code":"import _get from \"lodash/get\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { memo, useCallback, useEffect, useState } from \"react\";\nimport \"assets/styles/dashboard.scss\";\nimport { useInjectReducer } from \"core/hooks/useInjectReducer\";\nimport useInjectSaga from \"core/hooks/useInjectSaga\";\nimport vesselReducer from \"services/vessel/reducers\";\nimport portReducer from \"services/port/reducers\";\nimport vesselSaga from \"services/vessel/sagas\";\nimport portSaga from \"services/port/sagas\";\nimport { SagaInjectionModes } from \"core/constants/common\";\nimport { VesselSelector } from \"services/vessel/selectors\";\nimport { PortSelector } from \"services/port/selectors\";\nimport { fetchAll as fetchAllVessel } from \"services/vessel/actions\";\nimport { fetchAll as fetchAllPort } from \"services/port/actions\";\nimport Drawer from \"components/Drawer\";\nimport dynamic from \"next/dynamic\";\nimport { LayoutSelector } from \"services/layout/selectors\";\nimport { BaseFunctions } from \"services/vessel/actions\";\nconst BaseMap = dynamic(() => import(\"components/BaseMap\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/BaseMap\")],\n    modules: [\"components/BaseMap\"]\n  }\n});\nconst VesselLayer = dynamic(() => import(\"components/Layers/Vessel\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/Vessel\")],\n    modules: [\"components/Layers/Vessel\"]\n  }\n});\nconst PortLayer = dynamic(() => import(\"components/Layers/Port\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/Port\")],\n    modules: [\"components/Layers/Port\"]\n  }\n});\nconst SelectedLayer = dynamic(() => import(\"components/Layers/SelectedFeature\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/SelectedFeature\")],\n    modules: [\"components/Layers/SelectedFeature\"]\n  }\n});\nconst SimulationRoutesLayer = dynamic(() => import(\"components/Layers/SimulationRoutes\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/Layers/SimulationRoutes\")],\n    modules: [\"components/Layers/SimulationRoutes\"]\n  }\n});\nconst SimulationReSult = dynamic(() => import(\"components/SimulationResults\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/SimulationResults\")],\n    modules: [\"components/SimulationResults\"]\n  }\n});\nconst VesselSettings = dynamic(() => import(\"components/VesselSettings\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/VesselSettings\")],\n    modules: [\"components/VesselSettings\"]\n  }\n});\nconst errorMessage = {\n  vessel: {\n    fetching: \"Fetching Cargo Data \",\n    fetched: \"Fetched Cargo Data successfully\"\n  },\n  port: {\n    fetching: \"Fetching Port Data\",\n    fetched: \"Fetched Port Data successfully\"\n  }\n};\n\nconst Dashboard = () => {\n  useInjectReducer({\n    key: \"vessel\",\n    reducer: vesselReducer\n  });\n  useInjectSaga({\n    key: \"vessel\",\n    saga: vesselSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n  useInjectReducer({\n    key: \"port\",\n    reducer: portReducer\n  });\n  useInjectSaga({\n    key: \"port\",\n    saga: portSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n  const {\n    data: veselList,\n    selectedVessel\n  } = useSelector(VesselSelector);\n  const {\n    data: portList\n  } = useSelector(PortSelector);\n  const {\n    isCollapsed\n  } = useSelector(LayoutSelector);\n  const dispatch = useDispatch();\n  const {\n    0: guardianMap,\n    1: setGuardianMap\n  } = useState(null);\n  const {\n    0: selectedFeature,\n    1: setSelectedFeature\n  } = useState(null);\n  const {\n    0: isShowVesselInfo,\n    1: setIsShowVesselInfo\n  } = useState(false);\n  const {\n    name,\n    simulationRoutes: {\n      show\n    }\n  } = selectedVessel;\n  const zoomAfterClick = useCallback(coordinates => {\n    const view = guardianMap.getView();\n    const zoom = view.getZoom();\n    view.animate({\n      zoom: zoom >= 6.5 ? zoom : 6.5,\n      center: coordinates,\n      duration: 600\n    });\n  }, [guardianMap]);\n  useEffect(() => {\n    dispatch(fetchAllVessel({\n      onStart: () => {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.vessel.fetching\n        });\n      },\n      onSuccess: () => {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.vessel.fetched\n        });\n      },\n      onError: e => {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n    dispatch(fetchAllPort({\n      onStart: () => {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.port.fetching\n        });\n      },\n      onSuccess: () => {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.port.fetched\n        });\n      },\n      onError: e => {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n  }, [dispatch]);\n  useEffect(() => {\n    const handleClickMap = e => {\n      const {\n        pixel\n      } = e;\n      const features = guardianMap.getFeaturesAtPixel(pixel);\n      const featureClicked = features[0];\n\n      if (featureClicked) {\n        if (featureClicked.get(\"click_disabled\") || !featureClicked.get(\"name\")) {\n          return null;\n        }\n\n        zoomAfterClick(e.coordinate);\n        setSelectedFeature(featureClicked);\n        setIsShowVesselInfo(true);\n        dispatch(BaseFunctions.setState({\n          field: \"selectedVessel\",\n          name: featureClicked.get('name'),\n          imo: featureClicked.get('imo')\n        }));\n      } else {\n        setIsShowVesselInfo(false);\n      }\n    };\n\n    if (guardianMap) {\n      guardianMap.on(\"click\", handleClickMap);\n    }\n  }, [guardianMap, zoomAfterClick]);\n\n  const handleClickSimulation = () => {\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: {\n        data: [],\n        loading: false,\n        update: false,\n        error: null,\n        show: !show\n      }\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"root\"\n  }, __jsx(\"div\", {\n    id: \"screenshot\"\n  }, __jsx(BaseMap, {\n    guardianMap: guardianMap,\n    onSetMap: setGuardianMap\n  }), __jsx(Drawer, {\n    isCollapsed: isCollapsed,\n    placement: \"bottom\",\n    visible: isShowVesselInfo,\n    title: \"Simulation Points\"\n  }, __jsx(SimulationReSult, {\n    selectedVessel: selectedVessel\n  }))), guardianMap && __jsx(React.Fragment, null, __jsx(VesselLayer, {\n    selectedVessel: null,\n    vesselList: veselList,\n    guardianMap: guardianMap\n  }), __jsx(PortLayer, {\n    selectedPort: null,\n    portList: portList,\n    guardianMap: guardianMap\n  }), __jsx(SelectedLayer, {\n    selectedFeature: selectedFeature,\n    guardianMap: guardianMap\n  }), __jsx(SimulationRoutesLayer, {\n    guardianMap: guardianMap,\n    selectedVessel: selectedVessel\n  }), __jsx(VesselSettings, {\n    show: name,\n    handleClickSimulation: () => handleClickSimulation()\n  })));\n};\n\nexport default /*#__PURE__*/memo(Dashboard);","map":null,"metadata":{},"sourceType":"module"}