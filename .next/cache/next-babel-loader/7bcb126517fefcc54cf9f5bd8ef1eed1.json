{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport authSagas, { getCurrentUser } from \"services/auth/sagas\";\nimport createReducer from \"services/reducers\";\n\nfunction createInjectorsEnhancer(params) {\n  return createInjectorStore => (...args) => {\n    const store = createInjectorStore(...args);\n    return _objectSpread(_objectSpread({}, store), {}, {\n      createReducer: params.createReducer,\n      runSaga: params.runSaga,\n      injectedReducers: {},\n      // Reducer registry\n      injectedSagas: {} // Saga registry\n\n    });\n  };\n}\n\nfunction forceReducerReload({\n  injectedReducers,\n  replaceReducer\n}) {\n  replaceReducer(createReducer(injectedReducers));\n}\n\nconst makeStore = () => {\n  const composeEnhancers = compose;\n  const sagaMiddleware = createSagaMiddleware();\n  const composeMiddleware = false || !false ? compose(applyMiddleware(sagaMiddleware)) : compose(applyMiddleware(sagaMiddleware), applyMiddleware(logger));\n  const {\n    run: runSaga\n  } = sagaMiddleware;\n  const enhancers = [composeMiddleware, createInjectorsEnhancer({\n    createReducer,\n    runSaga\n  })];\n  const store = createStore(createReducer(), composeEnhancers(...enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {\n    auth: {\n      task: store.runSaga(authSagas, {})\n    } // vessel: { task: store.runSaga(vesslSagas, {}) },\n\n  }; // Saga registry\n\n  store.sagaTask = store.runSaga(getCurrentUser, {});\n\n  if (module.hot) {\n    module.hot.accept(\"services/reducers\", () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n};\n\nexport const ReduxWrapper = createWrapper(makeStore, {\n  debug: process.env.REDUX_DEBUG === \"true\"\n});","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/store.ts"],"names":["createWrapper","applyMiddleware","compose","createStore","logger","createSagaMiddleware","authSagas","getCurrentUser","createReducer","createInjectorsEnhancer","params","createInjectorStore","args","store","runSaga","injectedReducers","injectedSagas","forceReducerReload","replaceReducer","makeStore","composeEnhancers","sagaMiddleware","composeMiddleware","run","enhancers","auth","task","sagaTask","module","hot","accept","ReduxWrapper","debug","process","env","REDUX_DEBUG"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAAyC,oBAAzC;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAA6D,OAA7D;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiD,YAAjD;AACA,OAAOC,SAAP,IAAoBC,cAApB,QAA0C,qBAA1C;AAEA,OAAOC,aAAP,MAA0B,mBAA1B;;AAUA,SAASC,uBAAT,CAAiCC,MAAjC,EAA8C;AAC5C,SAAQC,mBAAD,IAA8B,CAAC,GAAGC,IAAJ,KAAoB;AACvD,UAAMC,KAAK,GAAGF,mBAAmB,CAAC,GAAGC,IAAJ,CAAjC;AAEA,2CACKC,KADL;AAEEL,MAAAA,aAAa,EAAEE,MAAM,CAACF,aAFxB;AAGEM,MAAAA,OAAO,EAAEJ,MAAM,CAACI,OAHlB;AAIEC,MAAAA,gBAAgB,EAAE,EAJpB;AAIwB;AACtBC,MAAAA,aAAa,EAAE,EALjB,CAKqB;;AALrB;AAOD,GAVD;AAWD;;AAED,SAASC,kBAAT,CAA4B;AAAEF,EAAAA,gBAAF;AAAoBG,EAAAA;AAApB,CAA5B,EAAiF;AAC/EA,EAAAA,cAAc,CAACV,aAAa,CAACO,gBAAD,CAAd,CAAd;AACD;;AAED,MAAMI,SAA+B,GAAG,MAAM;AAC5C,QAAMC,gBAAgB,GAAGlB,OAAzB;AAEA,QAAMmB,cAAc,GAAGhB,oBAAoB,EAA3C;AAEA,QAAMiB,iBAAiB,GACrB,SAAyC,MAAzC,GACIpB,OAAO,CAACD,eAAe,CAACoB,cAAD,CAAhB,CADX,GAEInB,OAAO,CAACD,eAAe,CAACoB,cAAD,CAAhB,EAAkCpB,eAAe,CAACG,MAAD,CAAjD,CAHb;AAKA,QAAM;AAAEmB,IAAAA,GAAG,EAAET;AAAP,MAAmBO,cAAzB;AAEA,QAAMG,SAAS,GAAG,CAChBF,iBADgB,EAEhBb,uBAAuB,CAAC;AACtBD,IAAAA,aADsB;AAEtBM,IAAAA;AAFsB,GAAD,CAFP,CAAlB;AAQA,QAAMD,KAAgB,GAAGV,WAAW,CAACK,aAAa,EAAd,EAAkBY,gBAAgB,CAAC,GAAGI,SAAJ,CAAlC,CAApC,CApB4C,CAsB5C;;AACAX,EAAAA,KAAK,CAACC,OAAN,GAAgBO,cAAc,CAACE,GAA/B;AACAV,EAAAA,KAAK,CAACE,gBAAN,GAAyB,EAAzB,CAxB4C,CAwBhB;;AAC5BF,EAAAA,KAAK,CAACG,aAAN,GAAsB;AACpBS,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAEb,KAAK,CAACC,OAAN,CAAcR,SAAd,EAAyB,EAAzB;AAAR,KADc,CAEpB;;AAFoB,GAAtB,CAzB4C,CA4B1C;;AAEFO,EAAAA,KAAK,CAACc,QAAN,GAAiBd,KAAK,CAACC,OAAN,CAAcP,cAAd,EAA8B,EAA9B,CAAjB;;AAEA,MAAIqB,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,mBAAlB,EAAuC,MAAM;AAC3Cb,MAAAA,kBAAkB,CAACJ,KAAD,CAAlB;AACD,KAFD;AAGD;;AAED,SAAOA,KAAP;AACD,CAvCD;;AAyCA,OAAO,MAAMkB,YAAY,GAAG/B,aAAa,CAAYmB,SAAZ,EAAuB;AAC9Da,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,WAAZ,KAA4B;AAD2B,CAAvB,CAAlC","sourcesContent":["import { createWrapper, MakeStore } from \"next-redux-wrapper\"\nimport { applyMiddleware, compose, createStore, Store } from \"redux\"\nimport { logger } from \"redux-logger\"\nimport createSagaMiddleware, { Saga, Task } from \"redux-saga\"\nimport authSagas, { getCurrentUser } from \"services/auth/sagas\"\nimport vesslSagas from \"services/vessel/sagas\"\nimport createReducer from \"services/reducers\"\nimport { IAppState, InjectedStore } from \"types/redux\"\n\nexport interface SagaStore extends Store {\n  sagaTask?: Task\n  injectedReducers?: any\n  injectedSagas?: any\n  runSaga?(saga: Saga<any[]> | undefined, args: any | undefined): any\n}\n\nfunction createInjectorsEnhancer(params: any) {\n  return (createInjectorStore: any) => (...args: any[]) => {\n    const store = createInjectorStore(...args)\n\n    return {\n      ...store,\n      createReducer: params.createReducer,\n      runSaga: params.runSaga,\n      injectedReducers: {}, // Reducer registry\n      injectedSagas: {}, // Saga registry\n    }\n  }\n}\n\nfunction forceReducerReload({ injectedReducers, replaceReducer }: InjectedStore) {\n  replaceReducer(createReducer(injectedReducers))\n}\n\nconst makeStore: MakeStore<IAppState> = () => {\n  const composeEnhancers = compose\n\n  const sagaMiddleware = createSagaMiddleware()\n\n  const composeMiddleware =\n    process.env.NODE_ENV === \"production\" || !process.browser\n      ? compose(applyMiddleware(sagaMiddleware))\n      : compose(applyMiddleware(sagaMiddleware), applyMiddleware(logger))\n\n  const { run: runSaga } = sagaMiddleware\n\n  const enhancers = [\n    composeMiddleware,\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ]\n\n  const store: SagaStore = createStore(createReducer(), composeEnhancers(...enhancers))\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run\n  store.injectedReducers = {} // Reducer registry\n  store.injectedSagas = {\n    auth: { task: store.runSaga(authSagas, {}) },\n    // vessel: { task: store.runSaga(vesslSagas, {}) },\n  } // Saga registry\n\n  store.sagaTask = store.runSaga(getCurrentUser, {})\n\n  if (module.hot) {\n    module.hot.accept(\"services/reducers\", () => {\n      forceReducerReload(store)\n    })\n  }\n\n  return store\n}\n\nexport const ReduxWrapper = createWrapper<IAppState>(makeStore, {\n  debug: process.env.REDUX_DEBUG === \"true\",\n})\n"]},"metadata":{},"sourceType":"module"}