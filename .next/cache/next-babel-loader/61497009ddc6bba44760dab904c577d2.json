{"ast":null,"code":"import _compact from \"lodash/compact\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport React from 'react';\nimport SimulationSettings from 'components/SimulationSettings';\nimport { convertCoord2LongLat, convertHeadingtoDegree, convertLongLat2Coords } from 'core/model/Map';\nimport { formatDateTimeUTC, YYYY_MM_DD_HH_MM_SS } from 'core/utils/datetime';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { simulationFormatMessage } from 'core/model/Vessel';\nimport { BaseFunctions } from \"services/vessel/actions\";\nimport VesselServices from \"services/vessel/api\";\nconst vectorSource = new ol.source.Vector({\n  format: new ol.format.GeoJSON()\n});\n\nconst getRotation = (startPoint, endPoint) => {\n  const dx = endPoint[0] - startPoint[0];\n  const dy = endPoint[1] - startPoint[1];\n  return -Math.atan2(dy, dx);\n};\n\nconst styleFunction = feature => {\n  const geometry = feature.getGeometry();\n  const styles = [// linestring\n  new ol.style.Style({\n    stroke: new ol.style.Stroke({\n      color: '#ffcc33',\n      width: 2\n    })\n  })];\n  geometry.forEachSegment(function (start, end) {\n    const rotation = getRotation(start, end);\n    console.log('rotation' + rotation); // arrows\n\n    styles.push(new ol.style.Style({\n      geometry: new ol.geom.Point(end),\n      image: new ol.style.Icon({\n        src: 'icons/arrow.png',\n        anchor: [0.75, 0.5],\n        rotateWithView: true,\n        rotation: rotation\n      })\n    }));\n  });\n  return styles;\n};\n\nfunction Index({\n  guardianMap,\n  selectedVessel\n}) {\n  const dispatch = useDispatch();\n  const {\n    0: currentFeature,\n    1: setCurrentFeature\n  } = useState(new ol.Feature());\n  const {\n    0: firstCoord,\n    1: setFirstCoord\n  } = useState(null);\n  const {\n    simulationRoutes: {\n      update,\n      data: SimulationRoutesData,\n      show: showSimulationRoutes\n    }\n  } = selectedVessel;\n  const createdAtTime = moment().toString();\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const draw = new ol.interaction.Draw({\n    source: vectorSource,\n    type: 'LineString'\n  });\n  const simulationLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: styleFunction\n  });\n  useEffect(() => {\n    let increaseMinutes = 0;\n\n    if (showSimulationRoutes && selectedVessel.name) {\n      guardianMap.addLayer(simulationLayer);\n      guardianMap.addInteraction(draw);\n    }\n\n    if (!showSimulationRoutes) {\n      guardianMap.getInteractions().pop();\n      simulationLayer.getSource().clear();\n      guardianMap.removeLayer(simulationLayer);\n    }\n\n    draw.on('drawend', function (evt) {\n      const feature = evt.feature;\n      const coords = feature.getGeometry().getCoordinates();\n      setFirstCoord(coords[0]);\n      debugger;\n      const simulationData = coords.map((coordinate, index) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(coords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = formatDateTimeUTC(moment(createdAtTime).add(increaseMinutes, 'minutes').toString(), YYYY_MM_DD_HH_MM_SS);\n          const message = simulationFormatMessage({\n            heading,\n            longLatCoord,\n            timeStamp\n          });\n          increaseMinutes += 5;\n          return message;\n        }\n      });\n      dispatch(BaseFunctions.setState({\n        field: \"selectedVessel\",\n        simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n          data: _compact(simulationData)\n        })\n      }));\n      setCurrentFeature(feature);\n      guardianMap.removeInteraction(draw);\n    });\n  }, [showSimulationRoutes, selectedVessel.name]);\n  useEffect(() => {\n    if (currentFeature && update) {\n      const source = simulationLayer.getSource();\n      const coords = SimulationRoutesData.map(record => {\n        return convertLongLat2Coords([record.longitude, record.latitude]);\n      });\n      const updateCoords = [firstCoord].concat(coords);\n      const geometry = currentFeature.getGeometry();\n      geometry.setCoordinates(updateCoords);\n      source.clear();\n      source.addFeature(currentFeature);\n      const simulationData = geometry.getCoordinates().map((coordinate, index) => {\n        if (index !== 0) {\n          const heading = convertHeadingtoDegree(getRotation(updateCoords[index - 1], coordinate));\n          const longLatCoord = convertCoord2LongLat(coordinate);\n          const timeStamp = SimulationRoutesData[index - 1].timestamp;\n          const speed = SimulationRoutesData[index - 1].speed;\n          const created_at = SimulationRoutesData[index - 1].created_at;\n          const mmsi = currentFeature.get('mmsi');\n          const message = simulationFormatMessage({\n            mmsi,\n            heading,\n            longLatCoord,\n            timeStamp,\n            speed,\n            created_at\n          });\n          return message;\n        }\n      });\n      dispatch(BaseFunctions.setState({\n        field: \"selectedVessel\",\n        simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n          update: !update,\n          data: _compact(simulationData)\n        })\n      }));\n    }\n  }, [update]);\n\n  const handleClickClearDraw = () => {\n    guardianMap.getInteractions().pop();\n    guardianMap.addInteraction(draw);\n  };\n\n  const handleClickClearDrawLayer = () => {\n    simulationLayer.getSource().clear();\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n        data: []\n      })\n    }));\n  };\n\n  const handleClickSend = () => {\n    simulationLayer.getSource().clear();\n    guardianMap.removeLayer(simulationLayer);\n    guardianMap.addLayer(simulationLayer);\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, selectedVessel.simulationRoutes), {}, {\n        data: []\n      })\n    }));\n    VesselServices.simulate(selectedVessel.imo, {\n      data: SimulationRoutesData\n    });\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(SimulationSettings, {\n    handleClickClearDraw: handleClickClearDraw,\n    handleClickClearDrawLayer: handleClickClearDrawLayer,\n    handleClickSend: handleOpenDialog,\n    show: showSimulationRoutes\n  }), __jsx(Dialog, {\n    open: openDialog,\n    onClose: handleCloseDialog,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\"\n  }, __jsx(DialogTitle, {\n    id: \"alert-dialog-title\"\n  }, 'Create Simulation Data Confirmation?'), __jsx(DialogContent, null, __jsx(DialogContentText, {\n    id: \"alert-dialog-description\"\n  }, \"Please be aware that this simulation data will effect to voyage of current vessel, it is recommended to use on a fake vessel which is not belong to our customer, will you continue?\")), __jsx(DialogActions, null, __jsx(Button, {\n    onClick: handleCloseDialog,\n    color: \"primary\"\n  }, \"Cancel\"), __jsx(Button, {\n    onClick: handleClickSend,\n    color: \"primary\",\n    autoFocus: true\n  }, \"Send\"))));\n}\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}