{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport format from \"date-fns/format\";\nvar TIME_ZONE_OFFSET = format(new Date(), \"XX\");\nvar instance = axios.create({\n  baseURL: \"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/simulation/v1\"),\n  headers: {\n    \"x-time-zone-offset\": TIME_ZONE_OFFSET\n  },\n  withCredentials: true\n});\ninstance.interceptors.request.use(function (config) {\n  return _objectSpread(_objectSpread({}, config), {}, {\n    headers: _objectSpread({}, config.headers)\n  });\n}, function (error) {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  return Promise.reject(error.response);\n});\nexport default instance;","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/_base/_axios.ts"],"names":["axios","format","TIME_ZONE_OFFSET","Date","instance","create","baseURL","process","env","NEXT_PUBLIC_API_URL","headers","withCredentials","interceptors","request","use","config","error","Promise","reject","response"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,gBAAgB,GAAGD,MAAM,CAAC,IAAIE,IAAJ,EAAD,EAAa,IAAb,CAA/B;AAEA,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC5BC,EAAAA,OAAO,YAAKC,OAAO,CAACC,GAAR,CAAYC,mBAAjB,mBADqB;AAE5BC,EAAAA,OAAO,EAAE;AACP,0BAAsBR;AADf,GAFmB;AAK5BS,EAAAA,eAAe,EAAE;AALW,CAAb,CAAjB;AAQAP,QAAQ,CAACQ,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAACC,MAAD,EAAY;AACV,yCACKA,MADL;AAEEL,IAAAA,OAAO,oBACFK,MAAM,CAACL,OADL;AAFT;AAMD,CARH,EASE,UAACM,KAAD,EAAW;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAXH;AAcAZ,QAAQ,CAACQ,YAAT,CAAsBO,QAAtB,CAA+BL,GAA/B,CACE,UAACK,QAAD,EAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIE,UAACH,KAAD,EAAW;AACT,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAK,CAACG,QAArB,CAAP;AACD,CANH;AASA,eAAef,QAAf","sourcesContent":["import axios from \"axios\"\nimport format from \"date-fns/format\"\n\nconst TIME_ZONE_OFFSET = format(new Date(), \"XX\")\n\nconst instance = axios.create({\n  baseURL: `${process.env.NEXT_PUBLIC_API_URL}/simulation/v1`,\n  headers: {\n    \"x-time-zone-offset\": TIME_ZONE_OFFSET,\n  },\n  withCredentials: true,\n})\n\ninstance.interceptors.request.use(\n  (config) => {\n    return {\n      ...config,\n      headers: {\n        ...config.headers,\n      },\n    }\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\ninstance.interceptors.response.use(\n  (response) => {\n    return response\n  },\n  (error) => {\n    return Promise.reject(error.response)\n  }\n)\n\nexport default instance\n"]},"metadata":{},"sourceType":"module"}