{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport VectorSource from \"ol/source/Vector\";\nimport { Stroke, Style, Circle } from \"ol/style\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport VectorLayer from \"ol/layer/Vector\";\nvar selectedLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON()\n  }),\n  updateWhileAnimating: true\n});\nvar selectedStyled = new Style({\n  image: new Circle({\n    radius: 10,\n    stroke: new Stroke({\n      color: \"rgba(255, 0, 0, 0.8)\",\n      width: 2\n    })\n  })\n});\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var selectedFeature = _ref.selectedFeature,\n      guardianMap = _ref.guardianMap;\n  useEffect(function () {\n    var selectedSource = selectedLayer.getSource();\n\n    if (selectedFeature) {\n      selectedSource.clear();\n      var circleSelected = selectedFeature.clone();\n      circleSelected.setStyle(selectedStyled);\n      selectedSource.addFeature(circleSelected);\n    } else {\n      selectedSource.clear();\n    }\n  }, [selectedFeature]);\n  useEffect(function () {\n    guardianMap.addLayer(selectedLayer);\n  }, [guardianMap]);\n  return null;\n};\n\n_s(Index, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/components/Layers/SelectedFeature/index.tsx"],"names":["useEffect","VectorSource","Stroke","Style","Circle","GeoJSON","VectorLayer","selectedLayer","source","format","updateWhileAnimating","selectedStyled","image","radius","stroke","color","width","Index","selectedFeature","guardianMap","selectedSource","getSource","clear","circleSelected","clone","setStyle","addFeature","addLayer"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,MAA1C,QAAwD,UAAxD;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAIA,IAAMC,aAAa,GAAG,IAAID,WAAJ,CAAgB;AACpCE,EAAAA,MAAM,EAAE,IAAIP,YAAJ,CAAiB;AACvBQ,IAAAA,MAAM,EAAE,IAAIJ,OAAJ;AADe,GAAjB,CAD4B;AAIpCK,EAAAA,oBAAoB,EAAE;AAJc,CAAhB,CAAtB;AAMA,IAAMC,cAAc,GAAG,IAAIR,KAAJ,CAAU;AAC/BS,EAAAA,KAAK,EAAE,IAAIR,MAAJ,CAAW;AAChBS,IAAAA,MAAM,EAAE,EADQ;AAEhBC,IAAAA,MAAM,EAAE,IAAIZ,MAAJ,CAAW;AACjBa,MAAAA,KAAK,EAAE,sBADU;AAEjBC,MAAAA,KAAK,EAAE;AAFU,KAAX;AAFQ,GAAX;AADwB,CAAV,CAAvB;;AAeA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA4D;AAAA;;AAAA,MAAzDC,eAAyD,QAAzDA,eAAyD;AAAA,MAAxCC,WAAwC,QAAxCA,WAAwC;AACxEnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,cAAc,GAAGb,aAAa,CAACc,SAAd,EAAvB;;AACA,QAAIH,eAAJ,EAAqB;AACnBE,MAAAA,cAAc,CAACE,KAAf;AACA,UAAMC,cAAc,GAAGL,eAAe,CAACM,KAAhB,EAAvB;AACAD,MAAAA,cAAc,CAACE,QAAf,CAAwBd,cAAxB;AACAS,MAAAA,cAAc,CAACM,UAAf,CAA0BH,cAA1B;AACD,KALD,MAKO;AACLH,MAAAA,cAAc,CAACE,KAAf;AACD;AACF,GAVQ,EAUN,CAACJ,eAAD,CAVM,CAAT;AAYAlB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,WAAW,CAACQ,QAAZ,CAAqBpB,aAArB;AACD,GAFQ,EAEN,CAACY,WAAD,CAFM,CAAT;AAIA,SAAO,IAAP;AACD,CAlBD;;GAAMF,K;;KAAAA,K;AAoBN,eAAeA,KAAf","sourcesContent":["import { useEffect } from \"react\"\nimport Map from \"ol/Map\"\nimport VectorSource from \"ol/source/Vector\"\nimport { Icon, Text, Fill, Stroke, Style, Circle } from \"ol/style\"\nimport GeoJSON from \"ol/format/GeoJSON\"\nimport VectorLayer from \"ol/layer/Vector\"\nimport LayerGroup from \"ol/layer/Group\"\nimport { Feature } from \"ol\"\n\nconst selectedLayer = new VectorLayer({\n  source: new VectorSource({\n    format: new GeoJSON(),\n  }),\n  updateWhileAnimating: true,\n})\nconst selectedStyled = new Style({\n  image: new Circle({\n    radius: 10,\n    stroke: new Stroke({\n      color: \"rgba(255, 0, 0, 0.8)\",\n      width: 2,\n    }),\n  }),\n})\n\ninterface SelectedFeatureProps {\n  guardianMap: Map\n  selectedFeature: Feature\n}\n\nconst Index = ({ selectedFeature, guardianMap }: SelectedFeatureProps) => {\n  useEffect(() => {\n    const selectedSource = selectedLayer.getSource()\n    if (selectedFeature) {\n      selectedSource.clear()\n      const circleSelected = selectedFeature.clone()\n      circleSelected.setStyle(selectedStyled)\n      selectedSource.addFeature(circleSelected)\n    } else {\n      selectedSource.clear()\n    }\n  }, [selectedFeature])\n\n  useEffect(() => {\n    guardianMap.addLayer(selectedLayer)\n  }, [guardianMap])\n\n  return null\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}