{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { stringify } from \"querystring\";\nimport axios from \"services/_base/_axios\";\nimport produce from \"immer\";\n\nclass VesselServices {\n  async fetchAll(params) {\n    const response = await axios.get(`/vessels?${stringify(params)}`);\n    const data = {\n      data: {\n        data: response.data.data.map(record => {\n          const attributes = produce(record.attributes, draft => {\n            draft.properties = _objectSpread(_objectSpread({}, draft), draft.properties);\n            delete draft.properties.geometry;\n          });\n          return attributes;\n        })\n      }\n    };\n    return data;\n  }\n\n  async simulate(imo, params) {\n    axios.post(`/spires?imos[]=${imo}`, params);\n  }\n\n}\n\nexport default new VesselServices();","map":null,"metadata":{},"sourceType":"module"}