{"ast":null,"code":"var _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/layouts/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport \"assets/styles/layout.scss\";\nimport Loader from \"components/Common/Loader\";\nimport { DASHBOARD, HOME, LOGIN, PUBLIC_ROUTES } from \"core/constants/routes\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AuthSelector } from \"services/auth/selectors\";\nimport MainLayout from \"./Main\";\nimport PublicLayout from \"./Public\";\nvar Layouts = {\n  main: MainLayout,\n  \"public\": PublicLayout\n};\n\nfunction Layout(props) {\n  _s();\n\n  var _this = this;\n\n  var router = useRouter();\n  var children = props.children,\n      routerLoading = props.routerLoading;\n  var isPublicRoute = useMemo(function () {\n    return PUBLIC_ROUTES.includes(router.pathname);\n  }, [router.pathname]);\n\n  var _useState = useState(isPublicRoute ? \"public\" : \"main\"),\n      layout = _useState[0],\n      setLayout = _useState[1];\n\n  var _useSelector = useSelector(AuthSelector),\n      authorizing = _useSelector.authorizing,\n      authorized = _useSelector.authorized;\n\n  useEffect(function () {\n    if (!isPublicRoute && !authorized && !authorizing) {\n      setLayout(\"public\");\n      router.push(LOGIN);\n      return;\n    }\n\n    if (isPublicRoute && authorized || router.pathname === HOME) {\n      setLayout(\"main\");\n      router.push(DASHBOARD);\n    }\n  }, [authorized, isPublicRoute, router, authorizing]);\n  var BootstrappedLayout = useMemo(function () {\n    var currentLayout = layout;\n    var child = children;\n\n    if (authorizing && !authorized) {\n      currentLayout = \"public\";\n    }\n\n    if (routerLoading || authorizing && !authorized) {\n      child = __jsx(Loader, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }\n      });\n    }\n\n    var Container = Layouts[currentLayout];\n    return __jsx(Container, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }\n    }, child);\n  }, [authorized, authorizing, children, layout, routerLoading]);\n  return __jsx(React.Fragment, null, BootstrappedLayout);\n}\n\n_s(Layout, \"CeVnOIevgdgyUU9TCUq+2y/s5JA=\", false, function () {\n  return [useRouter, useSelector];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/layouts/index.tsx"],"names":["Loader","DASHBOARD","HOME","LOGIN","PUBLIC_ROUTES","useRouter","React","useEffect","useMemo","useState","useSelector","AuthSelector","MainLayout","PublicLayout","Layouts","main","Layout","props","router","children","routerLoading","isPublicRoute","includes","pathname","layout","setLayout","authorizing","authorized","push","BootstrappedLayout","currentLayout","child","Container"],"mappings":";;;;AAAA,OAAO,2BAAP;AACA,OAAOA,MAAP,MAAmB,0BAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,aAAjC,QAAsD,uBAAtD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,UAAP,MAAuB,QAAvB;AACA,OAAOC,YAAP,MAAyB,UAAzB;AAOA,IAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAEH,UADQ;AAEd,YAAQC;AAFM,CAAhB;;AAKA,SAASG,MAAT,CAAgBC,KAAhB,EAAyC;AAAA;;AAAA;;AACvC,MAAMC,MAAM,GAAGb,SAAS,EAAxB;AADuC,MAE/Bc,QAF+B,GAEHF,KAFG,CAE/BE,QAF+B;AAAA,MAErBC,aAFqB,GAEHH,KAFG,CAErBG,aAFqB;AAIvC,MAAMC,aAAa,GAAGb,OAAO,CAAC;AAAA,WAAMJ,aAAa,CAACkB,QAAd,CAAuBJ,MAAM,CAACK,QAA9B,CAAN;AAAA,GAAD,EAAgD,CAACL,MAAM,CAACK,QAAR,CAAhD,CAA7B;;AAJuC,kBAKXd,QAAQ,CAAoBY,aAAa,GAAG,QAAH,GAAc,MAA/C,CALG;AAAA,MAKhCG,MALgC;AAAA,MAKxBC,SALwB;;AAAA,qBAOHf,WAAW,CAACC,YAAD,CAPR;AAAA,MAO/Be,WAP+B,gBAO/BA,WAP+B;AAAA,MAOlBC,UAPkB,gBAOlBA,UAPkB;;AASvCpB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACc,aAAD,IAAkB,CAACM,UAAnB,IAAiC,CAACD,WAAtC,EAAmD;AACjDD,MAAAA,SAAS,CAAC,QAAD,CAAT;AACAP,MAAAA,MAAM,CAACU,IAAP,CAAYzB,KAAZ;AACA;AACD;;AAED,QAAKkB,aAAa,IAAIM,UAAlB,IAAiCT,MAAM,CAACK,QAAP,KAAoBrB,IAAzD,EAA+D;AAC7DuB,MAAAA,SAAS,CAAC,MAAD,CAAT;AACAP,MAAAA,MAAM,CAACU,IAAP,CAAY3B,SAAZ;AACD;AACF,GAXQ,EAWN,CAAC0B,UAAD,EAAaN,aAAb,EAA4BH,MAA5B,EAAoCQ,WAApC,CAXM,CAAT;AAaA,MAAMG,kBAAkB,GAAGrB,OAAO,CAAC,YAAM;AACvC,QAAIsB,aAAa,GAAGN,MAApB;AACA,QAAIO,KAAK,GAAGZ,QAAZ;;AAEA,QAAIO,WAAW,IAAI,CAACC,UAApB,EAAgC;AAC9BG,MAAAA,aAAa,GAAG,QAAhB;AACD;;AAED,QAAIV,aAAa,IAAKM,WAAW,IAAI,CAACC,UAAtC,EAAmD;AACjDI,MAAAA,KAAK,GAAG,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACD;;AAED,QAAMC,SAAS,GAAGlB,OAAO,CAACgB,aAAD,CAAzB;AAEA,WAAO,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYC,KAAZ,CAAP;AACD,GAfiC,EAe/B,CAACJ,UAAD,EAAaD,WAAb,EAA0BP,QAA1B,EAAoCK,MAApC,EAA4CJ,aAA5C,CAf+B,CAAlC;AAiBA,SAAO,4BAAGS,kBAAH,CAAP;AACD;;GAxCQb,M;UACQX,S,EAMqBK,W;;;KAP7BM,M;AA0CT,eAAeA,MAAf","sourcesContent":["import \"assets/styles/layout.scss\"\nimport Loader from \"components/Common/Loader\"\nimport { DASHBOARD, HOME, LOGIN, PUBLIC_ROUTES } from \"core/constants/routes\"\nimport { useRouter } from \"next/router\"\nimport React, { useEffect, useMemo, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { AuthSelector } from \"services/auth/selectors\"\nimport MainLayout from \"./Main\"\nimport PublicLayout from \"./Public\"\n\ninterface IndexLayoutProps {\n  children: React.ReactNode\n  routerLoading: boolean\n}\n\nconst Layouts = {\n  main: MainLayout,\n  public: PublicLayout,\n}\n\nfunction Layout(props: IndexLayoutProps) {\n  const router = useRouter()\n  const { children, routerLoading } = props\n\n  const isPublicRoute = useMemo(() => PUBLIC_ROUTES.includes(router.pathname), [router.pathname])\n  const [layout, setLayout] = useState<\"public\" | \"main\">(isPublicRoute ? \"public\" : \"main\")\n\n  const { authorizing, authorized } = useSelector(AuthSelector)\n\n  useEffect(() => {\n    if (!isPublicRoute && !authorized && !authorizing) {\n      setLayout(\"public\")\n      router.push(LOGIN)\n      return\n    }\n\n    if ((isPublicRoute && authorized) || router.pathname === HOME) {\n      setLayout(\"main\")\n      router.push(DASHBOARD)\n    }\n  }, [authorized, isPublicRoute, router, authorizing])\n\n  const BootstrappedLayout = useMemo(() => {\n    let currentLayout = layout\n    let child = children\n\n    if (authorizing && !authorized) {\n      currentLayout = \"public\"\n    }\n\n    if (routerLoading || (authorizing && !authorized)) {\n      child = <Loader />\n    }\n\n    const Container = Layouts[currentLayout]\n\n    return <Container>{child}</Container>\n  }, [authorized, authorizing, children, layout, routerLoading])\n\n  return <>{BootstrappedLayout}</>\n}\n\nexport default Layout\n"]},"metadata":{},"sourceType":"module"}