{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createReducer from \"services/reducers\";\n\nfunction createInjectorsEnhancer(params) {\n  return createInjectorStore => (...args) => {\n    const store = createInjectorStore(...args);\n    return _objectSpread(_objectSpread({}, store), {}, {\n      createReducer: params.createReducer,\n      runSaga: params.runSaga,\n      injectedReducers: {},\n      // Reducer registry\n      injectedSagas: {} // Saga registry\n\n    });\n  };\n}\n\nfunction forceReducerReload({\n  injectedReducers,\n  replaceReducer\n}) {\n  replaceReducer(createReducer(injectedReducers));\n}\n\nconst makeStore = () => {\n  const composeEnhancers = compose;\n  const sagaMiddleware = createSagaMiddleware();\n  const composeMiddleware = true || !false ? compose(applyMiddleware(sagaMiddleware)) : compose(applyMiddleware(sagaMiddleware), applyMiddleware(logger));\n  const {\n    run: runSaga\n  } = sagaMiddleware;\n  const enhancers = [composeMiddleware, createInjectorsEnhancer({\n    createReducer,\n    runSaga\n  })];\n  const store = createStore(createReducer(), composeEnhancers(...enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {// vessel: { task: store.runSaga(vesslSagas, {}) },\n  }; // Saga registry\n\n  if (module.hot) {\n    module.hot.accept(\"services/reducers\", () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n};\n\nexport const ReduxWrapper = createWrapper(makeStore, {\n  debug: process.env.REDUX_DEBUG === \"true\"\n});","map":null,"metadata":{},"sourceType":"module"}