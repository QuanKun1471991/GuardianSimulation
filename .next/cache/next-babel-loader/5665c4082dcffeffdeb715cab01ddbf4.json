{"ast":null,"code":"export var PortActions;\n\n(function (PortActions) {\n  PortActions[\"FETCH_ALL\"] = \"[port] fetch all\";\n  PortActions[\"FETCH_ALL_SUCCESS\"] = \"[port] fetch all success\";\n  PortActions[\"FETCH_ALL_FAILED\"] = \"[port] fetch all failed\";\n})(PortActions || (PortActions = {}));","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/services/port/types.ts"],"names":["PortActions"],"mappings":"AAWA,WAAYA,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W","sourcesContent":["export interface IPortState {\n  loading: boolean\n  error: string | null\n  data: []\n  meta: Record<string, unknown>\n  total: string\n  next_page: number\n  per_page: string\n  selectedPort: Record<string, unknown>\n}\n\nexport enum PortActions {\n  FETCH_ALL = \"[port] fetch all\",\n  FETCH_ALL_SUCCESS = \"[port] fetch all success\",\n  FETCH_ALL_FAILED = \"[port] fetch all failed\",\n}\n\nexport interface IFetchAllSuccessAction {\n  type: PortActions.FETCH_ALL_SUCCESS\n}\n\nexport interface IFetchAllFailedAction {\n  type: PortActions.FETCH_ALL_FAILED\n  payload: { error: string }\n}\n\nexport interface IFetchAllAction {\n  type: PortActions.FETCH_ALL\n  payload: {\n    onStart: () => void\n    onSuccess: () => void\n    onError: (e) => void\n  }\n}\n\nexport type PortActionTypes = IFetchAllSuccessAction | IFetchAllFailedAction | IFetchAllAction\n"]},"metadata":{},"sourceType":"module"}