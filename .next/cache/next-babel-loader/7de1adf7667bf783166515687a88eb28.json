{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createReducer from \"services/reducers\";\n\nfunction createInjectorsEnhancer(params) {\n  return function (createInjectorStore) {\n    return function () {\n      var store = createInjectorStore.apply(void 0, arguments);\n      return _objectSpread(_objectSpread({}, store), {}, {\n        createReducer: params.createReducer,\n        runSaga: params.runSaga,\n        injectedReducers: {},\n        // Reducer registry\n        injectedSagas: {} // Saga registry\n\n      });\n    };\n  };\n}\n\nfunction forceReducerReload(_ref) {\n  var injectedReducers = _ref.injectedReducers,\n      replaceReducer = _ref.replaceReducer;\n  replaceReducer(createReducer(injectedReducers));\n}\n\nvar makeStore = function makeStore() {\n  var composeEnhancers = compose;\n  var sagaMiddleware = createSagaMiddleware();\n  var composeMiddleware = true || !true ? compose(applyMiddleware(sagaMiddleware)) : compose(applyMiddleware(sagaMiddleware), applyMiddleware(logger));\n  var runSaga = sagaMiddleware.run;\n  var enhancers = [composeMiddleware, createInjectorsEnhancer({\n    createReducer: createReducer,\n    runSaga: runSaga\n  })];\n  var store = createStore(createReducer(), composeEnhancers.apply(void 0, enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {// vessel: { task: store.runSaga(vesslSagas, {}) },\n  }; // Saga registry\n\n  if (module.hot) {\n    module.hot.accept(\"services/reducers\", function () {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n};\n\nexport var ReduxWrapper = createWrapper(makeStore, {\n  debug: process.env.REDUX_DEBUG === \"true\"\n});","map":null,"metadata":{},"sourceType":"module"}