{"ast":null,"code":"import _get from \"lodash/get\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport styles from './styles';\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'; // import update from 'immutability-helper';\n\nimport { BaseFunctions } from \"services/vessel/actions\";\nimport { useDispatch } from 'react-redux';\nimport produce from \"immer\";\nconst useStyles = makeStyles(styles);\n\nfunction Index({\n  selectedVessel\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    simulationRoutes,\n    simulationRoutes: {\n      loading,\n      data\n    }\n  } = selectedVessel;\n  const {\n    0: rows,\n    1: setRows\n  } = useState(data);\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n  const handleUpdateRow = useCallback((index, key, value) => {\n    setRows(prevRows => produce(prevRows, draft => {\n      draft[index][key] = value;\n    }));\n  }, []);\n\n  const handleUpdate = () => {\n    dispatch(BaseFunctions.setState({\n      field: \"selectedVessel\",\n      simulationRoutes: _objectSpread(_objectSpread({}, simulationRoutes), {}, {\n        data: rows,\n        update: true\n      })\n    }));\n  };\n\n  const resultData = useCallback(() => {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.tableWrapper\n    }, __jsx(Table, {\n      className: classes.table,\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\"\n    }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n      align: \"center\"\n    }, \"Longitude\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Latitude\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Heading\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Speed\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Timestamp\"), __jsx(TableCell, {\n      align: \"center\"\n    }, \"Created_at\"), __jsx(TableCell, {\n      align: \"center\"\n    }, rows.length !== 0 && __jsx(React.Fragment, null, __jsx(Button, {\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      disableElevation: true,\n      onClick: () => handleUpdate()\n    }, \"Update\"))))), __jsx(TableBody, null, rows.map((row, index) => __jsx(TableRow, {\n      key: row.id,\n      style: {\n        whiteSpace: 'normal',\n        wordWrap: 'break-word',\n        backgroundColor: 'white'\n      }\n    }, __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\"\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'longitude'),\n      onChange: e => handleUpdateRow(index, 'longitude', e.currentTarget.value)\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\"\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'latitude'),\n      onChange: e => handleUpdateRow(index, 'latitude', e.currentTarget.value)\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\"\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'heading'),\n      disabled: true\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\"\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'speed'),\n      onChange: e => handleUpdateRow(index, 'speed', e.currentTarget.value)\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\"\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'timestamp'),\n      onChange: e => handleUpdateRow(index, 'timestamp', e.currentTarget.value)\n    })), __jsx(TableCell, {\n      className: classes.tableCell,\n      align: \"center\"\n    }, __jsx(TextField, {\n      id: \"standard-basic\",\n      value: _get(row, 'created_at'),\n      onChange: e => handleUpdateRow(index, 'created_at', e.currentTarget.value)\n    })), __jsx(TableCell, null))))));\n  }, [simulationRoutes, rows]);\n  return __jsx(React.Fragment, null, !loading && resultData());\n}\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}