{"ast":null,"code":"import _get from \"lodash/get\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { memo, useCallback, useEffect, useState } from \"react\";\nimport \"assets/styles/dashboard.scss\";\nimport { useInjectReducer } from \"core/hooks/useInjectReducer\";\nimport useInjectSaga from \"core/hooks/useInjectSaga\";\nimport vesselReducer from \"services/vessel/reducers\";\nimport portReducer from \"services/port/reducers\";\nimport vesselSaga from \"services/vessel/sagas\";\nimport portSaga from \"services/port/sagas\";\nimport { SagaInjectionModes } from \"core/constants/common\";\nimport { VesselSelector } from \"services/vessel/selectors\";\nimport { PortSelector } from \"services/port/selectors\";\nimport { fetchAll as fetchAllVessel } from \"services/vessel/actions\";\nimport { fetchAll as fetchAllPort } from \"services/port/actions\";\nimport Drawer from \"components/Drawer\";\nimport dynamic from \"next/dynamic\";\nimport { LayoutSelector } from \"services/layout/selectors\";\nvar BaseMap = dynamic(_c = function _c() {\n  return import(\"components/BaseMap\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/BaseMap\")];\n    },\n    modules: [\"components/BaseMap\"]\n  }\n});\n_c2 = BaseMap;\nvar VesselLayer = dynamic(_c3 = function _c3() {\n  return import(\"components/Layers/Vessel\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/Vessel\")];\n    },\n    modules: [\"components/Layers/Vessel\"]\n  }\n});\n_c4 = VesselLayer;\nvar PortLayer = dynamic(_c5 = function _c5() {\n  return import(\"components/Layers/Port\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/Port\")];\n    },\n    modules: [\"components/Layers/Port\"]\n  }\n});\n_c6 = PortLayer;\nvar SelectedLayer = dynamic(_c7 = function _c7() {\n  return import(\"components/Layers/SelectedFeature\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"components/Layers/SelectedFeature\")];\n    },\n    modules: [\"components/Layers/SelectedFeature\"]\n  }\n});\n_c8 = SelectedLayer;\nvar errorMessage = {\n  vessel: {\n    fetching: \"Fetching Cargo Data \",\n    fetched: \"Fetched Cargo Data successfully\"\n  },\n  port: {\n    fetching: \"Fetching Port Data\",\n    fetched: \"Fetched Port Data successfully\"\n  }\n};\n\nvar Dashboard = function Dashboard() {\n  _s();\n\n  useInjectReducer({\n    key: \"vessel\",\n    reducer: vesselReducer\n  });\n  useInjectSaga({\n    key: \"vessel\",\n    saga: vesselSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n  useInjectReducer({\n    key: \"port\",\n    reducer: portReducer\n  });\n  useInjectSaga({\n    key: \"port\",\n    saga: portSaga,\n    mode: SagaInjectionModes.RESTART_ON_REMOUNT\n  });\n\n  var _useSelector = useSelector(VesselSelector),\n      veselList = _useSelector.data;\n\n  var _useSelector2 = useSelector(PortSelector),\n      portList = _useSelector2.data;\n\n  var _useSelector3 = useSelector(LayoutSelector),\n      isCollapsed = _useSelector3.isCollapsed;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(null),\n      guardianMap = _useState[0],\n      setGuardianMap = _useState[1];\n\n  var _useState2 = useState(null),\n      selectedFeature = _useState2[0],\n      setSelectedFeature = _useState2[1];\n\n  var _useState3 = useState(false),\n      isShowVesselInfo = _useState3[0],\n      setIsShowVesselInfo = _useState3[1];\n\n  var zoomAfterClick = useCallback(function (coordinates) {\n    var view = guardianMap.getView();\n    var zoom = view.getZoom();\n    view.animate({\n      zoom: zoom >= 6.5 ? zoom : 6.5,\n      center: coordinates,\n      duration: 600\n    });\n  }, [guardianMap]);\n  useEffect(function () {\n    dispatch(fetchAllVessel({\n      onStart: function onStart() {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.vessel.fetching\n        });\n      },\n      onSuccess: function onSuccess() {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.vessel.fetched\n        });\n      },\n      onError: function onError(e) {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n    dispatch(fetchAllPort({\n      onStart: function onStart() {\n        _notification.info({\n          message: \"Info\",\n          description: errorMessage.port.fetching\n        });\n      },\n      onSuccess: function onSuccess() {\n        _notification.success({\n          message: \"Success\",\n          description: errorMessage.port.fetched\n        });\n      },\n      onError: function onError(e) {\n        _notification.error({\n          message: \"Error\",\n          description: _get(e, \"data.message\")\n        });\n      }\n    }));\n  }, [dispatch]);\n  useEffect(function () {\n    var handleClickMap = function handleClickMap(e) {\n      var pixel = e.pixel;\n      var features = guardianMap.getFeaturesAtPixel(pixel);\n      var featureClicked = features[0];\n\n      if (featureClicked) {\n        if (featureClicked.get(\"click_disabled\")) {\n          return null;\n        }\n\n        zoomAfterClick(e.coordinate);\n        setSelectedFeature(featureClicked);\n        setIsShowVesselInfo(true);\n      } else {\n        setIsShowVesselInfo(false);\n      }\n    };\n\n    if (guardianMap) {\n      guardianMap.on(\"click\", handleClickMap);\n    }\n  }, [guardianMap, zoomAfterClick]);\n  return __jsx(\"div\", {\n    className: \"root\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    id: \"screenshot\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(BaseMap, {\n    guardianMap: guardianMap,\n    onSetMap: setGuardianMap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), __jsx(Drawer, {\n    isCollapsed: isCollapsed,\n    placement: \"bottom\",\n    visible: isShowVesselInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })), guardianMap && __jsx(React.Fragment, null, __jsx(VesselLayer, {\n    vesselList: veselList,\n    guardianMap: guardianMap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), __jsx(PortLayer, {\n    portList: portList,\n    guardianMap: guardianMap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }), __jsx(SelectedLayer, {\n    selectedFeature: selectedFeature,\n    guardianMap: guardianMap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(Dashboard, \"XcLVPmme4GHpMjDc/inNYF9crMc=\", false, function () {\n  return [useInjectReducer, useInjectSaga, useInjectReducer, useInjectSaga, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c9 = Dashboard;\nexport default _c10 = /*#__PURE__*/memo(Dashboard);\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"BaseMap$dynamic\");\n$RefreshReg$(_c2, \"BaseMap\");\n$RefreshReg$(_c3, \"VesselLayer$dynamic\");\n$RefreshReg$(_c4, \"VesselLayer\");\n$RefreshReg$(_c5, \"PortLayer$dynamic\");\n$RefreshReg$(_c6, \"PortLayer\");\n$RefreshReg$(_c7, \"SelectedLayer$dynamic\");\n$RefreshReg$(_c8, \"SelectedLayer\");\n$RefreshReg$(_c9, \"Dashboard\");\n$RefreshReg$(_c10, \"%default%\");","map":{"version":3,"sources":["/Users/tonysan/Desktop/guardian-simulation/GuardianSimulation/src/pages/index.tsx"],"names":["useDispatch","useSelector","memo","useCallback","useEffect","useState","useInjectReducer","useInjectSaga","vesselReducer","portReducer","vesselSaga","portSaga","SagaInjectionModes","VesselSelector","PortSelector","fetchAll","fetchAllVessel","fetchAllPort","Drawer","dynamic","LayoutSelector","BaseMap","ssr","VesselLayer","PortLayer","SelectedLayer","errorMessage","vessel","fetching","fetched","port","Dashboard","key","reducer","saga","mode","RESTART_ON_REMOUNT","veselList","data","portList","isCollapsed","dispatch","guardianMap","setGuardianMap","selectedFeature","setSelectedFeature","isShowVesselInfo","setIsShowVesselInfo","zoomAfterClick","coordinates","view","getView","zoom","getZoom","animate","center","duration","onStart","info","message","description","onSuccess","success","onError","e","error","handleClickMap","pixel","features","getFeaturesAtPixel","featureClicked","get","coordinate","on"],"mappings":"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","sourcesContent":["import { NextPage } from \"next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { memo, useCallback, useEffect, useState } from \"react\"\nimport \"assets/styles/dashboard.scss\"\nimport { useInjectReducer } from \"core/hooks/useInjectReducer\"\nimport useInjectSaga from \"core/hooks/useInjectSaga\"\nimport vesselReducer from \"services/vessel/reducers\"\nimport portReducer from \"services/port/reducers\"\nimport vesselSaga from \"services/vessel/sagas\"\nimport portSaga from \"services/port/sagas\"\nimport { SagaInjectionModes } from \"core/constants/common\"\nimport { VesselSelector } from \"services/vessel/selectors\"\nimport { PortSelector } from \"services/port/selectors\"\nimport { fetchAll as fetchAllVessel } from \"services/vessel/actions\"\nimport { fetchAll as fetchAllPort } from \"services/port/actions\"\nimport { notification } from \"antd\"\nimport { get } from \"lodash\"\nimport Drawer from \"components/Drawer\"\nimport dynamic from \"next/dynamic\"\nimport { LayoutSelector } from \"services/layout/selectors\"\n\nconst BaseMap = dynamic(() => import(\"components/BaseMap\"), { ssr: false })\nconst VesselLayer = dynamic(() => import(\"components/Layers/Vessel\"), { ssr: false })\nconst PortLayer = dynamic(() => import(\"components/Layers/Port\"), { ssr: false })\nconst SelectedLayer = dynamic(() => import(\"components/Layers/SelectedFeature\"), { ssr: false })\n\nconst errorMessage = {\n  vessel: {\n    fetching: \"Fetching Cargo Data \",\n    fetched: \"Fetched Cargo Data successfully\",\n  },\n  port: {\n    fetching: \"Fetching Port Data\",\n    fetched: \"Fetched Port Data successfully\",\n  },\n}\n\nconst Dashboard: NextPage = () => {\n  useInjectReducer({ key: \"vessel\", reducer: vesselReducer })\n  useInjectSaga({ key: \"vessel\", saga: vesselSaga, mode: SagaInjectionModes.RESTART_ON_REMOUNT })\n  useInjectReducer({ key: \"port\", reducer: portReducer })\n  useInjectSaga({ key: \"port\", saga: portSaga, mode: SagaInjectionModes.RESTART_ON_REMOUNT })\n\n  const { data: veselList } = useSelector(VesselSelector)\n  const { data: portList } = useSelector(PortSelector)\n  const { isCollapsed } = useSelector(LayoutSelector)\n  const dispatch = useDispatch()\n  const [guardianMap, setGuardianMap] = useState(null)\n  const [selectedFeature, setSelectedFeature] = useState(null)\n  const [isShowVesselInfo, setIsShowVesselInfo] = useState(false)\n\n  const zoomAfterClick = useCallback(\n    (coordinates: []) => {\n      const view = guardianMap.getView()\n      const zoom = view.getZoom()\n      view.animate({ zoom: zoom >= 6.5 ? zoom : 6.5, center: coordinates, duration: 600 })\n    },\n    [guardianMap]\n  )\n\n  useEffect(() => {\n    dispatch(\n      fetchAllVessel({\n        onStart: () => {\n          notification.info({\n            message: \"Info\",\n            description: errorMessage.vessel.fetching,\n          })\n        },\n        onSuccess: () => {\n          notification.success({\n            message: \"Success\",\n            description: errorMessage.vessel.fetched,\n          })\n        },\n        onError: (e) => {\n          notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n        },\n      })\n    )\n    dispatch(\n      fetchAllPort({\n        onStart: () => {\n          notification.info({\n            message: \"Info\",\n            description: errorMessage.port.fetching,\n          })\n        },\n        onSuccess: () => {\n          notification.success({\n            message: \"Success\",\n            description: errorMessage.port.fetched,\n          })\n        },\n        onError: (e) => {\n          notification.error({ message: \"Error\", description: get(e, \"data.message\") })\n        },\n      })\n    )\n  }, [dispatch])\n  useEffect(() => {\n    const handleClickMap = (e) => {\n      const { pixel } = e\n      const features = guardianMap.getFeaturesAtPixel(pixel)\n      const featureClicked = features[0]\n      if (featureClicked) {\n        if (featureClicked.get(\"click_disabled\")) {\n          return null\n        }\n        zoomAfterClick(e.coordinate)\n        setSelectedFeature(featureClicked)\n        setIsShowVesselInfo(true)\n      } else {\n        setIsShowVesselInfo(false)\n      }\n    }\n    if (guardianMap) {\n      guardianMap.on(\"click\", handleClickMap)\n    }\n  }, [guardianMap, zoomAfterClick])\n  return (\n    <div className=\"root\">\n      <div id=\"screenshot\">\n        <BaseMap guardianMap={guardianMap} onSetMap={setGuardianMap} />\n        <Drawer isCollapsed={isCollapsed} placement=\"bottom\" visible={isShowVesselInfo} />\n        {/* <Drawer isCollapsed={isCollapsed} placement=\"right\" visible={isShowVesselInfo} /> */}\n      </div>\n      {guardianMap && (\n        <>\n          <VesselLayer vesselList={veselList} guardianMap={guardianMap} />\n          <PortLayer portList={portList} guardianMap={guardianMap} />\n          <SelectedLayer selectedFeature={selectedFeature} guardianMap={guardianMap} />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default memo(Dashboard)\n"]},"metadata":{},"sourceType":"module"}