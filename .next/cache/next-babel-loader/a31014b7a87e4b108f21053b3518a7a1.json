{"ast":null,"code":"import _get from \"lodash/get\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport portServices from \"services/port/api\";\nimport { BaseFunctions, fetchAllSuccess, fetchAllFailed } from \"./actions\";\nimport { PortActions } from \"./types\";\nexport function* fetchAll({\n  payload\n}) {\n  const {\n    onStart,\n    onSuccess,\n    onError\n  } = payload;\n  const filter = {\n    page: 1\n  };\n  onStart();\n\n  try {\n    const {\n      data: {\n        data\n      }\n    } = yield call(portServices.fetchAll, filter);\n    yield put(BaseFunctions.setState({\n      data\n    }));\n    yield put(fetchAllSuccess());\n  } catch (e) {\n    onError(e);\n    yield put(fetchAllFailed({\n      error: _get(e, \"data.message\")\n    }));\n  }\n}\nexport default function* rootSaga() {\n  yield all([takeLatest(PortActions.FETCH_ALL, fetchAll)]);\n}","map":null,"metadata":{},"sourceType":"module"}